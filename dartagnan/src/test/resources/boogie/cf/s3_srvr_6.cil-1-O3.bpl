// generated by SMACK version 2.7.0 for corral
// via /usr/local/bin/smack -q -t --no-memory-splitting --integer-encoding bit-vector --clang-options=-DCUSTOM_VERIFIER_ASSERT -O3 -fno-vectorize -fno-slp-vectorize -I/root/git/Dat3M/include/ -bpl /root/git/Dat3M/output/s3_srvr_6.cil-1-O3.bpl /root/git/Dat3M/output/s3_srvr_6.cil-1_tmp.c

// Basic types
type i1 = int;
type i5 = int;
type i6 = int;
type i8 = int;
type i16 = int;
type i24 = int;
type i32 = int;
type i33 = int;
type i40 = int;
type i48 = int;
type i56 = int;
type i64 = int;
type i80 = int;
type i88 = int;
type i96 = int;
type i128 = int;
type i160 = int;
type i256 = int;
type ref = i64;
type float;

// Basic constants
const $0: bv32;
axiom ($0 == 0bv32);
const $1: bv32;
axiom ($1 == 1bv32);
const $0.ref: ref;
axiom ($0.ref == 0);
const $1.ref: ref;
axiom ($1.ref == 1);
const $1024.ref: ref;
axiom ($1024.ref == 1024);
// Memory model constants
const $GLOBALS_BOTTOM: ref;
const $EXTERNS_BOTTOM: ref;
const $MALLOC_TOP: ref;

// Memory maps (1 regions)
var $M.0: [ref] bv32;

// Memory address bounds
axiom ($GLOBALS_BOTTOM == $sub.ref(0, 32064));
axiom ($EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32768)));
axiom ($MALLOC_TOP == 9223372036854775807);
function {:inline} $isExternal(p: ref) returns (bool) { $slt.ref.bool(p, $EXTERNS_BOTTOM) }

// SMT bit-vector/integer conversion
function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) returns (bv64);
function {:builtin "bv2nat"} $bv2uint.64(i: bv64) returns (i64);
function {:inline} $bv2int.64(i: bv64) returns (i64) { (if $slt.bv64.bool(i, 0bv64) then $sub.i64($bv2uint.64(i), 18446744073709551616) else $bv2uint.64(i)) }

// Integer arithmetic operations
function {:inline} $add.i1(i1: i1, i2: i1) returns (i1) { (i1 + i2) }
function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:inline} $add.i5(i1: i5, i2: i5) returns (i5) { (i1 + i2) }
function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) returns (bv5);
function {:inline} $add.i6(i1: i6, i2: i6) returns (i6) { (i1 + i2) }
function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) returns (bv6);
function {:inline} $add.i8(i1: i8, i2: i8) returns (i8) { (i1 + i2) }
function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:inline} $add.i16(i1: i16, i2: i16) returns (i16) { (i1 + i2) }
function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:inline} $add.i24(i1: i24, i2: i24) returns (i24) { (i1 + i2) }
function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:inline} $add.i32(i1: i32, i2: i32) returns (i32) { (i1 + i2) }
function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:inline} $add.i33(i1: i33, i2: i33) returns (i33) { (i1 + i2) }
function {:bvbuiltin "bvadd"} $add.bv33(i1: bv33, i2: bv33) returns (bv33);
function {:inline} $add.i40(i1: i40, i2: i40) returns (i40) { (i1 + i2) }
function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:inline} $add.i48(i1: i48, i2: i48) returns (i48) { (i1 + i2) }
function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:inline} $add.i56(i1: i56, i2: i56) returns (i56) { (i1 + i2) }
function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:inline} $add.i64(i1: i64, i2: i64) returns (i64) { (i1 + i2) }
function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:inline} $add.i80(i1: i80, i2: i80) returns (i80) { (i1 + i2) }
function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) returns (bv80);
function {:inline} $add.i88(i1: i88, i2: i88) returns (i88) { (i1 + i2) }
function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:inline} $add.i96(i1: i96, i2: i96) returns (i96) { (i1 + i2) }
function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:inline} $add.i128(i1: i128, i2: i128) returns (i128) { (i1 + i2) }
function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:inline} $add.i160(i1: i160, i2: i160) returns (i160) { (i1 + i2) }
function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) returns (bv160);
function {:inline} $add.i256(i1: i256, i2: i256) returns (i256) { (i1 + i2) }
function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) returns (bv256);
function {:inline} $sub.i1(i1: i1, i2: i1) returns (i1) { (i1 - i2) }
function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:inline} $sub.i5(i1: i5, i2: i5) returns (i5) { (i1 - i2) }
function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) returns (bv5);
function {:inline} $sub.i6(i1: i6, i2: i6) returns (i6) { (i1 - i2) }
function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) returns (bv6);
function {:inline} $sub.i8(i1: i8, i2: i8) returns (i8) { (i1 - i2) }
function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:inline} $sub.i16(i1: i16, i2: i16) returns (i16) { (i1 - i2) }
function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:inline} $sub.i24(i1: i24, i2: i24) returns (i24) { (i1 - i2) }
function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:inline} $sub.i32(i1: i32, i2: i32) returns (i32) { (i1 - i2) }
function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:inline} $sub.i33(i1: i33, i2: i33) returns (i33) { (i1 - i2) }
function {:bvbuiltin "bvsub"} $sub.bv33(i1: bv33, i2: bv33) returns (bv33);
function {:inline} $sub.i40(i1: i40, i2: i40) returns (i40) { (i1 - i2) }
function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:inline} $sub.i48(i1: i48, i2: i48) returns (i48) { (i1 - i2) }
function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:inline} $sub.i56(i1: i56, i2: i56) returns (i56) { (i1 - i2) }
function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:inline} $sub.i64(i1: i64, i2: i64) returns (i64) { (i1 - i2) }
function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:inline} $sub.i80(i1: i80, i2: i80) returns (i80) { (i1 - i2) }
function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) returns (bv80);
function {:inline} $sub.i88(i1: i88, i2: i88) returns (i88) { (i1 - i2) }
function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:inline} $sub.i96(i1: i96, i2: i96) returns (i96) { (i1 - i2) }
function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:inline} $sub.i128(i1: i128, i2: i128) returns (i128) { (i1 - i2) }
function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:inline} $sub.i160(i1: i160, i2: i160) returns (i160) { (i1 - i2) }
function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) returns (bv160);
function {:inline} $sub.i256(i1: i256, i2: i256) returns (i256) { (i1 - i2) }
function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) returns (bv256);
function {:inline} $mul.i1(i1: i1, i2: i1) returns (i1) { (i1 * i2) }
function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:inline} $mul.i5(i1: i5, i2: i5) returns (i5) { (i1 * i2) }
function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) returns (bv5);
function {:inline} $mul.i6(i1: i6, i2: i6) returns (i6) { (i1 * i2) }
function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) returns (bv6);
function {:inline} $mul.i8(i1: i8, i2: i8) returns (i8) { (i1 * i2) }
function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:inline} $mul.i16(i1: i16, i2: i16) returns (i16) { (i1 * i2) }
function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:inline} $mul.i24(i1: i24, i2: i24) returns (i24) { (i1 * i2) }
function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:inline} $mul.i32(i1: i32, i2: i32) returns (i32) { (i1 * i2) }
function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:inline} $mul.i33(i1: i33, i2: i33) returns (i33) { (i1 * i2) }
function {:bvbuiltin "bvmul"} $mul.bv33(i1: bv33, i2: bv33) returns (bv33);
function {:inline} $mul.i40(i1: i40, i2: i40) returns (i40) { (i1 * i2) }
function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:inline} $mul.i48(i1: i48, i2: i48) returns (i48) { (i1 * i2) }
function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:inline} $mul.i56(i1: i56, i2: i56) returns (i56) { (i1 * i2) }
function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:inline} $mul.i64(i1: i64, i2: i64) returns (i64) { (i1 * i2) }
function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:inline} $mul.i80(i1: i80, i2: i80) returns (i80) { (i1 * i2) }
function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) returns (bv80);
function {:inline} $mul.i88(i1: i88, i2: i88) returns (i88) { (i1 * i2) }
function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:inline} $mul.i96(i1: i96, i2: i96) returns (i96) { (i1 * i2) }
function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:inline} $mul.i128(i1: i128, i2: i128) returns (i128) { (i1 * i2) }
function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:inline} $mul.i160(i1: i160, i2: i160) returns (i160) { (i1 * i2) }
function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) returns (bv160);
function {:inline} $mul.i256(i1: i256, i2: i256) returns (i256) { (i1 * i2) }
function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) returns (bv256);
function {:bvbuiltin "bvidiv"} $idiv.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvidiv"} $idiv.bv5(i1: bv5, i2: bv5) returns (bv5);
function {:bvbuiltin "bvidiv"} $idiv.bv6(i1: bv6, i2: bv6) returns (bv6);
function {:bvbuiltin "bvidiv"} $idiv.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvidiv"} $idiv.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvidiv"} $idiv.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvidiv"} $idiv.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvidiv"} $idiv.bv33(i1: bv33, i2: bv33) returns (bv33);
function {:bvbuiltin "bvidiv"} $idiv.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvidiv"} $idiv.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvidiv"} $idiv.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvidiv"} $idiv.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvidiv"} $idiv.bv80(i1: bv80, i2: bv80) returns (bv80);
function {:bvbuiltin "bvidiv"} $idiv.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvidiv"} $idiv.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvidiv"} $idiv.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvidiv"} $idiv.bv160(i1: bv160, i2: bv160) returns (bv160);
function {:bvbuiltin "bvidiv"} $idiv.bv256(i1: bv256, i2: bv256) returns (bv256);
function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) returns (bv5);
function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) returns (bv6);
function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvsdiv"} $sdiv.bv33(i1: bv33, i2: bv33) returns (bv33);
function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) returns (bv80);
function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) returns (bv160);
function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) returns (bv256);
function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) returns (bv5);
function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) returns (bv6);
function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvudiv"} $udiv.bv33(i1: bv33, i2: bv33) returns (bv33);
function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) returns (bv80);
function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) returns (bv160);
function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) returns (bv256);
function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) returns (bv5);
function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) returns (bv6);
function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvsmod"} $smod.bv33(i1: bv33, i2: bv33) returns (bv33);
function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) returns (bv80);
function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) returns (bv160);
function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) returns (bv256);
function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) returns (bv5);
function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) returns (bv6);
function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvsrem"} $srem.bv33(i1: bv33, i2: bv33) returns (bv33);
function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) returns (bv80);
function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) returns (bv160);
function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) returns (bv256);
function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) returns (bv5);
function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) returns (bv6);
function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvurem"} $urem.bv33(i1: bv33, i2: bv33) returns (bv33);
function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) returns (bv80);
function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) returns (bv160);
function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) returns (bv256);
function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) returns (bv5);
function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) returns (bv6);
function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvshl"} $shl.bv33(i1: bv33, i2: bv33) returns (bv33);
function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) returns (bv80);
function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) returns (bv160);
function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) returns (bv256);
function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) returns (bv5);
function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) returns (bv6);
function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvlshr"} $lshr.bv33(i1: bv33, i2: bv33) returns (bv33);
function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) returns (bv80);
function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) returns (bv160);
function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) returns (bv256);
function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) returns (bv5);
function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) returns (bv6);
function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvashr"} $ashr.bv33(i1: bv33, i2: bv33) returns (bv33);
function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) returns (bv80);
function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) returns (bv160);
function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) returns (bv256);
function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) returns (bv5);
function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) returns (bv6);
function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvand"} $and.bv33(i1: bv33, i2: bv33) returns (bv33);
function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) returns (bv80);
function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) returns (bv160);
function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) returns (bv256);
function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) returns (bv5);
function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) returns (bv6);
function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvor"} $or.bv33(i1: bv33, i2: bv33) returns (bv33);
function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) returns (bv80);
function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) returns (bv160);
function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) returns (bv256);
function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) returns (bv5);
function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) returns (bv6);
function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvxor"} $xor.bv33(i1: bv33, i2: bv33) returns (bv33);
function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) returns (bv80);
function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) returns (bv160);
function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) returns (bv256);
function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) returns (bv5);
function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) returns (bv6);
function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvnand"} $nand.bv33(i1: bv33, i2: bv33) returns (bv33);
function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) returns (bv80);
function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) returns (bv160);
function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) returns (bv256);
function {:bvbuiltin "bvnot"} $not.bv1(i: bv1) returns (bv1);
function {:bvbuiltin "bvnot"} $not.bv5(i: bv5) returns (bv5);
function {:bvbuiltin "bvnot"} $not.bv6(i: bv6) returns (bv6);
function {:bvbuiltin "bvnot"} $not.bv8(i: bv8) returns (bv8);
function {:bvbuiltin "bvnot"} $not.bv16(i: bv16) returns (bv16);
function {:bvbuiltin "bvnot"} $not.bv24(i: bv24) returns (bv24);
function {:bvbuiltin "bvnot"} $not.bv32(i: bv32) returns (bv32);
function {:bvbuiltin "bvnot"} $not.bv33(i: bv33) returns (bv33);
function {:bvbuiltin "bvnot"} $not.bv40(i: bv40) returns (bv40);
function {:bvbuiltin "bvnot"} $not.bv48(i: bv48) returns (bv48);
function {:bvbuiltin "bvnot"} $not.bv56(i: bv56) returns (bv56);
function {:bvbuiltin "bvnot"} $not.bv64(i: bv64) returns (bv64);
function {:bvbuiltin "bvnot"} $not.bv80(i: bv80) returns (bv80);
function {:bvbuiltin "bvnot"} $not.bv88(i: bv88) returns (bv88);
function {:bvbuiltin "bvnot"} $not.bv96(i: bv96) returns (bv96);
function {:bvbuiltin "bvnot"} $not.bv128(i: bv128) returns (bv128);
function {:bvbuiltin "bvnot"} $not.bv160(i: bv160) returns (bv160);
function {:bvbuiltin "bvnot"} $not.bv256(i: bv256) returns (bv256);
function {:inline} $smin.bv1(i1: bv1, i2: bv1) returns (bv1) { (if $slt.bv1.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.bv5(i1: bv5, i2: bv5) returns (bv5) { (if $slt.bv5.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.bv6(i1: bv6, i2: bv6) returns (bv6) { (if $slt.bv6.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.bv8(i1: bv8, i2: bv8) returns (bv8) { (if $slt.bv8.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.bv16(i1: bv16, i2: bv16) returns (bv16) { (if $slt.bv16.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.bv24(i1: bv24, i2: bv24) returns (bv24) { (if $slt.bv24.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.bv32(i1: bv32, i2: bv32) returns (bv32) { (if $slt.bv32.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.bv33(i1: bv33, i2: bv33) returns (bv33) { (if $slt.bv33.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.bv40(i1: bv40, i2: bv40) returns (bv40) { (if $slt.bv40.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.bv48(i1: bv48, i2: bv48) returns (bv48) { (if $slt.bv48.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.bv56(i1: bv56, i2: bv56) returns (bv56) { (if $slt.bv56.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.bv64(i1: bv64, i2: bv64) returns (bv64) { (if $slt.bv64.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.bv80(i1: bv80, i2: bv80) returns (bv80) { (if $slt.bv80.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.bv88(i1: bv88, i2: bv88) returns (bv88) { (if $slt.bv88.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.bv96(i1: bv96, i2: bv96) returns (bv96) { (if $slt.bv96.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.bv128(i1: bv128, i2: bv128) returns (bv128) { (if $slt.bv128.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.bv160(i1: bv160, i2: bv160) returns (bv160) { (if $slt.bv160.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.bv256(i1: bv256, i2: bv256) returns (bv256) { (if $slt.bv256.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.bv1(i1: bv1, i2: bv1) returns (bv1) { (if $sgt.bv1.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.bv5(i1: bv5, i2: bv5) returns (bv5) { (if $sgt.bv5.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.bv6(i1: bv6, i2: bv6) returns (bv6) { (if $sgt.bv6.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.bv8(i1: bv8, i2: bv8) returns (bv8) { (if $sgt.bv8.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.bv16(i1: bv16, i2: bv16) returns (bv16) { (if $sgt.bv16.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.bv24(i1: bv24, i2: bv24) returns (bv24) { (if $sgt.bv24.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.bv32(i1: bv32, i2: bv32) returns (bv32) { (if $sgt.bv32.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.bv33(i1: bv33, i2: bv33) returns (bv33) { (if $sgt.bv33.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.bv40(i1: bv40, i2: bv40) returns (bv40) { (if $sgt.bv40.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.bv48(i1: bv48, i2: bv48) returns (bv48) { (if $sgt.bv48.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.bv56(i1: bv56, i2: bv56) returns (bv56) { (if $sgt.bv56.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.bv64(i1: bv64, i2: bv64) returns (bv64) { (if $sgt.bv64.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.bv80(i1: bv80, i2: bv80) returns (bv80) { (if $sgt.bv80.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.bv88(i1: bv88, i2: bv88) returns (bv88) { (if $sgt.bv88.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.bv96(i1: bv96, i2: bv96) returns (bv96) { (if $sgt.bv96.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.bv128(i1: bv128, i2: bv128) returns (bv128) { (if $sgt.bv128.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.bv160(i1: bv160, i2: bv160) returns (bv160) { (if $sgt.bv160.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.bv256(i1: bv256, i2: bv256) returns (bv256) { (if $sgt.bv256.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.bv1(i1: bv1, i2: bv1) returns (bv1) { (if $ult.bv1.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.bv5(i1: bv5, i2: bv5) returns (bv5) { (if $ult.bv5.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.bv6(i1: bv6, i2: bv6) returns (bv6) { (if $ult.bv6.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.bv8(i1: bv8, i2: bv8) returns (bv8) { (if $ult.bv8.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.bv16(i1: bv16, i2: bv16) returns (bv16) { (if $ult.bv16.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.bv24(i1: bv24, i2: bv24) returns (bv24) { (if $ult.bv24.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.bv32(i1: bv32, i2: bv32) returns (bv32) { (if $ult.bv32.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.bv33(i1: bv33, i2: bv33) returns (bv33) { (if $ult.bv33.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.bv40(i1: bv40, i2: bv40) returns (bv40) { (if $ult.bv40.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.bv48(i1: bv48, i2: bv48) returns (bv48) { (if $ult.bv48.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.bv56(i1: bv56, i2: bv56) returns (bv56) { (if $ult.bv56.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.bv64(i1: bv64, i2: bv64) returns (bv64) { (if $ult.bv64.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.bv80(i1: bv80, i2: bv80) returns (bv80) { (if $ult.bv80.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.bv88(i1: bv88, i2: bv88) returns (bv88) { (if $ult.bv88.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.bv96(i1: bv96, i2: bv96) returns (bv96) { (if $ult.bv96.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.bv128(i1: bv128, i2: bv128) returns (bv128) { (if $ult.bv128.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.bv160(i1: bv160, i2: bv160) returns (bv160) { (if $ult.bv160.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.bv256(i1: bv256, i2: bv256) returns (bv256) { (if $ult.bv256.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.bv1(i1: bv1, i2: bv1) returns (bv1) { (if $ugt.bv1.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.bv5(i1: bv5, i2: bv5) returns (bv5) { (if $ugt.bv5.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.bv6(i1: bv6, i2: bv6) returns (bv6) { (if $ugt.bv6.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.bv8(i1: bv8, i2: bv8) returns (bv8) { (if $ugt.bv8.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.bv16(i1: bv16, i2: bv16) returns (bv16) { (if $ugt.bv16.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.bv24(i1: bv24, i2: bv24) returns (bv24) { (if $ugt.bv24.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.bv32(i1: bv32, i2: bv32) returns (bv32) { (if $ugt.bv32.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.bv33(i1: bv33, i2: bv33) returns (bv33) { (if $ugt.bv33.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.bv40(i1: bv40, i2: bv40) returns (bv40) { (if $ugt.bv40.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.bv48(i1: bv48, i2: bv48) returns (bv48) { (if $ugt.bv48.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.bv56(i1: bv56, i2: bv56) returns (bv56) { (if $ugt.bv56.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.bv64(i1: bv64, i2: bv64) returns (bv64) { (if $ugt.bv64.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.bv80(i1: bv80, i2: bv80) returns (bv80) { (if $ugt.bv80.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.bv88(i1: bv88, i2: bv88) returns (bv88) { (if $ugt.bv88.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.bv96(i1: bv96, i2: bv96) returns (bv96) { (if $ugt.bv96.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.bv128(i1: bv128, i2: bv128) returns (bv128) { (if $ugt.bv128.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.bv160(i1: bv160, i2: bv160) returns (bv160) { (if $ugt.bv160.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.bv256(i1: bv256, i2: bv256) returns (bv256) { (if $ugt.bv256.bool(i1, i2) then i1 else i2) }
// Integer predicates
function {:inline} $ule.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i1(i1: i1, i2: i1) returns (i1) { (if $ule.i1.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) returns (bool);
function {:inline} $ule.bv1(i1: bv1, i2: bv1) returns (bv1) { (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ule.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i5(i1: i5, i2: i5) returns (i1) { (if $ule.i5.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) returns (bool);
function {:inline} $ule.bv5(i1: bv5, i2: bv5) returns (bv1) { (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ule.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i6(i1: i6, i2: i6) returns (i1) { (if $ule.i6.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) returns (bool);
function {:inline} $ule.bv6(i1: bv6, i2: bv6) returns (bv1) { (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ule.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i8(i1: i8, i2: i8) returns (i1) { (if $ule.i8.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) returns (bool);
function {:inline} $ule.bv8(i1: bv8, i2: bv8) returns (bv1) { (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ule.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i16(i1: i16, i2: i16) returns (i1) { (if $ule.i16.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) returns (bool);
function {:inline} $ule.bv16(i1: bv16, i2: bv16) returns (bv1) { (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ule.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i24(i1: i24, i2: i24) returns (i1) { (if $ule.i24.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) returns (bool);
function {:inline} $ule.bv24(i1: bv24, i2: bv24) returns (bv1) { (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ule.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i32(i1: i32, i2: i32) returns (i1) { (if $ule.i32.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) returns (bool);
function {:inline} $ule.bv32(i1: bv32, i2: bv32) returns (bv1) { (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ule.i33.bool(i1: i33, i2: i33) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i33(i1: i33, i2: i33) returns (i1) { (if $ule.i33.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvule"} $ule.bv33.bool(i1: bv33, i2: bv33) returns (bool);
function {:inline} $ule.bv33(i1: bv33, i2: bv33) returns (bv1) { (if $ule.bv33.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ule.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i40(i1: i40, i2: i40) returns (i1) { (if $ule.i40.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) returns (bool);
function {:inline} $ule.bv40(i1: bv40, i2: bv40) returns (bv1) { (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ule.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i48(i1: i48, i2: i48) returns (i1) { (if $ule.i48.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) returns (bool);
function {:inline} $ule.bv48(i1: bv48, i2: bv48) returns (bv1) { (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ule.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i56(i1: i56, i2: i56) returns (i1) { (if $ule.i56.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) returns (bool);
function {:inline} $ule.bv56(i1: bv56, i2: bv56) returns (bv1) { (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ule.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i64(i1: i64, i2: i64) returns (i1) { (if $ule.i64.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) returns (bool);
function {:inline} $ule.bv64(i1: bv64, i2: bv64) returns (bv1) { (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ule.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i80(i1: i80, i2: i80) returns (i1) { (if $ule.i80.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) returns (bool);
function {:inline} $ule.bv80(i1: bv80, i2: bv80) returns (bv1) { (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ule.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i88(i1: i88, i2: i88) returns (i1) { (if $ule.i88.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) returns (bool);
function {:inline} $ule.bv88(i1: bv88, i2: bv88) returns (bv1) { (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ule.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i96(i1: i96, i2: i96) returns (i1) { (if $ule.i96.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) returns (bool);
function {:inline} $ule.bv96(i1: bv96, i2: bv96) returns (bv1) { (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ule.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i128(i1: i128, i2: i128) returns (i1) { (if $ule.i128.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) returns (bool);
function {:inline} $ule.bv128(i1: bv128, i2: bv128) returns (bv1) { (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ule.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i160(i1: i160, i2: i160) returns (i1) { (if $ule.i160.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) returns (bool);
function {:inline} $ule.bv160(i1: bv160, i2: bv160) returns (bv1) { (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ule.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i256(i1: i256, i2: i256) returns (i1) { (if $ule.i256.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) returns (bool);
function {:inline} $ule.bv256(i1: bv256, i2: bv256) returns (bv1) { (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ult.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 < i2) }
function {:inline} $ult.i1(i1: i1, i2: i1) returns (i1) { (if $ult.i1.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) returns (bool);
function {:inline} $ult.bv1(i1: bv1, i2: bv1) returns (bv1) { (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ult.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 < i2) }
function {:inline} $ult.i5(i1: i5, i2: i5) returns (i1) { (if $ult.i5.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) returns (bool);
function {:inline} $ult.bv5(i1: bv5, i2: bv5) returns (bv1) { (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ult.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 < i2) }
function {:inline} $ult.i6(i1: i6, i2: i6) returns (i1) { (if $ult.i6.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) returns (bool);
function {:inline} $ult.bv6(i1: bv6, i2: bv6) returns (bv1) { (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ult.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 < i2) }
function {:inline} $ult.i8(i1: i8, i2: i8) returns (i1) { (if $ult.i8.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) returns (bool);
function {:inline} $ult.bv8(i1: bv8, i2: bv8) returns (bv1) { (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ult.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 < i2) }
function {:inline} $ult.i16(i1: i16, i2: i16) returns (i1) { (if $ult.i16.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) returns (bool);
function {:inline} $ult.bv16(i1: bv16, i2: bv16) returns (bv1) { (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ult.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 < i2) }
function {:inline} $ult.i24(i1: i24, i2: i24) returns (i1) { (if $ult.i24.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) returns (bool);
function {:inline} $ult.bv24(i1: bv24, i2: bv24) returns (bv1) { (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ult.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 < i2) }
function {:inline} $ult.i32(i1: i32, i2: i32) returns (i1) { (if $ult.i32.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) returns (bool);
function {:inline} $ult.bv32(i1: bv32, i2: bv32) returns (bv1) { (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ult.i33.bool(i1: i33, i2: i33) returns (bool) { (i1 < i2) }
function {:inline} $ult.i33(i1: i33, i2: i33) returns (i1) { (if $ult.i33.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvult"} $ult.bv33.bool(i1: bv33, i2: bv33) returns (bool);
function {:inline} $ult.bv33(i1: bv33, i2: bv33) returns (bv1) { (if $ult.bv33.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ult.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 < i2) }
function {:inline} $ult.i40(i1: i40, i2: i40) returns (i1) { (if $ult.i40.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) returns (bool);
function {:inline} $ult.bv40(i1: bv40, i2: bv40) returns (bv1) { (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ult.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 < i2) }
function {:inline} $ult.i48(i1: i48, i2: i48) returns (i1) { (if $ult.i48.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) returns (bool);
function {:inline} $ult.bv48(i1: bv48, i2: bv48) returns (bv1) { (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ult.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 < i2) }
function {:inline} $ult.i56(i1: i56, i2: i56) returns (i1) { (if $ult.i56.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) returns (bool);
function {:inline} $ult.bv56(i1: bv56, i2: bv56) returns (bv1) { (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ult.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 < i2) }
function {:inline} $ult.i64(i1: i64, i2: i64) returns (i1) { (if $ult.i64.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) returns (bool);
function {:inline} $ult.bv64(i1: bv64, i2: bv64) returns (bv1) { (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ult.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 < i2) }
function {:inline} $ult.i80(i1: i80, i2: i80) returns (i1) { (if $ult.i80.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) returns (bool);
function {:inline} $ult.bv80(i1: bv80, i2: bv80) returns (bv1) { (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ult.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 < i2) }
function {:inline} $ult.i88(i1: i88, i2: i88) returns (i1) { (if $ult.i88.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) returns (bool);
function {:inline} $ult.bv88(i1: bv88, i2: bv88) returns (bv1) { (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ult.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 < i2) }
function {:inline} $ult.i96(i1: i96, i2: i96) returns (i1) { (if $ult.i96.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) returns (bool);
function {:inline} $ult.bv96(i1: bv96, i2: bv96) returns (bv1) { (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ult.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 < i2) }
function {:inline} $ult.i128(i1: i128, i2: i128) returns (i1) { (if $ult.i128.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) returns (bool);
function {:inline} $ult.bv128(i1: bv128, i2: bv128) returns (bv1) { (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ult.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 < i2) }
function {:inline} $ult.i160(i1: i160, i2: i160) returns (i1) { (if $ult.i160.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) returns (bool);
function {:inline} $ult.bv160(i1: bv160, i2: bv160) returns (bv1) { (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ult.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 < i2) }
function {:inline} $ult.i256(i1: i256, i2: i256) returns (i1) { (if $ult.i256.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) returns (bool);
function {:inline} $ult.bv256(i1: bv256, i2: bv256) returns (bv1) { (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $uge.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i1(i1: i1, i2: i1) returns (i1) { (if $uge.i1.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) returns (bool);
function {:inline} $uge.bv1(i1: bv1, i2: bv1) returns (bv1) { (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $uge.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i5(i1: i5, i2: i5) returns (i1) { (if $uge.i5.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) returns (bool);
function {:inline} $uge.bv5(i1: bv5, i2: bv5) returns (bv1) { (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $uge.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i6(i1: i6, i2: i6) returns (i1) { (if $uge.i6.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) returns (bool);
function {:inline} $uge.bv6(i1: bv6, i2: bv6) returns (bv1) { (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $uge.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i8(i1: i8, i2: i8) returns (i1) { (if $uge.i8.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) returns (bool);
function {:inline} $uge.bv8(i1: bv8, i2: bv8) returns (bv1) { (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $uge.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i16(i1: i16, i2: i16) returns (i1) { (if $uge.i16.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) returns (bool);
function {:inline} $uge.bv16(i1: bv16, i2: bv16) returns (bv1) { (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $uge.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i24(i1: i24, i2: i24) returns (i1) { (if $uge.i24.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) returns (bool);
function {:inline} $uge.bv24(i1: bv24, i2: bv24) returns (bv1) { (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $uge.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i32(i1: i32, i2: i32) returns (i1) { (if $uge.i32.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) returns (bool);
function {:inline} $uge.bv32(i1: bv32, i2: bv32) returns (bv1) { (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $uge.i33.bool(i1: i33, i2: i33) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i33(i1: i33, i2: i33) returns (i1) { (if $uge.i33.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvuge"} $uge.bv33.bool(i1: bv33, i2: bv33) returns (bool);
function {:inline} $uge.bv33(i1: bv33, i2: bv33) returns (bv1) { (if $uge.bv33.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $uge.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i40(i1: i40, i2: i40) returns (i1) { (if $uge.i40.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) returns (bool);
function {:inline} $uge.bv40(i1: bv40, i2: bv40) returns (bv1) { (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $uge.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i48(i1: i48, i2: i48) returns (i1) { (if $uge.i48.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) returns (bool);
function {:inline} $uge.bv48(i1: bv48, i2: bv48) returns (bv1) { (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $uge.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i56(i1: i56, i2: i56) returns (i1) { (if $uge.i56.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) returns (bool);
function {:inline} $uge.bv56(i1: bv56, i2: bv56) returns (bv1) { (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $uge.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i64(i1: i64, i2: i64) returns (i1) { (if $uge.i64.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) returns (bool);
function {:inline} $uge.bv64(i1: bv64, i2: bv64) returns (bv1) { (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $uge.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i80(i1: i80, i2: i80) returns (i1) { (if $uge.i80.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) returns (bool);
function {:inline} $uge.bv80(i1: bv80, i2: bv80) returns (bv1) { (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $uge.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i88(i1: i88, i2: i88) returns (i1) { (if $uge.i88.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) returns (bool);
function {:inline} $uge.bv88(i1: bv88, i2: bv88) returns (bv1) { (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $uge.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i96(i1: i96, i2: i96) returns (i1) { (if $uge.i96.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) returns (bool);
function {:inline} $uge.bv96(i1: bv96, i2: bv96) returns (bv1) { (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $uge.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i128(i1: i128, i2: i128) returns (i1) { (if $uge.i128.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) returns (bool);
function {:inline} $uge.bv128(i1: bv128, i2: bv128) returns (bv1) { (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $uge.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i160(i1: i160, i2: i160) returns (i1) { (if $uge.i160.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) returns (bool);
function {:inline} $uge.bv160(i1: bv160, i2: bv160) returns (bv1) { (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $uge.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i256(i1: i256, i2: i256) returns (i1) { (if $uge.i256.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) returns (bool);
function {:inline} $uge.bv256(i1: bv256, i2: bv256) returns (bv1) { (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ugt.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i1(i1: i1, i2: i1) returns (i1) { (if $ugt.i1.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) returns (bool);
function {:inline} $ugt.bv1(i1: bv1, i2: bv1) returns (bv1) { (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ugt.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i5(i1: i5, i2: i5) returns (i1) { (if $ugt.i5.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) returns (bool);
function {:inline} $ugt.bv5(i1: bv5, i2: bv5) returns (bv1) { (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ugt.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i6(i1: i6, i2: i6) returns (i1) { (if $ugt.i6.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) returns (bool);
function {:inline} $ugt.bv6(i1: bv6, i2: bv6) returns (bv1) { (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ugt.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i8(i1: i8, i2: i8) returns (i1) { (if $ugt.i8.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) returns (bool);
function {:inline} $ugt.bv8(i1: bv8, i2: bv8) returns (bv1) { (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ugt.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i16(i1: i16, i2: i16) returns (i1) { (if $ugt.i16.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) returns (bool);
function {:inline} $ugt.bv16(i1: bv16, i2: bv16) returns (bv1) { (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ugt.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i24(i1: i24, i2: i24) returns (i1) { (if $ugt.i24.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) returns (bool);
function {:inline} $ugt.bv24(i1: bv24, i2: bv24) returns (bv1) { (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ugt.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i32(i1: i32, i2: i32) returns (i1) { (if $ugt.i32.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) returns (bool);
function {:inline} $ugt.bv32(i1: bv32, i2: bv32) returns (bv1) { (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ugt.i33.bool(i1: i33, i2: i33) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i33(i1: i33, i2: i33) returns (i1) { (if $ugt.i33.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvugt"} $ugt.bv33.bool(i1: bv33, i2: bv33) returns (bool);
function {:inline} $ugt.bv33(i1: bv33, i2: bv33) returns (bv1) { (if $ugt.bv33.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ugt.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i40(i1: i40, i2: i40) returns (i1) { (if $ugt.i40.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) returns (bool);
function {:inline} $ugt.bv40(i1: bv40, i2: bv40) returns (bv1) { (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ugt.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i48(i1: i48, i2: i48) returns (i1) { (if $ugt.i48.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) returns (bool);
function {:inline} $ugt.bv48(i1: bv48, i2: bv48) returns (bv1) { (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ugt.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i56(i1: i56, i2: i56) returns (i1) { (if $ugt.i56.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) returns (bool);
function {:inline} $ugt.bv56(i1: bv56, i2: bv56) returns (bv1) { (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ugt.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i64(i1: i64, i2: i64) returns (i1) { (if $ugt.i64.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) returns (bool);
function {:inline} $ugt.bv64(i1: bv64, i2: bv64) returns (bv1) { (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ugt.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i80(i1: i80, i2: i80) returns (i1) { (if $ugt.i80.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) returns (bool);
function {:inline} $ugt.bv80(i1: bv80, i2: bv80) returns (bv1) { (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ugt.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i88(i1: i88, i2: i88) returns (i1) { (if $ugt.i88.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) returns (bool);
function {:inline} $ugt.bv88(i1: bv88, i2: bv88) returns (bv1) { (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ugt.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i96(i1: i96, i2: i96) returns (i1) { (if $ugt.i96.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) returns (bool);
function {:inline} $ugt.bv96(i1: bv96, i2: bv96) returns (bv1) { (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ugt.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i128(i1: i128, i2: i128) returns (i1) { (if $ugt.i128.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) returns (bool);
function {:inline} $ugt.bv128(i1: bv128, i2: bv128) returns (bv1) { (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ugt.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i160(i1: i160, i2: i160) returns (i1) { (if $ugt.i160.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) returns (bool);
function {:inline} $ugt.bv160(i1: bv160, i2: bv160) returns (bv1) { (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ugt.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i256(i1: i256, i2: i256) returns (i1) { (if $ugt.i256.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) returns (bool);
function {:inline} $ugt.bv256(i1: bv256, i2: bv256) returns (bv1) { (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sle.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i1(i1: i1, i2: i1) returns (i1) { (if $sle.i1.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) returns (bool);
function {:inline} $sle.bv1(i1: bv1, i2: bv1) returns (bv1) { (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sle.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i5(i1: i5, i2: i5) returns (i1) { (if $sle.i5.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) returns (bool);
function {:inline} $sle.bv5(i1: bv5, i2: bv5) returns (bv1) { (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sle.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i6(i1: i6, i2: i6) returns (i1) { (if $sle.i6.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) returns (bool);
function {:inline} $sle.bv6(i1: bv6, i2: bv6) returns (bv1) { (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sle.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i8(i1: i8, i2: i8) returns (i1) { (if $sle.i8.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) returns (bool);
function {:inline} $sle.bv8(i1: bv8, i2: bv8) returns (bv1) { (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sle.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i16(i1: i16, i2: i16) returns (i1) { (if $sle.i16.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) returns (bool);
function {:inline} $sle.bv16(i1: bv16, i2: bv16) returns (bv1) { (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sle.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i24(i1: i24, i2: i24) returns (i1) { (if $sle.i24.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) returns (bool);
function {:inline} $sle.bv24(i1: bv24, i2: bv24) returns (bv1) { (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sle.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i32(i1: i32, i2: i32) returns (i1) { (if $sle.i32.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) returns (bool);
function {:inline} $sle.bv32(i1: bv32, i2: bv32) returns (bv1) { (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sle.i33.bool(i1: i33, i2: i33) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i33(i1: i33, i2: i33) returns (i1) { (if $sle.i33.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsle"} $sle.bv33.bool(i1: bv33, i2: bv33) returns (bool);
function {:inline} $sle.bv33(i1: bv33, i2: bv33) returns (bv1) { (if $sle.bv33.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sle.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i40(i1: i40, i2: i40) returns (i1) { (if $sle.i40.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) returns (bool);
function {:inline} $sle.bv40(i1: bv40, i2: bv40) returns (bv1) { (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sle.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i48(i1: i48, i2: i48) returns (i1) { (if $sle.i48.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) returns (bool);
function {:inline} $sle.bv48(i1: bv48, i2: bv48) returns (bv1) { (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sle.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i56(i1: i56, i2: i56) returns (i1) { (if $sle.i56.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) returns (bool);
function {:inline} $sle.bv56(i1: bv56, i2: bv56) returns (bv1) { (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sle.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i64(i1: i64, i2: i64) returns (i1) { (if $sle.i64.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) returns (bool);
function {:inline} $sle.bv64(i1: bv64, i2: bv64) returns (bv1) { (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sle.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i80(i1: i80, i2: i80) returns (i1) { (if $sle.i80.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) returns (bool);
function {:inline} $sle.bv80(i1: bv80, i2: bv80) returns (bv1) { (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sle.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i88(i1: i88, i2: i88) returns (i1) { (if $sle.i88.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) returns (bool);
function {:inline} $sle.bv88(i1: bv88, i2: bv88) returns (bv1) { (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sle.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i96(i1: i96, i2: i96) returns (i1) { (if $sle.i96.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) returns (bool);
function {:inline} $sle.bv96(i1: bv96, i2: bv96) returns (bv1) { (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sle.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i128(i1: i128, i2: i128) returns (i1) { (if $sle.i128.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) returns (bool);
function {:inline} $sle.bv128(i1: bv128, i2: bv128) returns (bv1) { (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sle.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i160(i1: i160, i2: i160) returns (i1) { (if $sle.i160.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) returns (bool);
function {:inline} $sle.bv160(i1: bv160, i2: bv160) returns (bv1) { (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sle.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i256(i1: i256, i2: i256) returns (i1) { (if $sle.i256.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) returns (bool);
function {:inline} $sle.bv256(i1: bv256, i2: bv256) returns (bv1) { (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $slt.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 < i2) }
function {:inline} $slt.i1(i1: i1, i2: i1) returns (i1) { (if $slt.i1.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) returns (bool);
function {:inline} $slt.bv1(i1: bv1, i2: bv1) returns (bv1) { (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $slt.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 < i2) }
function {:inline} $slt.i5(i1: i5, i2: i5) returns (i1) { (if $slt.i5.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) returns (bool);
function {:inline} $slt.bv5(i1: bv5, i2: bv5) returns (bv1) { (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $slt.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 < i2) }
function {:inline} $slt.i6(i1: i6, i2: i6) returns (i1) { (if $slt.i6.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) returns (bool);
function {:inline} $slt.bv6(i1: bv6, i2: bv6) returns (bv1) { (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $slt.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 < i2) }
function {:inline} $slt.i8(i1: i8, i2: i8) returns (i1) { (if $slt.i8.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) returns (bool);
function {:inline} $slt.bv8(i1: bv8, i2: bv8) returns (bv1) { (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $slt.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 < i2) }
function {:inline} $slt.i16(i1: i16, i2: i16) returns (i1) { (if $slt.i16.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) returns (bool);
function {:inline} $slt.bv16(i1: bv16, i2: bv16) returns (bv1) { (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $slt.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 < i2) }
function {:inline} $slt.i24(i1: i24, i2: i24) returns (i1) { (if $slt.i24.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) returns (bool);
function {:inline} $slt.bv24(i1: bv24, i2: bv24) returns (bv1) { (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $slt.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 < i2) }
function {:inline} $slt.i32(i1: i32, i2: i32) returns (i1) { (if $slt.i32.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) returns (bool);
function {:inline} $slt.bv32(i1: bv32, i2: bv32) returns (bv1) { (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $slt.i33.bool(i1: i33, i2: i33) returns (bool) { (i1 < i2) }
function {:inline} $slt.i33(i1: i33, i2: i33) returns (i1) { (if $slt.i33.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvslt"} $slt.bv33.bool(i1: bv33, i2: bv33) returns (bool);
function {:inline} $slt.bv33(i1: bv33, i2: bv33) returns (bv1) { (if $slt.bv33.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $slt.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 < i2) }
function {:inline} $slt.i40(i1: i40, i2: i40) returns (i1) { (if $slt.i40.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) returns (bool);
function {:inline} $slt.bv40(i1: bv40, i2: bv40) returns (bv1) { (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $slt.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 < i2) }
function {:inline} $slt.i48(i1: i48, i2: i48) returns (i1) { (if $slt.i48.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) returns (bool);
function {:inline} $slt.bv48(i1: bv48, i2: bv48) returns (bv1) { (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $slt.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 < i2) }
function {:inline} $slt.i56(i1: i56, i2: i56) returns (i1) { (if $slt.i56.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) returns (bool);
function {:inline} $slt.bv56(i1: bv56, i2: bv56) returns (bv1) { (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $slt.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 < i2) }
function {:inline} $slt.i64(i1: i64, i2: i64) returns (i1) { (if $slt.i64.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) returns (bool);
function {:inline} $slt.bv64(i1: bv64, i2: bv64) returns (bv1) { (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $slt.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 < i2) }
function {:inline} $slt.i80(i1: i80, i2: i80) returns (i1) { (if $slt.i80.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) returns (bool);
function {:inline} $slt.bv80(i1: bv80, i2: bv80) returns (bv1) { (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $slt.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 < i2) }
function {:inline} $slt.i88(i1: i88, i2: i88) returns (i1) { (if $slt.i88.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) returns (bool);
function {:inline} $slt.bv88(i1: bv88, i2: bv88) returns (bv1) { (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $slt.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 < i2) }
function {:inline} $slt.i96(i1: i96, i2: i96) returns (i1) { (if $slt.i96.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) returns (bool);
function {:inline} $slt.bv96(i1: bv96, i2: bv96) returns (bv1) { (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $slt.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 < i2) }
function {:inline} $slt.i128(i1: i128, i2: i128) returns (i1) { (if $slt.i128.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) returns (bool);
function {:inline} $slt.bv128(i1: bv128, i2: bv128) returns (bv1) { (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $slt.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 < i2) }
function {:inline} $slt.i160(i1: i160, i2: i160) returns (i1) { (if $slt.i160.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) returns (bool);
function {:inline} $slt.bv160(i1: bv160, i2: bv160) returns (bv1) { (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $slt.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 < i2) }
function {:inline} $slt.i256(i1: i256, i2: i256) returns (i1) { (if $slt.i256.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) returns (bool);
function {:inline} $slt.bv256(i1: bv256, i2: bv256) returns (bv1) { (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sge.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i1(i1: i1, i2: i1) returns (i1) { (if $sge.i1.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) returns (bool);
function {:inline} $sge.bv1(i1: bv1, i2: bv1) returns (bv1) { (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sge.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i5(i1: i5, i2: i5) returns (i1) { (if $sge.i5.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) returns (bool);
function {:inline} $sge.bv5(i1: bv5, i2: bv5) returns (bv1) { (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sge.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i6(i1: i6, i2: i6) returns (i1) { (if $sge.i6.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) returns (bool);
function {:inline} $sge.bv6(i1: bv6, i2: bv6) returns (bv1) { (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sge.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i8(i1: i8, i2: i8) returns (i1) { (if $sge.i8.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) returns (bool);
function {:inline} $sge.bv8(i1: bv8, i2: bv8) returns (bv1) { (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sge.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i16(i1: i16, i2: i16) returns (i1) { (if $sge.i16.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) returns (bool);
function {:inline} $sge.bv16(i1: bv16, i2: bv16) returns (bv1) { (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sge.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i24(i1: i24, i2: i24) returns (i1) { (if $sge.i24.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) returns (bool);
function {:inline} $sge.bv24(i1: bv24, i2: bv24) returns (bv1) { (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sge.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i32(i1: i32, i2: i32) returns (i1) { (if $sge.i32.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) returns (bool);
function {:inline} $sge.bv32(i1: bv32, i2: bv32) returns (bv1) { (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sge.i33.bool(i1: i33, i2: i33) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i33(i1: i33, i2: i33) returns (i1) { (if $sge.i33.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsge"} $sge.bv33.bool(i1: bv33, i2: bv33) returns (bool);
function {:inline} $sge.bv33(i1: bv33, i2: bv33) returns (bv1) { (if $sge.bv33.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sge.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i40(i1: i40, i2: i40) returns (i1) { (if $sge.i40.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) returns (bool);
function {:inline} $sge.bv40(i1: bv40, i2: bv40) returns (bv1) { (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sge.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i48(i1: i48, i2: i48) returns (i1) { (if $sge.i48.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) returns (bool);
function {:inline} $sge.bv48(i1: bv48, i2: bv48) returns (bv1) { (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sge.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i56(i1: i56, i2: i56) returns (i1) { (if $sge.i56.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) returns (bool);
function {:inline} $sge.bv56(i1: bv56, i2: bv56) returns (bv1) { (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sge.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i64(i1: i64, i2: i64) returns (i1) { (if $sge.i64.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) returns (bool);
function {:inline} $sge.bv64(i1: bv64, i2: bv64) returns (bv1) { (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sge.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i80(i1: i80, i2: i80) returns (i1) { (if $sge.i80.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) returns (bool);
function {:inline} $sge.bv80(i1: bv80, i2: bv80) returns (bv1) { (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sge.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i88(i1: i88, i2: i88) returns (i1) { (if $sge.i88.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) returns (bool);
function {:inline} $sge.bv88(i1: bv88, i2: bv88) returns (bv1) { (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sge.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i96(i1: i96, i2: i96) returns (i1) { (if $sge.i96.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) returns (bool);
function {:inline} $sge.bv96(i1: bv96, i2: bv96) returns (bv1) { (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sge.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i128(i1: i128, i2: i128) returns (i1) { (if $sge.i128.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) returns (bool);
function {:inline} $sge.bv128(i1: bv128, i2: bv128) returns (bv1) { (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sge.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i160(i1: i160, i2: i160) returns (i1) { (if $sge.i160.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) returns (bool);
function {:inline} $sge.bv160(i1: bv160, i2: bv160) returns (bv1) { (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sge.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i256(i1: i256, i2: i256) returns (i1) { (if $sge.i256.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) returns (bool);
function {:inline} $sge.bv256(i1: bv256, i2: bv256) returns (bv1) { (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sgt.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i1(i1: i1, i2: i1) returns (i1) { (if $sgt.i1.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) returns (bool);
function {:inline} $sgt.bv1(i1: bv1, i2: bv1) returns (bv1) { (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sgt.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i5(i1: i5, i2: i5) returns (i1) { (if $sgt.i5.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) returns (bool);
function {:inline} $sgt.bv5(i1: bv5, i2: bv5) returns (bv1) { (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sgt.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i6(i1: i6, i2: i6) returns (i1) { (if $sgt.i6.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) returns (bool);
function {:inline} $sgt.bv6(i1: bv6, i2: bv6) returns (bv1) { (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sgt.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i8(i1: i8, i2: i8) returns (i1) { (if $sgt.i8.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) returns (bool);
function {:inline} $sgt.bv8(i1: bv8, i2: bv8) returns (bv1) { (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sgt.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i16(i1: i16, i2: i16) returns (i1) { (if $sgt.i16.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) returns (bool);
function {:inline} $sgt.bv16(i1: bv16, i2: bv16) returns (bv1) { (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sgt.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i24(i1: i24, i2: i24) returns (i1) { (if $sgt.i24.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) returns (bool);
function {:inline} $sgt.bv24(i1: bv24, i2: bv24) returns (bv1) { (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sgt.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i32(i1: i32, i2: i32) returns (i1) { (if $sgt.i32.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) returns (bool);
function {:inline} $sgt.bv32(i1: bv32, i2: bv32) returns (bv1) { (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sgt.i33.bool(i1: i33, i2: i33) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i33(i1: i33, i2: i33) returns (i1) { (if $sgt.i33.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsgt"} $sgt.bv33.bool(i1: bv33, i2: bv33) returns (bool);
function {:inline} $sgt.bv33(i1: bv33, i2: bv33) returns (bv1) { (if $sgt.bv33.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sgt.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i40(i1: i40, i2: i40) returns (i1) { (if $sgt.i40.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) returns (bool);
function {:inline} $sgt.bv40(i1: bv40, i2: bv40) returns (bv1) { (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sgt.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i48(i1: i48, i2: i48) returns (i1) { (if $sgt.i48.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) returns (bool);
function {:inline} $sgt.bv48(i1: bv48, i2: bv48) returns (bv1) { (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sgt.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i56(i1: i56, i2: i56) returns (i1) { (if $sgt.i56.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) returns (bool);
function {:inline} $sgt.bv56(i1: bv56, i2: bv56) returns (bv1) { (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sgt.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i64(i1: i64, i2: i64) returns (i1) { (if $sgt.i64.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) returns (bool);
function {:inline} $sgt.bv64(i1: bv64, i2: bv64) returns (bv1) { (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sgt.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i80(i1: i80, i2: i80) returns (i1) { (if $sgt.i80.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) returns (bool);
function {:inline} $sgt.bv80(i1: bv80, i2: bv80) returns (bv1) { (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sgt.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i88(i1: i88, i2: i88) returns (i1) { (if $sgt.i88.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) returns (bool);
function {:inline} $sgt.bv88(i1: bv88, i2: bv88) returns (bv1) { (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sgt.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i96(i1: i96, i2: i96) returns (i1) { (if $sgt.i96.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) returns (bool);
function {:inline} $sgt.bv96(i1: bv96, i2: bv96) returns (bv1) { (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sgt.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i128(i1: i128, i2: i128) returns (i1) { (if $sgt.i128.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) returns (bool);
function {:inline} $sgt.bv128(i1: bv128, i2: bv128) returns (bv1) { (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sgt.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i160(i1: i160, i2: i160) returns (i1) { (if $sgt.i160.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) returns (bool);
function {:inline} $sgt.bv160(i1: bv160, i2: bv160) returns (bv1) { (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sgt.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i256(i1: i256, i2: i256) returns (i1) { (if $sgt.i256.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) returns (bool);
function {:inline} $sgt.bv256(i1: bv256, i2: bv256) returns (bv1) { (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $eq.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 == i2) }
function {:inline} $eq.i1(i1: i1, i2: i1) returns (i1) { (if $eq.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) returns (bool) { (i1 == i2) }
function {:inline} $eq.bv1(i1: bv1, i2: bv1) returns (bv1) { (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $eq.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 == i2) }
function {:inline} $eq.i5(i1: i5, i2: i5) returns (i1) { (if $eq.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) returns (bool) { (i1 == i2) }
function {:inline} $eq.bv5(i1: bv5, i2: bv5) returns (bv1) { (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $eq.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 == i2) }
function {:inline} $eq.i6(i1: i6, i2: i6) returns (i1) { (if $eq.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) returns (bool) { (i1 == i2) }
function {:inline} $eq.bv6(i1: bv6, i2: bv6) returns (bv1) { (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $eq.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 == i2) }
function {:inline} $eq.i8(i1: i8, i2: i8) returns (i1) { (if $eq.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) returns (bool) { (i1 == i2) }
function {:inline} $eq.bv8(i1: bv8, i2: bv8) returns (bv1) { (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $eq.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 == i2) }
function {:inline} $eq.i16(i1: i16, i2: i16) returns (i1) { (if $eq.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) returns (bool) { (i1 == i2) }
function {:inline} $eq.bv16(i1: bv16, i2: bv16) returns (bv1) { (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $eq.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 == i2) }
function {:inline} $eq.i24(i1: i24, i2: i24) returns (i1) { (if $eq.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) returns (bool) { (i1 == i2) }
function {:inline} $eq.bv24(i1: bv24, i2: bv24) returns (bv1) { (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $eq.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 == i2) }
function {:inline} $eq.i32(i1: i32, i2: i32) returns (i1) { (if $eq.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) returns (bool) { (i1 == i2) }
function {:inline} $eq.bv32(i1: bv32, i2: bv32) returns (bv1) { (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $eq.i33.bool(i1: i33, i2: i33) returns (bool) { (i1 == i2) }
function {:inline} $eq.i33(i1: i33, i2: i33) returns (i1) { (if $eq.i33.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.bv33.bool(i1: bv33, i2: bv33) returns (bool) { (i1 == i2) }
function {:inline} $eq.bv33(i1: bv33, i2: bv33) returns (bv1) { (if $eq.bv33.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $eq.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 == i2) }
function {:inline} $eq.i40(i1: i40, i2: i40) returns (i1) { (if $eq.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) returns (bool) { (i1 == i2) }
function {:inline} $eq.bv40(i1: bv40, i2: bv40) returns (bv1) { (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $eq.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 == i2) }
function {:inline} $eq.i48(i1: i48, i2: i48) returns (i1) { (if $eq.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) returns (bool) { (i1 == i2) }
function {:inline} $eq.bv48(i1: bv48, i2: bv48) returns (bv1) { (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $eq.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 == i2) }
function {:inline} $eq.i56(i1: i56, i2: i56) returns (i1) { (if $eq.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) returns (bool) { (i1 == i2) }
function {:inline} $eq.bv56(i1: bv56, i2: bv56) returns (bv1) { (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $eq.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 == i2) }
function {:inline} $eq.i64(i1: i64, i2: i64) returns (i1) { (if $eq.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) returns (bool) { (i1 == i2) }
function {:inline} $eq.bv64(i1: bv64, i2: bv64) returns (bv1) { (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $eq.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 == i2) }
function {:inline} $eq.i80(i1: i80, i2: i80) returns (i1) { (if $eq.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) returns (bool) { (i1 == i2) }
function {:inline} $eq.bv80(i1: bv80, i2: bv80) returns (bv1) { (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $eq.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 == i2) }
function {:inline} $eq.i88(i1: i88, i2: i88) returns (i1) { (if $eq.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) returns (bool) { (i1 == i2) }
function {:inline} $eq.bv88(i1: bv88, i2: bv88) returns (bv1) { (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $eq.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 == i2) }
function {:inline} $eq.i96(i1: i96, i2: i96) returns (i1) { (if $eq.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) returns (bool) { (i1 == i2) }
function {:inline} $eq.bv96(i1: bv96, i2: bv96) returns (bv1) { (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $eq.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 == i2) }
function {:inline} $eq.i128(i1: i128, i2: i128) returns (i1) { (if $eq.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) returns (bool) { (i1 == i2) }
function {:inline} $eq.bv128(i1: bv128, i2: bv128) returns (bv1) { (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $eq.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 == i2) }
function {:inline} $eq.i160(i1: i160, i2: i160) returns (i1) { (if $eq.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) returns (bool) { (i1 == i2) }
function {:inline} $eq.bv160(i1: bv160, i2: bv160) returns (bv1) { (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $eq.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 == i2) }
function {:inline} $eq.i256(i1: i256, i2: i256) returns (i1) { (if $eq.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) returns (bool) { (i1 == i2) }
function {:inline} $eq.bv256(i1: bv256, i2: bv256) returns (bv1) { (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ne.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 != i2) }
function {:inline} $ne.i1(i1: i1, i2: i1) returns (i1) { (if $ne.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) returns (bool) { (i1 != i2) }
function {:inline} $ne.bv1(i1: bv1, i2: bv1) returns (bv1) { (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ne.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 != i2) }
function {:inline} $ne.i5(i1: i5, i2: i5) returns (i1) { (if $ne.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) returns (bool) { (i1 != i2) }
function {:inline} $ne.bv5(i1: bv5, i2: bv5) returns (bv1) { (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ne.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 != i2) }
function {:inline} $ne.i6(i1: i6, i2: i6) returns (i1) { (if $ne.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) returns (bool) { (i1 != i2) }
function {:inline} $ne.bv6(i1: bv6, i2: bv6) returns (bv1) { (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ne.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 != i2) }
function {:inline} $ne.i8(i1: i8, i2: i8) returns (i1) { (if $ne.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) returns (bool) { (i1 != i2) }
function {:inline} $ne.bv8(i1: bv8, i2: bv8) returns (bv1) { (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ne.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 != i2) }
function {:inline} $ne.i16(i1: i16, i2: i16) returns (i1) { (if $ne.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) returns (bool) { (i1 != i2) }
function {:inline} $ne.bv16(i1: bv16, i2: bv16) returns (bv1) { (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ne.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 != i2) }
function {:inline} $ne.i24(i1: i24, i2: i24) returns (i1) { (if $ne.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) returns (bool) { (i1 != i2) }
function {:inline} $ne.bv24(i1: bv24, i2: bv24) returns (bv1) { (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ne.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 != i2) }
function {:inline} $ne.i32(i1: i32, i2: i32) returns (i1) { (if $ne.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) returns (bool) { (i1 != i2) }
function {:inline} $ne.bv32(i1: bv32, i2: bv32) returns (bv1) { (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ne.i33.bool(i1: i33, i2: i33) returns (bool) { (i1 != i2) }
function {:inline} $ne.i33(i1: i33, i2: i33) returns (i1) { (if $ne.i33.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.bv33.bool(i1: bv33, i2: bv33) returns (bool) { (i1 != i2) }
function {:inline} $ne.bv33(i1: bv33, i2: bv33) returns (bv1) { (if $ne.bv33.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ne.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 != i2) }
function {:inline} $ne.i40(i1: i40, i2: i40) returns (i1) { (if $ne.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) returns (bool) { (i1 != i2) }
function {:inline} $ne.bv40(i1: bv40, i2: bv40) returns (bv1) { (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ne.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 != i2) }
function {:inline} $ne.i48(i1: i48, i2: i48) returns (i1) { (if $ne.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) returns (bool) { (i1 != i2) }
function {:inline} $ne.bv48(i1: bv48, i2: bv48) returns (bv1) { (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ne.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 != i2) }
function {:inline} $ne.i56(i1: i56, i2: i56) returns (i1) { (if $ne.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) returns (bool) { (i1 != i2) }
function {:inline} $ne.bv56(i1: bv56, i2: bv56) returns (bv1) { (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ne.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 != i2) }
function {:inline} $ne.i64(i1: i64, i2: i64) returns (i1) { (if $ne.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) returns (bool) { (i1 != i2) }
function {:inline} $ne.bv64(i1: bv64, i2: bv64) returns (bv1) { (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ne.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 != i2) }
function {:inline} $ne.i80(i1: i80, i2: i80) returns (i1) { (if $ne.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) returns (bool) { (i1 != i2) }
function {:inline} $ne.bv80(i1: bv80, i2: bv80) returns (bv1) { (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ne.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 != i2) }
function {:inline} $ne.i88(i1: i88, i2: i88) returns (i1) { (if $ne.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) returns (bool) { (i1 != i2) }
function {:inline} $ne.bv88(i1: bv88, i2: bv88) returns (bv1) { (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ne.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 != i2) }
function {:inline} $ne.i96(i1: i96, i2: i96) returns (i1) { (if $ne.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) returns (bool) { (i1 != i2) }
function {:inline} $ne.bv96(i1: bv96, i2: bv96) returns (bv1) { (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ne.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 != i2) }
function {:inline} $ne.i128(i1: i128, i2: i128) returns (i1) { (if $ne.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) returns (bool) { (i1 != i2) }
function {:inline} $ne.bv128(i1: bv128, i2: bv128) returns (bv1) { (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ne.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 != i2) }
function {:inline} $ne.i160(i1: i160, i2: i160) returns (i1) { (if $ne.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) returns (bool) { (i1 != i2) }
function {:inline} $ne.bv160(i1: bv160, i2: bv160) returns (bv1) { (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ne.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 != i2) }
function {:inline} $ne.i256(i1: i256, i2: i256) returns (i1) { (if $ne.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) returns (bool) { (i1 != i2) }
function {:inline} $ne.bv256(i1: bv256, i2: bv256) returns (bv1) { (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1) }
// Integer load/store operations
function {:inline} $load.bv1(M: [ref] bv1, p: ref) returns (bv1) { M[p] }
function {:inline} $store.bv1(M: [ref] bv1, p: ref, i: bv1) returns ([ref] bv1) { M[p := i] }
function {:inline} $load.bytes.bv1(M: [ref] bv8, p: ref) returns (bv1) { $trunc.bv8.bv1(M[p]) }
function {:inline} $store.bytes.bv1(M: [ref] bv8, p: ref, i: bv1) returns ([ref] bv8) { M[p := $zext.bv1.bv8(i)] }
function {:inline} $load.bv5(M: [ref] bv5, p: ref) returns (bv5) { M[p] }
function {:inline} $store.bv5(M: [ref] bv5, p: ref, i: bv5) returns ([ref] bv5) { M[p := i] }
function {:inline} $load.bytes.bv5(M: [ref] bv8, p: ref) returns (bv5) { $trunc.bv8.bv5(M[p]) }
function {:inline} $store.bytes.bv5(M: [ref] bv8, p: ref, i: bv5) returns ([ref] bv8) { M[p := $zext.bv5.bv8(i)] }
function {:inline} $load.bv6(M: [ref] bv6, p: ref) returns (bv6) { M[p] }
function {:inline} $store.bv6(M: [ref] bv6, p: ref, i: bv6) returns ([ref] bv6) { M[p := i] }
function {:inline} $load.bytes.bv6(M: [ref] bv8, p: ref) returns (bv6) { $trunc.bv8.bv6(M[p]) }
function {:inline} $store.bytes.bv6(M: [ref] bv8, p: ref, i: bv6) returns ([ref] bv8) { M[p := $zext.bv6.bv8(i)] }
function {:inline} $load.bv8(M: [ref] bv8, p: ref) returns (bv8) { M[p] }
function {:inline} $store.bv8(M: [ref] bv8, p: ref, i: bv8) returns ([ref] bv8) { M[p := i] }
function {:inline} $load.bytes.bv8(M: [ref] bv8, p: ref) returns (bv8) { M[p] }
function {:inline} $store.bytes.bv8(M: [ref] bv8, p: ref, i: bv8) returns ([ref] bv8) { M[p := i] }
function {:inline} $load.bv16(M: [ref] bv16, p: ref) returns (bv16) { M[p] }
function {:inline} $store.bv16(M: [ref] bv16, p: ref, i: bv16) returns ([ref] bv16) { M[p := i] }
function {:inline} $load.bytes.bv16(M: [ref] bv8, p: ref) returns (bv16) { (M[$add.ref(p, 1)]++M[p]) }
function {:inline} $store.bytes.bv16(M: [ref] bv8, p: ref, i: bv16) returns ([ref] bv8) { M[p := i[8:0]][$add.ref(p, 1) := i[16:8]] }
function {:inline} $load.bv24(M: [ref] bv24, p: ref) returns (bv24) { M[p] }
function {:inline} $store.bv24(M: [ref] bv24, p: ref, i: bv24) returns ([ref] bv24) { M[p := i] }
function {:inline} $load.bytes.bv24(M: [ref] bv8, p: ref) returns (bv24) { (M[$add.ref(p, 2)]++(M[$add.ref(p, 1)]++M[p])) }
function {:inline} $store.bytes.bv24(M: [ref] bv8, p: ref, i: bv24) returns ([ref] bv8) { M[p := i[8:0]][$add.ref(p, 1) := i[16:8]][$add.ref(p, 2) := i[24:16]] }
function {:inline} $load.bv32(M: [ref] bv32, p: ref) returns (bv32) { M[p] }
function {:inline} $store.bv32(M: [ref] bv32, p: ref, i: bv32) returns ([ref] bv32) { M[p := i] }
function {:inline} $load.bytes.bv32(M: [ref] bv8, p: ref) returns (bv32) { (M[$add.ref(p, 3)]++(M[$add.ref(p, 2)]++(M[$add.ref(p, 1)]++M[p]))) }
function {:inline} $store.bytes.bv32(M: [ref] bv8, p: ref, i: bv32) returns ([ref] bv8) { M[p := i[8:0]][$add.ref(p, 1) := i[16:8]][$add.ref(p, 2) := i[24:16]][$add.ref(p, 3) := i[32:24]] }
function {:inline} $load.bv33(M: [ref] bv33, p: ref) returns (bv33) { M[p] }
function {:inline} $store.bv33(M: [ref] bv33, p: ref, i: bv33) returns ([ref] bv33) { M[p := i] }
function {:inline} $load.bytes.bv33(M: [ref] bv8, p: ref) returns (bv33) { (M[$add.ref(p, 3)]++(M[$add.ref(p, 2)]++(M[$add.ref(p, 1)]++M[p]))) }
function {:inline} $store.bytes.bv33(M: [ref] bv8, p: ref, i: bv33) returns ([ref] bv8) { M[p := i[8:0]][$add.ref(p, 1) := i[16:8]][$add.ref(p, 2) := i[24:16]][$add.ref(p, 3) := i[32:24]] }
function {:inline} $load.bv40(M: [ref] bv40, p: ref) returns (bv40) { M[p] }
function {:inline} $store.bv40(M: [ref] bv40, p: ref, i: bv40) returns ([ref] bv40) { M[p := i] }
function {:inline} $load.bytes.bv40(M: [ref] bv8, p: ref) returns (bv40) { (M[$add.ref(p, 4)]++(M[$add.ref(p, 3)]++(M[$add.ref(p, 2)]++(M[$add.ref(p, 1)]++M[p])))) }
function {:inline} $store.bytes.bv40(M: [ref] bv8, p: ref, i: bv40) returns ([ref] bv8) { M[p := i[8:0]][$add.ref(p, 1) := i[16:8]][$add.ref(p, 2) := i[24:16]][$add.ref(p, 3) := i[32:24]][$add.ref(p, 4) := i[40:32]] }
function {:inline} $load.bv48(M: [ref] bv48, p: ref) returns (bv48) { M[p] }
function {:inline} $store.bv48(M: [ref] bv48, p: ref, i: bv48) returns ([ref] bv48) { M[p := i] }
function {:inline} $load.bytes.bv48(M: [ref] bv8, p: ref) returns (bv48) { (M[$add.ref(p, 5)]++(M[$add.ref(p, 4)]++(M[$add.ref(p, 3)]++(M[$add.ref(p, 2)]++(M[$add.ref(p, 1)]++M[p]))))) }
function {:inline} $store.bytes.bv48(M: [ref] bv8, p: ref, i: bv48) returns ([ref] bv8) { M[p := i[8:0]][$add.ref(p, 1) := i[16:8]][$add.ref(p, 2) := i[24:16]][$add.ref(p, 3) := i[32:24]][$add.ref(p, 4) := i[40:32]][$add.ref(p, 5) := i[48:40]] }
function {:inline} $load.bv56(M: [ref] bv56, p: ref) returns (bv56) { M[p] }
function {:inline} $store.bv56(M: [ref] bv56, p: ref, i: bv56) returns ([ref] bv56) { M[p := i] }
function {:inline} $load.bytes.bv56(M: [ref] bv8, p: ref) returns (bv56) { (M[$add.ref(p, 6)]++(M[$add.ref(p, 5)]++(M[$add.ref(p, 4)]++(M[$add.ref(p, 3)]++(M[$add.ref(p, 2)]++(M[$add.ref(p, 1)]++M[p])))))) }
function {:inline} $store.bytes.bv56(M: [ref] bv8, p: ref, i: bv56) returns ([ref] bv8) { M[p := i[8:0]][$add.ref(p, 1) := i[16:8]][$add.ref(p, 2) := i[24:16]][$add.ref(p, 3) := i[32:24]][$add.ref(p, 4) := i[40:32]][$add.ref(p, 5) := i[48:40]][$add.ref(p, 6) := i[56:48]] }
function {:inline} $load.bv64(M: [ref] bv64, p: ref) returns (bv64) { M[p] }
function {:inline} $store.bv64(M: [ref] bv64, p: ref, i: bv64) returns ([ref] bv64) { M[p := i] }
function {:inline} $load.bytes.bv64(M: [ref] bv8, p: ref) returns (bv64) { (M[$add.ref(p, 7)]++(M[$add.ref(p, 6)]++(M[$add.ref(p, 5)]++(M[$add.ref(p, 4)]++(M[$add.ref(p, 3)]++(M[$add.ref(p, 2)]++(M[$add.ref(p, 1)]++M[p]))))))) }
function {:inline} $store.bytes.bv64(M: [ref] bv8, p: ref, i: bv64) returns ([ref] bv8) { M[p := i[8:0]][$add.ref(p, 1) := i[16:8]][$add.ref(p, 2) := i[24:16]][$add.ref(p, 3) := i[32:24]][$add.ref(p, 4) := i[40:32]][$add.ref(p, 5) := i[48:40]][$add.ref(p, 6) := i[56:48]][$add.ref(p, 7) := i[64:56]] }
function {:inline} $load.bv80(M: [ref] bv80, p: ref) returns (bv80) { M[p] }
function {:inline} $store.bv80(M: [ref] bv80, p: ref, i: bv80) returns ([ref] bv80) { M[p := i] }
function {:inline} $load.bytes.bv80(M: [ref] bv8, p: ref) returns (bv80) { (M[$add.ref(p, 9)]++(M[$add.ref(p, 8)]++(M[$add.ref(p, 7)]++(M[$add.ref(p, 6)]++(M[$add.ref(p, 5)]++(M[$add.ref(p, 4)]++(M[$add.ref(p, 3)]++(M[$add.ref(p, 2)]++(M[$add.ref(p, 1)]++M[p]))))))))) }
function {:inline} $store.bytes.bv80(M: [ref] bv8, p: ref, i: bv80) returns ([ref] bv8) { M[p := i[8:0]][$add.ref(p, 1) := i[16:8]][$add.ref(p, 2) := i[24:16]][$add.ref(p, 3) := i[32:24]][$add.ref(p, 4) := i[40:32]][$add.ref(p, 5) := i[48:40]][$add.ref(p, 6) := i[56:48]][$add.ref(p, 7) := i[64:56]][$add.ref(p, 8) := i[72:64]][$add.ref(p, 9) := i[80:72]] }
function {:inline} $load.bv88(M: [ref] bv88, p: ref) returns (bv88) { M[p] }
function {:inline} $store.bv88(M: [ref] bv88, p: ref, i: bv88) returns ([ref] bv88) { M[p := i] }
function {:inline} $load.bytes.bv88(M: [ref] bv8, p: ref) returns (bv88) { (M[$add.ref(p, 10)]++(M[$add.ref(p, 9)]++(M[$add.ref(p, 8)]++(M[$add.ref(p, 7)]++(M[$add.ref(p, 6)]++(M[$add.ref(p, 5)]++(M[$add.ref(p, 4)]++(M[$add.ref(p, 3)]++(M[$add.ref(p, 2)]++(M[$add.ref(p, 1)]++M[p])))))))))) }
function {:inline} $store.bytes.bv88(M: [ref] bv8, p: ref, i: bv88) returns ([ref] bv8) { M[p := i[8:0]][$add.ref(p, 1) := i[16:8]][$add.ref(p, 2) := i[24:16]][$add.ref(p, 3) := i[32:24]][$add.ref(p, 4) := i[40:32]][$add.ref(p, 5) := i[48:40]][$add.ref(p, 6) := i[56:48]][$add.ref(p, 7) := i[64:56]][$add.ref(p, 8) := i[72:64]][$add.ref(p, 9) := i[80:72]][$add.ref(p, 10) := i[88:80]] }
function {:inline} $load.bv96(M: [ref] bv96, p: ref) returns (bv96) { M[p] }
function {:inline} $store.bv96(M: [ref] bv96, p: ref, i: bv96) returns ([ref] bv96) { M[p := i] }
function {:inline} $load.bytes.bv96(M: [ref] bv8, p: ref) returns (bv96) { (M[$add.ref(p, 11)]++(M[$add.ref(p, 10)]++(M[$add.ref(p, 9)]++(M[$add.ref(p, 8)]++(M[$add.ref(p, 7)]++(M[$add.ref(p, 6)]++(M[$add.ref(p, 5)]++(M[$add.ref(p, 4)]++(M[$add.ref(p, 3)]++(M[$add.ref(p, 2)]++(M[$add.ref(p, 1)]++M[p]))))))))))) }
function {:inline} $store.bytes.bv96(M: [ref] bv8, p: ref, i: bv96) returns ([ref] bv8) { M[p := i[8:0]][$add.ref(p, 1) := i[16:8]][$add.ref(p, 2) := i[24:16]][$add.ref(p, 3) := i[32:24]][$add.ref(p, 4) := i[40:32]][$add.ref(p, 5) := i[48:40]][$add.ref(p, 6) := i[56:48]][$add.ref(p, 7) := i[64:56]][$add.ref(p, 8) := i[72:64]][$add.ref(p, 9) := i[80:72]][$add.ref(p, 10) := i[88:80]][$add.ref(p, 11) := i[96:88]] }
function {:inline} $load.bv128(M: [ref] bv128, p: ref) returns (bv128) { M[p] }
function {:inline} $store.bv128(M: [ref] bv128, p: ref, i: bv128) returns ([ref] bv128) { M[p := i] }
function {:inline} $load.bytes.bv128(M: [ref] bv8, p: ref) returns (bv128) { (M[$add.ref(p, 15)]++(M[$add.ref(p, 14)]++(M[$add.ref(p, 13)]++(M[$add.ref(p, 12)]++(M[$add.ref(p, 11)]++(M[$add.ref(p, 10)]++(M[$add.ref(p, 9)]++(M[$add.ref(p, 8)]++(M[$add.ref(p, 7)]++(M[$add.ref(p, 6)]++(M[$add.ref(p, 5)]++(M[$add.ref(p, 4)]++(M[$add.ref(p, 3)]++(M[$add.ref(p, 2)]++(M[$add.ref(p, 1)]++M[p]))))))))))))))) }
function {:inline} $store.bytes.bv128(M: [ref] bv8, p: ref, i: bv128) returns ([ref] bv8) { M[p := i[8:0]][$add.ref(p, 1) := i[16:8]][$add.ref(p, 2) := i[24:16]][$add.ref(p, 3) := i[32:24]][$add.ref(p, 4) := i[40:32]][$add.ref(p, 5) := i[48:40]][$add.ref(p, 6) := i[56:48]][$add.ref(p, 7) := i[64:56]][$add.ref(p, 8) := i[72:64]][$add.ref(p, 9) := i[80:72]][$add.ref(p, 10) := i[88:80]][$add.ref(p, 11) := i[96:88]][$add.ref(p, 12) := i[104:96]][$add.ref(p, 13) := i[112:104]][$add.ref(p, 14) := i[120:112]][$add.ref(p, 15) := i[128:120]] }
function {:inline} $load.bv160(M: [ref] bv160, p: ref) returns (bv160) { M[p] }
function {:inline} $store.bv160(M: [ref] bv160, p: ref, i: bv160) returns ([ref] bv160) { M[p := i] }
function {:inline} $load.bytes.bv160(M: [ref] bv8, p: ref) returns (bv160) { (M[$add.ref(p, 19)]++(M[$add.ref(p, 18)]++(M[$add.ref(p, 17)]++(M[$add.ref(p, 16)]++(M[$add.ref(p, 15)]++(M[$add.ref(p, 14)]++(M[$add.ref(p, 13)]++(M[$add.ref(p, 12)]++(M[$add.ref(p, 11)]++(M[$add.ref(p, 10)]++(M[$add.ref(p, 9)]++(M[$add.ref(p, 8)]++(M[$add.ref(p, 7)]++(M[$add.ref(p, 6)]++(M[$add.ref(p, 5)]++(M[$add.ref(p, 4)]++(M[$add.ref(p, 3)]++(M[$add.ref(p, 2)]++(M[$add.ref(p, 1)]++M[p]))))))))))))))))))) }
function {:inline} $store.bytes.bv160(M: [ref] bv8, p: ref, i: bv160) returns ([ref] bv8) { M[p := i[8:0]][$add.ref(p, 1) := i[16:8]][$add.ref(p, 2) := i[24:16]][$add.ref(p, 3) := i[32:24]][$add.ref(p, 4) := i[40:32]][$add.ref(p, 5) := i[48:40]][$add.ref(p, 6) := i[56:48]][$add.ref(p, 7) := i[64:56]][$add.ref(p, 8) := i[72:64]][$add.ref(p, 9) := i[80:72]][$add.ref(p, 10) := i[88:80]][$add.ref(p, 11) := i[96:88]][$add.ref(p, 12) := i[104:96]][$add.ref(p, 13) := i[112:104]][$add.ref(p, 14) := i[120:112]][$add.ref(p, 15) := i[128:120]][$add.ref(p, 16) := i[136:128]][$add.ref(p, 17) := i[144:136]][$add.ref(p, 18) := i[152:144]][$add.ref(p, 19) := i[160:152]] }
function {:inline} $load.bv256(M: [ref] bv256, p: ref) returns (bv256) { M[p] }
function {:inline} $store.bv256(M: [ref] bv256, p: ref, i: bv256) returns ([ref] bv256) { M[p := i] }
function {:inline} $load.bytes.bv256(M: [ref] bv8, p: ref) returns (bv256) { (M[$add.ref(p, 31)]++(M[$add.ref(p, 30)]++(M[$add.ref(p, 29)]++(M[$add.ref(p, 28)]++(M[$add.ref(p, 27)]++(M[$add.ref(p, 26)]++(M[$add.ref(p, 25)]++(M[$add.ref(p, 24)]++(M[$add.ref(p, 23)]++(M[$add.ref(p, 22)]++(M[$add.ref(p, 21)]++(M[$add.ref(p, 20)]++(M[$add.ref(p, 19)]++(M[$add.ref(p, 18)]++(M[$add.ref(p, 17)]++(M[$add.ref(p, 16)]++(M[$add.ref(p, 15)]++(M[$add.ref(p, 14)]++(M[$add.ref(p, 13)]++(M[$add.ref(p, 12)]++(M[$add.ref(p, 11)]++(M[$add.ref(p, 10)]++(M[$add.ref(p, 9)]++(M[$add.ref(p, 8)]++(M[$add.ref(p, 7)]++(M[$add.ref(p, 6)]++(M[$add.ref(p, 5)]++(M[$add.ref(p, 4)]++(M[$add.ref(p, 3)]++(M[$add.ref(p, 2)]++(M[$add.ref(p, 1)]++M[p]))))))))))))))))))))))))))))))) }
function {:inline} $store.bytes.bv256(M: [ref] bv8, p: ref, i: bv256) returns ([ref] bv8) { M[p := i[8:0]][$add.ref(p, 1) := i[16:8]][$add.ref(p, 2) := i[24:16]][$add.ref(p, 3) := i[32:24]][$add.ref(p, 4) := i[40:32]][$add.ref(p, 5) := i[48:40]][$add.ref(p, 6) := i[56:48]][$add.ref(p, 7) := i[64:56]][$add.ref(p, 8) := i[72:64]][$add.ref(p, 9) := i[80:72]][$add.ref(p, 10) := i[88:80]][$add.ref(p, 11) := i[96:88]][$add.ref(p, 12) := i[104:96]][$add.ref(p, 13) := i[112:104]][$add.ref(p, 14) := i[120:112]][$add.ref(p, 15) := i[128:120]][$add.ref(p, 16) := i[136:128]][$add.ref(p, 17) := i[144:136]][$add.ref(p, 18) := i[152:144]][$add.ref(p, 19) := i[160:152]][$add.ref(p, 20) := i[168:160]][$add.ref(p, 21) := i[176:168]][$add.ref(p, 22) := i[184:176]][$add.ref(p, 23) := i[192:184]][$add.ref(p, 24) := i[200:192]][$add.ref(p, 25) := i[208:200]][$add.ref(p, 26) := i[216:208]][$add.ref(p, 27) := i[224:216]][$add.ref(p, 28) := i[232:224]][$add.ref(p, 29) := i[240:232]][$add.ref(p, 30) := i[248:240]][$add.ref(p, 31) := i[256:248]] }
// Conversion between integer types
function {:inline} $trunc.bv5.bv1(i: bv5) returns (bv1) { i[1:0] }
function {:inline} $trunc.bv6.bv1(i: bv6) returns (bv1) { i[1:0] }
function {:inline} $trunc.bv8.bv1(i: bv8) returns (bv1) { i[1:0] }
function {:inline} $trunc.bv16.bv1(i: bv16) returns (bv1) { i[1:0] }
function {:inline} $trunc.bv24.bv1(i: bv24) returns (bv1) { i[1:0] }
function {:inline} $trunc.bv32.bv1(i: bv32) returns (bv1) { i[1:0] }
function {:inline} $trunc.bv33.bv1(i: bv33) returns (bv1) { i[1:0] }
function {:inline} $trunc.bv40.bv1(i: bv40) returns (bv1) { i[1:0] }
function {:inline} $trunc.bv48.bv1(i: bv48) returns (bv1) { i[1:0] }
function {:inline} $trunc.bv56.bv1(i: bv56) returns (bv1) { i[1:0] }
function {:inline} $trunc.bv64.bv1(i: bv64) returns (bv1) { i[1:0] }
function {:inline} $trunc.bv80.bv1(i: bv80) returns (bv1) { i[1:0] }
function {:inline} $trunc.bv88.bv1(i: bv88) returns (bv1) { i[1:0] }
function {:inline} $trunc.bv96.bv1(i: bv96) returns (bv1) { i[1:0] }
function {:inline} $trunc.bv128.bv1(i: bv128) returns (bv1) { i[1:0] }
function {:inline} $trunc.bv160.bv1(i: bv160) returns (bv1) { i[1:0] }
function {:inline} $trunc.bv256.bv1(i: bv256) returns (bv1) { i[1:0] }
function {:inline} $trunc.bv6.bv5(i: bv6) returns (bv5) { i[5:0] }
function {:inline} $trunc.bv8.bv5(i: bv8) returns (bv5) { i[5:0] }
function {:inline} $trunc.bv16.bv5(i: bv16) returns (bv5) { i[5:0] }
function {:inline} $trunc.bv24.bv5(i: bv24) returns (bv5) { i[5:0] }
function {:inline} $trunc.bv32.bv5(i: bv32) returns (bv5) { i[5:0] }
function {:inline} $trunc.bv33.bv5(i: bv33) returns (bv5) { i[5:0] }
function {:inline} $trunc.bv40.bv5(i: bv40) returns (bv5) { i[5:0] }
function {:inline} $trunc.bv48.bv5(i: bv48) returns (bv5) { i[5:0] }
function {:inline} $trunc.bv56.bv5(i: bv56) returns (bv5) { i[5:0] }
function {:inline} $trunc.bv64.bv5(i: bv64) returns (bv5) { i[5:0] }
function {:inline} $trunc.bv80.bv5(i: bv80) returns (bv5) { i[5:0] }
function {:inline} $trunc.bv88.bv5(i: bv88) returns (bv5) { i[5:0] }
function {:inline} $trunc.bv96.bv5(i: bv96) returns (bv5) { i[5:0] }
function {:inline} $trunc.bv128.bv5(i: bv128) returns (bv5) { i[5:0] }
function {:inline} $trunc.bv160.bv5(i: bv160) returns (bv5) { i[5:0] }
function {:inline} $trunc.bv256.bv5(i: bv256) returns (bv5) { i[5:0] }
function {:inline} $trunc.bv8.bv6(i: bv8) returns (bv6) { i[6:0] }
function {:inline} $trunc.bv16.bv6(i: bv16) returns (bv6) { i[6:0] }
function {:inline} $trunc.bv24.bv6(i: bv24) returns (bv6) { i[6:0] }
function {:inline} $trunc.bv32.bv6(i: bv32) returns (bv6) { i[6:0] }
function {:inline} $trunc.bv33.bv6(i: bv33) returns (bv6) { i[6:0] }
function {:inline} $trunc.bv40.bv6(i: bv40) returns (bv6) { i[6:0] }
function {:inline} $trunc.bv48.bv6(i: bv48) returns (bv6) { i[6:0] }
function {:inline} $trunc.bv56.bv6(i: bv56) returns (bv6) { i[6:0] }
function {:inline} $trunc.bv64.bv6(i: bv64) returns (bv6) { i[6:0] }
function {:inline} $trunc.bv80.bv6(i: bv80) returns (bv6) { i[6:0] }
function {:inline} $trunc.bv88.bv6(i: bv88) returns (bv6) { i[6:0] }
function {:inline} $trunc.bv96.bv6(i: bv96) returns (bv6) { i[6:0] }
function {:inline} $trunc.bv128.bv6(i: bv128) returns (bv6) { i[6:0] }
function {:inline} $trunc.bv160.bv6(i: bv160) returns (bv6) { i[6:0] }
function {:inline} $trunc.bv256.bv6(i: bv256) returns (bv6) { i[6:0] }
function {:inline} $trunc.bv16.bv8(i: bv16) returns (bv8) { i[8:0] }
function {:inline} $trunc.bv24.bv8(i: bv24) returns (bv8) { i[8:0] }
function {:inline} $trunc.bv32.bv8(i: bv32) returns (bv8) { i[8:0] }
function {:inline} $trunc.bv33.bv8(i: bv33) returns (bv8) { i[8:0] }
function {:inline} $trunc.bv40.bv8(i: bv40) returns (bv8) { i[8:0] }
function {:inline} $trunc.bv48.bv8(i: bv48) returns (bv8) { i[8:0] }
function {:inline} $trunc.bv56.bv8(i: bv56) returns (bv8) { i[8:0] }
function {:inline} $trunc.bv64.bv8(i: bv64) returns (bv8) { i[8:0] }
function {:inline} $trunc.bv80.bv8(i: bv80) returns (bv8) { i[8:0] }
function {:inline} $trunc.bv88.bv8(i: bv88) returns (bv8) { i[8:0] }
function {:inline} $trunc.bv96.bv8(i: bv96) returns (bv8) { i[8:0] }
function {:inline} $trunc.bv128.bv8(i: bv128) returns (bv8) { i[8:0] }
function {:inline} $trunc.bv160.bv8(i: bv160) returns (bv8) { i[8:0] }
function {:inline} $trunc.bv256.bv8(i: bv256) returns (bv8) { i[8:0] }
function {:inline} $trunc.bv24.bv16(i: bv24) returns (bv16) { i[16:0] }
function {:inline} $trunc.bv32.bv16(i: bv32) returns (bv16) { i[16:0] }
function {:inline} $trunc.bv33.bv16(i: bv33) returns (bv16) { i[16:0] }
function {:inline} $trunc.bv40.bv16(i: bv40) returns (bv16) { i[16:0] }
function {:inline} $trunc.bv48.bv16(i: bv48) returns (bv16) { i[16:0] }
function {:inline} $trunc.bv56.bv16(i: bv56) returns (bv16) { i[16:0] }
function {:inline} $trunc.bv64.bv16(i: bv64) returns (bv16) { i[16:0] }
function {:inline} $trunc.bv80.bv16(i: bv80) returns (bv16) { i[16:0] }
function {:inline} $trunc.bv88.bv16(i: bv88) returns (bv16) { i[16:0] }
function {:inline} $trunc.bv96.bv16(i: bv96) returns (bv16) { i[16:0] }
function {:inline} $trunc.bv128.bv16(i: bv128) returns (bv16) { i[16:0] }
function {:inline} $trunc.bv160.bv16(i: bv160) returns (bv16) { i[16:0] }
function {:inline} $trunc.bv256.bv16(i: bv256) returns (bv16) { i[16:0] }
function {:inline} $trunc.bv32.bv24(i: bv32) returns (bv24) { i[24:0] }
function {:inline} $trunc.bv33.bv24(i: bv33) returns (bv24) { i[24:0] }
function {:inline} $trunc.bv40.bv24(i: bv40) returns (bv24) { i[24:0] }
function {:inline} $trunc.bv48.bv24(i: bv48) returns (bv24) { i[24:0] }
function {:inline} $trunc.bv56.bv24(i: bv56) returns (bv24) { i[24:0] }
function {:inline} $trunc.bv64.bv24(i: bv64) returns (bv24) { i[24:0] }
function {:inline} $trunc.bv80.bv24(i: bv80) returns (bv24) { i[24:0] }
function {:inline} $trunc.bv88.bv24(i: bv88) returns (bv24) { i[24:0] }
function {:inline} $trunc.bv96.bv24(i: bv96) returns (bv24) { i[24:0] }
function {:inline} $trunc.bv128.bv24(i: bv128) returns (bv24) { i[24:0] }
function {:inline} $trunc.bv160.bv24(i: bv160) returns (bv24) { i[24:0] }
function {:inline} $trunc.bv256.bv24(i: bv256) returns (bv24) { i[24:0] }
function {:inline} $trunc.bv33.bv32(i: bv33) returns (bv32) { i[32:0] }
function {:inline} $trunc.bv40.bv32(i: bv40) returns (bv32) { i[32:0] }
function {:inline} $trunc.bv48.bv32(i: bv48) returns (bv32) { i[32:0] }
function {:inline} $trunc.bv56.bv32(i: bv56) returns (bv32) { i[32:0] }
function {:inline} $trunc.bv64.bv32(i: bv64) returns (bv32) { i[32:0] }
function {:inline} $trunc.bv80.bv32(i: bv80) returns (bv32) { i[32:0] }
function {:inline} $trunc.bv88.bv32(i: bv88) returns (bv32) { i[32:0] }
function {:inline} $trunc.bv96.bv32(i: bv96) returns (bv32) { i[32:0] }
function {:inline} $trunc.bv128.bv32(i: bv128) returns (bv32) { i[32:0] }
function {:inline} $trunc.bv160.bv32(i: bv160) returns (bv32) { i[32:0] }
function {:inline} $trunc.bv256.bv32(i: bv256) returns (bv32) { i[32:0] }
function {:inline} $trunc.bv40.bv33(i: bv40) returns (bv33) { i[33:0] }
function {:inline} $trunc.bv48.bv33(i: bv48) returns (bv33) { i[33:0] }
function {:inline} $trunc.bv56.bv33(i: bv56) returns (bv33) { i[33:0] }
function {:inline} $trunc.bv64.bv33(i: bv64) returns (bv33) { i[33:0] }
function {:inline} $trunc.bv80.bv33(i: bv80) returns (bv33) { i[33:0] }
function {:inline} $trunc.bv88.bv33(i: bv88) returns (bv33) { i[33:0] }
function {:inline} $trunc.bv96.bv33(i: bv96) returns (bv33) { i[33:0] }
function {:inline} $trunc.bv128.bv33(i: bv128) returns (bv33) { i[33:0] }
function {:inline} $trunc.bv160.bv33(i: bv160) returns (bv33) { i[33:0] }
function {:inline} $trunc.bv256.bv33(i: bv256) returns (bv33) { i[33:0] }
function {:inline} $trunc.bv48.bv40(i: bv48) returns (bv40) { i[40:0] }
function {:inline} $trunc.bv56.bv40(i: bv56) returns (bv40) { i[40:0] }
function {:inline} $trunc.bv64.bv40(i: bv64) returns (bv40) { i[40:0] }
function {:inline} $trunc.bv80.bv40(i: bv80) returns (bv40) { i[40:0] }
function {:inline} $trunc.bv88.bv40(i: bv88) returns (bv40) { i[40:0] }
function {:inline} $trunc.bv96.bv40(i: bv96) returns (bv40) { i[40:0] }
function {:inline} $trunc.bv128.bv40(i: bv128) returns (bv40) { i[40:0] }
function {:inline} $trunc.bv160.bv40(i: bv160) returns (bv40) { i[40:0] }
function {:inline} $trunc.bv256.bv40(i: bv256) returns (bv40) { i[40:0] }
function {:inline} $trunc.bv56.bv48(i: bv56) returns (bv48) { i[48:0] }
function {:inline} $trunc.bv64.bv48(i: bv64) returns (bv48) { i[48:0] }
function {:inline} $trunc.bv80.bv48(i: bv80) returns (bv48) { i[48:0] }
function {:inline} $trunc.bv88.bv48(i: bv88) returns (bv48) { i[48:0] }
function {:inline} $trunc.bv96.bv48(i: bv96) returns (bv48) { i[48:0] }
function {:inline} $trunc.bv128.bv48(i: bv128) returns (bv48) { i[48:0] }
function {:inline} $trunc.bv160.bv48(i: bv160) returns (bv48) { i[48:0] }
function {:inline} $trunc.bv256.bv48(i: bv256) returns (bv48) { i[48:0] }
function {:inline} $trunc.bv64.bv56(i: bv64) returns (bv56) { i[56:0] }
function {:inline} $trunc.bv80.bv56(i: bv80) returns (bv56) { i[56:0] }
function {:inline} $trunc.bv88.bv56(i: bv88) returns (bv56) { i[56:0] }
function {:inline} $trunc.bv96.bv56(i: bv96) returns (bv56) { i[56:0] }
function {:inline} $trunc.bv128.bv56(i: bv128) returns (bv56) { i[56:0] }
function {:inline} $trunc.bv160.bv56(i: bv160) returns (bv56) { i[56:0] }
function {:inline} $trunc.bv256.bv56(i: bv256) returns (bv56) { i[56:0] }
function {:inline} $trunc.bv80.bv64(i: bv80) returns (bv64) { i[64:0] }
function {:inline} $trunc.bv88.bv64(i: bv88) returns (bv64) { i[64:0] }
function {:inline} $trunc.bv96.bv64(i: bv96) returns (bv64) { i[64:0] }
function {:inline} $trunc.bv128.bv64(i: bv128) returns (bv64) { i[64:0] }
function {:inline} $trunc.bv160.bv64(i: bv160) returns (bv64) { i[64:0] }
function {:inline} $trunc.bv256.bv64(i: bv256) returns (bv64) { i[64:0] }
function {:inline} $trunc.bv88.bv80(i: bv88) returns (bv80) { i[80:0] }
function {:inline} $trunc.bv96.bv80(i: bv96) returns (bv80) { i[80:0] }
function {:inline} $trunc.bv128.bv80(i: bv128) returns (bv80) { i[80:0] }
function {:inline} $trunc.bv160.bv80(i: bv160) returns (bv80) { i[80:0] }
function {:inline} $trunc.bv256.bv80(i: bv256) returns (bv80) { i[80:0] }
function {:inline} $trunc.bv96.bv88(i: bv96) returns (bv88) { i[88:0] }
function {:inline} $trunc.bv128.bv88(i: bv128) returns (bv88) { i[88:0] }
function {:inline} $trunc.bv160.bv88(i: bv160) returns (bv88) { i[88:0] }
function {:inline} $trunc.bv256.bv88(i: bv256) returns (bv88) { i[88:0] }
function {:inline} $trunc.bv128.bv96(i: bv128) returns (bv96) { i[96:0] }
function {:inline} $trunc.bv160.bv96(i: bv160) returns (bv96) { i[96:0] }
function {:inline} $trunc.bv256.bv96(i: bv256) returns (bv96) { i[96:0] }
function {:inline} $trunc.bv160.bv128(i: bv160) returns (bv128) { i[128:0] }
function {:inline} $trunc.bv256.bv128(i: bv256) returns (bv128) { i[128:0] }
function {:inline} $trunc.bv256.bv160(i: bv256) returns (bv160) { i[160:0] }
function {:bvbuiltin "(_ sign_extend 4)"} $sext.bv1.bv5(i: bv1) returns (bv5);
function {:bvbuiltin "(_ sign_extend 5)"} $sext.bv1.bv6(i: bv1) returns (bv6);
function {:bvbuiltin "(_ sign_extend 7)"} $sext.bv1.bv8(i: bv1) returns (bv8);
function {:bvbuiltin "(_ sign_extend 15)"} $sext.bv1.bv16(i: bv1) returns (bv16);
function {:bvbuiltin "(_ sign_extend 23)"} $sext.bv1.bv24(i: bv1) returns (bv24);
function {:bvbuiltin "(_ sign_extend 31)"} $sext.bv1.bv32(i: bv1) returns (bv32);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv1.bv33(i: bv1) returns (bv33);
function {:bvbuiltin "(_ sign_extend 39)"} $sext.bv1.bv40(i: bv1) returns (bv40);
function {:bvbuiltin "(_ sign_extend 47)"} $sext.bv1.bv48(i: bv1) returns (bv48);
function {:bvbuiltin "(_ sign_extend 55)"} $sext.bv1.bv56(i: bv1) returns (bv56);
function {:bvbuiltin "(_ sign_extend 63)"} $sext.bv1.bv64(i: bv1) returns (bv64);
function {:bvbuiltin "(_ sign_extend 79)"} $sext.bv1.bv80(i: bv1) returns (bv80);
function {:bvbuiltin "(_ sign_extend 87)"} $sext.bv1.bv88(i: bv1) returns (bv88);
function {:bvbuiltin "(_ sign_extend 95)"} $sext.bv1.bv96(i: bv1) returns (bv96);
function {:bvbuiltin "(_ sign_extend 127)"} $sext.bv1.bv128(i: bv1) returns (bv128);
function {:bvbuiltin "(_ sign_extend 159)"} $sext.bv1.bv160(i: bv1) returns (bv160);
function {:bvbuiltin "(_ sign_extend 255)"} $sext.bv1.bv256(i: bv1) returns (bv256);
function {:bvbuiltin "(_ sign_extend 1)"} $sext.bv5.bv6(i: bv5) returns (bv6);
function {:bvbuiltin "(_ sign_extend 3)"} $sext.bv5.bv8(i: bv5) returns (bv8);
function {:bvbuiltin "(_ sign_extend 11)"} $sext.bv5.bv16(i: bv5) returns (bv16);
function {:bvbuiltin "(_ sign_extend 19)"} $sext.bv5.bv24(i: bv5) returns (bv24);
function {:bvbuiltin "(_ sign_extend 27)"} $sext.bv5.bv32(i: bv5) returns (bv32);
function {:bvbuiltin "(_ sign_extend 28)"} $sext.bv5.bv33(i: bv5) returns (bv33);
function {:bvbuiltin "(_ sign_extend 35)"} $sext.bv5.bv40(i: bv5) returns (bv40);
function {:bvbuiltin "(_ sign_extend 43)"} $sext.bv5.bv48(i: bv5) returns (bv48);
function {:bvbuiltin "(_ sign_extend 51)"} $sext.bv5.bv56(i: bv5) returns (bv56);
function {:bvbuiltin "(_ sign_extend 59)"} $sext.bv5.bv64(i: bv5) returns (bv64);
function {:bvbuiltin "(_ sign_extend 75)"} $sext.bv5.bv80(i: bv5) returns (bv80);
function {:bvbuiltin "(_ sign_extend 83)"} $sext.bv5.bv88(i: bv5) returns (bv88);
function {:bvbuiltin "(_ sign_extend 91)"} $sext.bv5.bv96(i: bv5) returns (bv96);
function {:bvbuiltin "(_ sign_extend 123)"} $sext.bv5.bv128(i: bv5) returns (bv128);
function {:bvbuiltin "(_ sign_extend 155)"} $sext.bv5.bv160(i: bv5) returns (bv160);
function {:bvbuiltin "(_ sign_extend 251)"} $sext.bv5.bv256(i: bv5) returns (bv256);
function {:bvbuiltin "(_ sign_extend 2)"} $sext.bv6.bv8(i: bv6) returns (bv8);
function {:bvbuiltin "(_ sign_extend 10)"} $sext.bv6.bv16(i: bv6) returns (bv16);
function {:bvbuiltin "(_ sign_extend 18)"} $sext.bv6.bv24(i: bv6) returns (bv24);
function {:bvbuiltin "(_ sign_extend 26)"} $sext.bv6.bv32(i: bv6) returns (bv32);
function {:bvbuiltin "(_ sign_extend 27)"} $sext.bv6.bv33(i: bv6) returns (bv33);
function {:bvbuiltin "(_ sign_extend 34)"} $sext.bv6.bv40(i: bv6) returns (bv40);
function {:bvbuiltin "(_ sign_extend 42)"} $sext.bv6.bv48(i: bv6) returns (bv48);
function {:bvbuiltin "(_ sign_extend 50)"} $sext.bv6.bv56(i: bv6) returns (bv56);
function {:bvbuiltin "(_ sign_extend 58)"} $sext.bv6.bv64(i: bv6) returns (bv64);
function {:bvbuiltin "(_ sign_extend 74)"} $sext.bv6.bv80(i: bv6) returns (bv80);
function {:bvbuiltin "(_ sign_extend 82)"} $sext.bv6.bv88(i: bv6) returns (bv88);
function {:bvbuiltin "(_ sign_extend 90)"} $sext.bv6.bv96(i: bv6) returns (bv96);
function {:bvbuiltin "(_ sign_extend 122)"} $sext.bv6.bv128(i: bv6) returns (bv128);
function {:bvbuiltin "(_ sign_extend 154)"} $sext.bv6.bv160(i: bv6) returns (bv160);
function {:bvbuiltin "(_ sign_extend 250)"} $sext.bv6.bv256(i: bv6) returns (bv256);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) returns (bv16);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) returns (bv24);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) returns (bv32);
function {:bvbuiltin "(_ sign_extend 25)"} $sext.bv8.bv33(i: bv8) returns (bv33);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) returns (bv40);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) returns (bv48);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) returns (bv56);
function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) returns (bv64);
function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) returns (bv80);
function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) returns (bv88);
function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) returns (bv96);
function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) returns (bv128);
function {:bvbuiltin "(_ sign_extend 152)"} $sext.bv8.bv160(i: bv8) returns (bv160);
function {:bvbuiltin "(_ sign_extend 248)"} $sext.bv8.bv256(i: bv8) returns (bv256);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) returns (bv24);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) returns (bv32);
function {:bvbuiltin "(_ sign_extend 17)"} $sext.bv16.bv33(i: bv16) returns (bv33);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) returns (bv40);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) returns (bv48);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) returns (bv56);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) returns (bv64);
function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) returns (bv80);
function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) returns (bv88);
function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) returns (bv96);
function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) returns (bv128);
function {:bvbuiltin "(_ sign_extend 144)"} $sext.bv16.bv160(i: bv16) returns (bv160);
function {:bvbuiltin "(_ sign_extend 240)"} $sext.bv16.bv256(i: bv16) returns (bv256);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) returns (bv32);
function {:bvbuiltin "(_ sign_extend 9)"} $sext.bv24.bv33(i: bv24) returns (bv33);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) returns (bv40);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) returns (bv48);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) returns (bv56);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) returns (bv64);
function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) returns (bv80);
function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) returns (bv88);
function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) returns (bv96);
function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) returns (bv128);
function {:bvbuiltin "(_ sign_extend 136)"} $sext.bv24.bv160(i: bv24) returns (bv160);
function {:bvbuiltin "(_ sign_extend 232)"} $sext.bv24.bv256(i: bv24) returns (bv256);
function {:bvbuiltin "(_ sign_extend 1)"} $sext.bv32.bv33(i: bv32) returns (bv33);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) returns (bv40);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) returns (bv48);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) returns (bv56);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) returns (bv64);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) returns (bv80);
function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) returns (bv88);
function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) returns (bv96);
function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) returns (bv128);
function {:bvbuiltin "(_ sign_extend 128)"} $sext.bv32.bv160(i: bv32) returns (bv160);
function {:bvbuiltin "(_ sign_extend 224)"} $sext.bv32.bv256(i: bv32) returns (bv256);
function {:bvbuiltin "(_ sign_extend 7)"} $sext.bv33.bv40(i: bv33) returns (bv40);
function {:bvbuiltin "(_ sign_extend 15)"} $sext.bv33.bv48(i: bv33) returns (bv48);
function {:bvbuiltin "(_ sign_extend 23)"} $sext.bv33.bv56(i: bv33) returns (bv56);
function {:bvbuiltin "(_ sign_extend 31)"} $sext.bv33.bv64(i: bv33) returns (bv64);
function {:bvbuiltin "(_ sign_extend 47)"} $sext.bv33.bv80(i: bv33) returns (bv80);
function {:bvbuiltin "(_ sign_extend 55)"} $sext.bv33.bv88(i: bv33) returns (bv88);
function {:bvbuiltin "(_ sign_extend 63)"} $sext.bv33.bv96(i: bv33) returns (bv96);
function {:bvbuiltin "(_ sign_extend 95)"} $sext.bv33.bv128(i: bv33) returns (bv128);
function {:bvbuiltin "(_ sign_extend 127)"} $sext.bv33.bv160(i: bv33) returns (bv160);
function {:bvbuiltin "(_ sign_extend 223)"} $sext.bv33.bv256(i: bv33) returns (bv256);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) returns (bv48);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) returns (bv56);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) returns (bv64);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) returns (bv80);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) returns (bv88);
function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) returns (bv96);
function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) returns (bv128);
function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv40.bv160(i: bv40) returns (bv160);
function {:bvbuiltin "(_ sign_extend 216)"} $sext.bv40.bv256(i: bv40) returns (bv256);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) returns (bv56);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) returns (bv64);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) returns (bv80);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) returns (bv88);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) returns (bv96);
function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) returns (bv128);
function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv48.bv160(i: bv48) returns (bv160);
function {:bvbuiltin "(_ sign_extend 208)"} $sext.bv48.bv256(i: bv48) returns (bv256);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) returns (bv64);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) returns (bv80);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) returns (bv88);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) returns (bv96);
function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) returns (bv128);
function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv56.bv160(i: bv56) returns (bv160);
function {:bvbuiltin "(_ sign_extend 200)"} $sext.bv56.bv256(i: bv56) returns (bv256);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) returns (bv80);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) returns (bv88);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) returns (bv96);
function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) returns (bv128);
function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv64.bv160(i: bv64) returns (bv160);
function {:bvbuiltin "(_ sign_extend 192)"} $sext.bv64.bv256(i: bv64) returns (bv256);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) returns (bv88);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) returns (bv96);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) returns (bv128);
function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv80.bv160(i: bv80) returns (bv160);
function {:bvbuiltin "(_ sign_extend 176)"} $sext.bv80.bv256(i: bv80) returns (bv256);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) returns (bv96);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) returns (bv128);
function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv88.bv160(i: bv88) returns (bv160);
function {:bvbuiltin "(_ sign_extend 168)"} $sext.bv88.bv256(i: bv88) returns (bv256);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) returns (bv128);
function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv96.bv160(i: bv96) returns (bv160);
function {:bvbuiltin "(_ sign_extend 160)"} $sext.bv96.bv256(i: bv96) returns (bv256);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv128.bv160(i: bv128) returns (bv160);
function {:bvbuiltin "(_ sign_extend 128)"} $sext.bv128.bv256(i: bv128) returns (bv256);
function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv160.bv256(i: bv160) returns (bv256);
function {:bvbuiltin "(_ zero_extend 4)"} $zext.bv1.bv5(i: bv1) returns (bv5);
function {:bvbuiltin "(_ zero_extend 5)"} $zext.bv1.bv6(i: bv1) returns (bv6);
function {:bvbuiltin "(_ zero_extend 7)"} $zext.bv1.bv8(i: bv1) returns (bv8);
function {:bvbuiltin "(_ zero_extend 15)"} $zext.bv1.bv16(i: bv1) returns (bv16);
function {:bvbuiltin "(_ zero_extend 23)"} $zext.bv1.bv24(i: bv1) returns (bv24);
function {:bvbuiltin "(_ zero_extend 31)"} $zext.bv1.bv32(i: bv1) returns (bv32);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv1.bv33(i: bv1) returns (bv33);
function {:bvbuiltin "(_ zero_extend 39)"} $zext.bv1.bv40(i: bv1) returns (bv40);
function {:bvbuiltin "(_ zero_extend 47)"} $zext.bv1.bv48(i: bv1) returns (bv48);
function {:bvbuiltin "(_ zero_extend 55)"} $zext.bv1.bv56(i: bv1) returns (bv56);
function {:bvbuiltin "(_ zero_extend 63)"} $zext.bv1.bv64(i: bv1) returns (bv64);
function {:bvbuiltin "(_ zero_extend 79)"} $zext.bv1.bv80(i: bv1) returns (bv80);
function {:bvbuiltin "(_ zero_extend 87)"} $zext.bv1.bv88(i: bv1) returns (bv88);
function {:bvbuiltin "(_ zero_extend 95)"} $zext.bv1.bv96(i: bv1) returns (bv96);
function {:bvbuiltin "(_ zero_extend 127)"} $zext.bv1.bv128(i: bv1) returns (bv128);
function {:bvbuiltin "(_ zero_extend 159)"} $zext.bv1.bv160(i: bv1) returns (bv160);
function {:bvbuiltin "(_ zero_extend 255)"} $zext.bv1.bv256(i: bv1) returns (bv256);
function {:bvbuiltin "(_ zero_extend 1)"} $zext.bv5.bv6(i: bv5) returns (bv6);
function {:bvbuiltin "(_ zero_extend 3)"} $zext.bv5.bv8(i: bv5) returns (bv8);
function {:bvbuiltin "(_ zero_extend 11)"} $zext.bv5.bv16(i: bv5) returns (bv16);
function {:bvbuiltin "(_ zero_extend 19)"} $zext.bv5.bv24(i: bv5) returns (bv24);
function {:bvbuiltin "(_ zero_extend 27)"} $zext.bv5.bv32(i: bv5) returns (bv32);
function {:bvbuiltin "(_ zero_extend 28)"} $zext.bv5.bv33(i: bv5) returns (bv33);
function {:bvbuiltin "(_ zero_extend 35)"} $zext.bv5.bv40(i: bv5) returns (bv40);
function {:bvbuiltin "(_ zero_extend 43)"} $zext.bv5.bv48(i: bv5) returns (bv48);
function {:bvbuiltin "(_ zero_extend 51)"} $zext.bv5.bv56(i: bv5) returns (bv56);
function {:bvbuiltin "(_ zero_extend 59)"} $zext.bv5.bv64(i: bv5) returns (bv64);
function {:bvbuiltin "(_ zero_extend 75)"} $zext.bv5.bv80(i: bv5) returns (bv80);
function {:bvbuiltin "(_ zero_extend 83)"} $zext.bv5.bv88(i: bv5) returns (bv88);
function {:bvbuiltin "(_ zero_extend 91)"} $zext.bv5.bv96(i: bv5) returns (bv96);
function {:bvbuiltin "(_ zero_extend 123)"} $zext.bv5.bv128(i: bv5) returns (bv128);
function {:bvbuiltin "(_ zero_extend 155)"} $zext.bv5.bv160(i: bv5) returns (bv160);
function {:bvbuiltin "(_ zero_extend 251)"} $zext.bv5.bv256(i: bv5) returns (bv256);
function {:bvbuiltin "(_ zero_extend 2)"} $zext.bv6.bv8(i: bv6) returns (bv8);
function {:bvbuiltin "(_ zero_extend 10)"} $zext.bv6.bv16(i: bv6) returns (bv16);
function {:bvbuiltin "(_ zero_extend 18)"} $zext.bv6.bv24(i: bv6) returns (bv24);
function {:bvbuiltin "(_ zero_extend 26)"} $zext.bv6.bv32(i: bv6) returns (bv32);
function {:bvbuiltin "(_ zero_extend 27)"} $zext.bv6.bv33(i: bv6) returns (bv33);
function {:bvbuiltin "(_ zero_extend 34)"} $zext.bv6.bv40(i: bv6) returns (bv40);
function {:bvbuiltin "(_ zero_extend 42)"} $zext.bv6.bv48(i: bv6) returns (bv48);
function {:bvbuiltin "(_ zero_extend 50)"} $zext.bv6.bv56(i: bv6) returns (bv56);
function {:bvbuiltin "(_ zero_extend 58)"} $zext.bv6.bv64(i: bv6) returns (bv64);
function {:bvbuiltin "(_ zero_extend 74)"} $zext.bv6.bv80(i: bv6) returns (bv80);
function {:bvbuiltin "(_ zero_extend 82)"} $zext.bv6.bv88(i: bv6) returns (bv88);
function {:bvbuiltin "(_ zero_extend 90)"} $zext.bv6.bv96(i: bv6) returns (bv96);
function {:bvbuiltin "(_ zero_extend 122)"} $zext.bv6.bv128(i: bv6) returns (bv128);
function {:bvbuiltin "(_ zero_extend 154)"} $zext.bv6.bv160(i: bv6) returns (bv160);
function {:bvbuiltin "(_ zero_extend 250)"} $zext.bv6.bv256(i: bv6) returns (bv256);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) returns (bv16);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) returns (bv24);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) returns (bv32);
function {:bvbuiltin "(_ zero_extend 25)"} $zext.bv8.bv33(i: bv8) returns (bv33);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) returns (bv40);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) returns (bv48);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) returns (bv56);
function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) returns (bv64);
function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) returns (bv80);
function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) returns (bv88);
function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) returns (bv96);
function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) returns (bv128);
function {:bvbuiltin "(_ zero_extend 152)"} $zext.bv8.bv160(i: bv8) returns (bv160);
function {:bvbuiltin "(_ zero_extend 248)"} $zext.bv8.bv256(i: bv8) returns (bv256);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) returns (bv24);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) returns (bv32);
function {:bvbuiltin "(_ zero_extend 17)"} $zext.bv16.bv33(i: bv16) returns (bv33);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) returns (bv40);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) returns (bv48);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) returns (bv56);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) returns (bv64);
function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) returns (bv80);
function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) returns (bv88);
function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) returns (bv96);
function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) returns (bv128);
function {:bvbuiltin "(_ zero_extend 144)"} $zext.bv16.bv160(i: bv16) returns (bv160);
function {:bvbuiltin "(_ zero_extend 240)"} $zext.bv16.bv256(i: bv16) returns (bv256);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) returns (bv32);
function {:bvbuiltin "(_ zero_extend 9)"} $zext.bv24.bv33(i: bv24) returns (bv33);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) returns (bv40);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) returns (bv48);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) returns (bv56);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) returns (bv64);
function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) returns (bv80);
function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) returns (bv88);
function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) returns (bv96);
function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) returns (bv128);
function {:bvbuiltin "(_ zero_extend 136)"} $zext.bv24.bv160(i: bv24) returns (bv160);
function {:bvbuiltin "(_ zero_extend 232)"} $zext.bv24.bv256(i: bv24) returns (bv256);
function {:bvbuiltin "(_ zero_extend 1)"} $zext.bv32.bv33(i: bv32) returns (bv33);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) returns (bv40);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) returns (bv48);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) returns (bv56);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) returns (bv64);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) returns (bv80);
function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) returns (bv88);
function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) returns (bv96);
function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) returns (bv128);
function {:bvbuiltin "(_ zero_extend 128)"} $zext.bv32.bv160(i: bv32) returns (bv160);
function {:bvbuiltin "(_ zero_extend 224)"} $zext.bv32.bv256(i: bv32) returns (bv256);
function {:bvbuiltin "(_ zero_extend 7)"} $zext.bv33.bv40(i: bv33) returns (bv40);
function {:bvbuiltin "(_ zero_extend 15)"} $zext.bv33.bv48(i: bv33) returns (bv48);
function {:bvbuiltin "(_ zero_extend 23)"} $zext.bv33.bv56(i: bv33) returns (bv56);
function {:bvbuiltin "(_ zero_extend 31)"} $zext.bv33.bv64(i: bv33) returns (bv64);
function {:bvbuiltin "(_ zero_extend 47)"} $zext.bv33.bv80(i: bv33) returns (bv80);
function {:bvbuiltin "(_ zero_extend 55)"} $zext.bv33.bv88(i: bv33) returns (bv88);
function {:bvbuiltin "(_ zero_extend 63)"} $zext.bv33.bv96(i: bv33) returns (bv96);
function {:bvbuiltin "(_ zero_extend 95)"} $zext.bv33.bv128(i: bv33) returns (bv128);
function {:bvbuiltin "(_ zero_extend 127)"} $zext.bv33.bv160(i: bv33) returns (bv160);
function {:bvbuiltin "(_ zero_extend 223)"} $zext.bv33.bv256(i: bv33) returns (bv256);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) returns (bv48);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) returns (bv56);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) returns (bv64);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) returns (bv80);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) returns (bv88);
function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) returns (bv96);
function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) returns (bv128);
function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv40.bv160(i: bv40) returns (bv160);
function {:bvbuiltin "(_ zero_extend 216)"} $zext.bv40.bv256(i: bv40) returns (bv256);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv48.bv56(i: bv48) returns (bv56);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) returns (bv64);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) returns (bv80);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) returns (bv88);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) returns (bv96);
function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) returns (bv128);
function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv48.bv160(i: bv48) returns (bv160);
function {:bvbuiltin "(_ zero_extend 208)"} $zext.bv48.bv256(i: bv48) returns (bv256);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) returns (bv64);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) returns (bv80);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) returns (bv88);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) returns (bv96);
function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) returns (bv128);
function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv56.bv160(i: bv56) returns (bv160);
function {:bvbuiltin "(_ zero_extend 200)"} $zext.bv56.bv256(i: bv56) returns (bv256);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) returns (bv80);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) returns (bv88);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) returns (bv96);
function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) returns (bv128);
function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv64.bv160(i: bv64) returns (bv160);
function {:bvbuiltin "(_ zero_extend 192)"} $zext.bv64.bv256(i: bv64) returns (bv256);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) returns (bv88);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) returns (bv96);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) returns (bv128);
function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv80.bv160(i: bv80) returns (bv160);
function {:bvbuiltin "(_ zero_extend 176)"} $zext.bv80.bv256(i: bv80) returns (bv256);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) returns (bv96);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) returns (bv128);
function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv88.bv160(i: bv88) returns (bv160);
function {:bvbuiltin "(_ zero_extend 168)"} $zext.bv88.bv256(i: bv88) returns (bv256);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) returns (bv128);
function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv96.bv160(i: bv96) returns (bv160);
function {:bvbuiltin "(_ zero_extend 160)"} $zext.bv96.bv256(i: bv96) returns (bv256);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv128.bv160(i: bv128) returns (bv160);
function {:bvbuiltin "(_ zero_extend 128)"} $zext.bv128.bv256(i: bv128) returns (bv256);
function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv160.bv256(i: bv160) returns (bv256);
function $extractvalue.bv1(p: ref, i: int) returns (bv1);
function $extractvalue.bv5(p: ref, i: int) returns (bv5);
function $extractvalue.bv6(p: ref, i: int) returns (bv6);
function $extractvalue.bv8(p: ref, i: int) returns (bv8);
function $extractvalue.bv16(p: ref, i: int) returns (bv16);
function $extractvalue.bv24(p: ref, i: int) returns (bv24);
function $extractvalue.bv32(p: ref, i: int) returns (bv32);
function $extractvalue.bv33(p: ref, i: int) returns (bv33);
function $extractvalue.bv40(p: ref, i: int) returns (bv40);
function $extractvalue.bv48(p: ref, i: int) returns (bv48);
function $extractvalue.bv56(p: ref, i: int) returns (bv56);
function $extractvalue.bv64(p: ref, i: int) returns (bv64);
function $extractvalue.bv80(p: ref, i: int) returns (bv80);
function $extractvalue.bv88(p: ref, i: int) returns (bv88);
function $extractvalue.bv96(p: ref, i: int) returns (bv96);
function $extractvalue.bv128(p: ref, i: int) returns (bv128);
function $extractvalue.bv160(p: ref, i: int) returns (bv160);
function $extractvalue.bv256(p: ref, i: int) returns (bv256);
// Pointer arithmetic operations
function {:inline} $add.ref(p1: ref, p2: ref) returns (ref) { $add.i64(p1, p2) }
function {:inline} $sub.ref(p1: ref, p2: ref) returns (ref) { $sub.i64(p1, p2) }
function {:inline} $mul.ref(p1: ref, p2: ref) returns (ref) { $mul.i64(p1, p2) }

// Pointer predicates
function {:inline} $eq.ref.bool(p1: ref, p2: ref) returns (bool) { (p1 == p2) }
function {:inline} $eq.ref(p1: ref, p2: ref) returns (bv1) { (if $eq.ref.bool(p1, p2) then 1bv1 else 0bv1) }
function {:inline} $ne.ref.bool(p1: ref, p2: ref) returns (bool) { (p1 != p2) }
function {:inline} $ne.ref(p1: ref, p2: ref) returns (bv1) { (if $ne.ref.bool(p1, p2) then 1bv1 else 0bv1) }
function {:inline} $ugt.ref.bool(p1: ref, p2: ref) returns (bool) { (p1 > p2) }
function {:inline} $ugt.ref(p1: ref, p2: ref) returns (bv1) { (if $ugt.ref.bool(p1, p2) then 1bv1 else 0bv1) }
function {:inline} $uge.ref.bool(p1: ref, p2: ref) returns (bool) { (p1 >= p2) }
function {:inline} $uge.ref(p1: ref, p2: ref) returns (bv1) { (if $uge.ref.bool(p1, p2) then 1bv1 else 0bv1) }
function {:inline} $ult.ref.bool(p1: ref, p2: ref) returns (bool) { (p1 < p2) }
function {:inline} $ult.ref(p1: ref, p2: ref) returns (bv1) { (if $ult.ref.bool(p1, p2) then 1bv1 else 0bv1) }
function {:inline} $ule.ref.bool(p1: ref, p2: ref) returns (bool) { (p1 <= p2) }
function {:inline} $ule.ref(p1: ref, p2: ref) returns (bv1) { (if $ule.ref.bool(p1, p2) then 1bv1 else 0bv1) }
function {:inline} $sgt.ref.bool(p1: ref, p2: ref) returns (bool) { (p1 > p2) }
function {:inline} $sgt.ref(p1: ref, p2: ref) returns (bv1) { (if $sgt.ref.bool(p1, p2) then 1bv1 else 0bv1) }
function {:inline} $sge.ref.bool(p1: ref, p2: ref) returns (bool) { (p1 >= p2) }
function {:inline} $sge.ref(p1: ref, p2: ref) returns (bv1) { (if $sge.ref.bool(p1, p2) then 1bv1 else 0bv1) }
function {:inline} $slt.ref.bool(p1: ref, p2: ref) returns (bool) { (p1 < p2) }
function {:inline} $slt.ref(p1: ref, p2: ref) returns (bv1) { (if $slt.ref.bool(p1, p2) then 1bv1 else 0bv1) }
function {:inline} $sle.ref.bool(p1: ref, p2: ref) returns (bool) { (p1 <= p2) }
function {:inline} $sle.ref(p1: ref, p2: ref) returns (bv1) { (if $sle.ref.bool(p1, p2) then 1bv1 else 0bv1) }

// Pointer load/store operations
// Bytewise pointer storage
function {:inline} $load.bytes.ref(M: [ref] bv8, p: ref) returns (ref) { $i2p.bv64.ref($load.bytes.bv64(M, p)) }
function {:inline} $store.bytes.ref(M: [ref] bv8, p: ref, p1: ref) returns ([ref] bv8) { $store.bytes.bv64(M, p, $p2i.ref.bv64(p1)) }
function {:inline} $load.ref(M: [ref] ref, p: ref) returns (ref) { M[p] }
function {:inline} $store.ref(M: [ref] ref, p: ref, i: ref) returns ([ref] ref) { M[p := i] }

// Pointer conversion
function {:inline} $bitcast.ref.ref(p: ref) returns (ref) { p }
function $extractvalue.ref(p: ref, i: int) returns (ref);
// Pointer-number conversion
function {:inline} $p2i.ref.bv8(p: ref) returns (bv8) { $trunc.bv64.bv8($int2bv.64(p)) }
function {:inline} $i2p.bv8.ref(i: bv8) returns (ref) { $bv2int.64($zext.bv8.bv64(i)) }
function {:inline} $p2i.ref.bv16(p: ref) returns (bv16) { $trunc.bv64.bv16($int2bv.64(p)) }
function {:inline} $i2p.bv16.ref(i: bv16) returns (ref) { $bv2int.64($zext.bv16.bv64(i)) }
function {:inline} $p2i.ref.bv32(p: ref) returns (bv32) { $trunc.bv64.bv32($int2bv.64(p)) }
function {:inline} $i2p.bv32.ref(i: bv32) returns (ref) { $bv2int.64($zext.bv32.bv64(i)) }
function {:inline} $p2i.ref.bv64(p: ref) returns (bv64) { $int2bv.64(p) }
function {:inline} $i2p.bv64.ref(i: bv64) returns (ref) { $bv2int.64(i) }

function $fp(ipart: int, fpart: int, epart: int) returns (float);
// Floating-point arithmetic operations
function $abs.float(f: float) returns (float);
function $round.float(f: float) returns (float);
function $sqrt.float(f: float) returns (float);
function $fadd.float(f1: float, f2: float) returns (float);
function $fsub.float(f1: float, f2: float) returns (float);
function $fmul.float(f1: float, f2: float) returns (float);
function $fdiv.float(f1: float, f2: float) returns (float);
function $frem.float(f1: float, f2: float) returns (float);
function $min.float(f1: float, f2: float) returns (float);
function $max.float(f1: float, f2: float) returns (float);
function $fma.float(f1: float, f2: float, f3: float) returns (float);
function $fneg.float(f: float) returns (float);
// Floating-point predicates
function $foeq.float.bool(f1: float, f2: float) returns (bool);
function $fole.float.bool(f1: float, f2: float) returns (bool);
function $folt.float.bool(f1: float, f2: float) returns (bool);
function $foge.float.bool(f1: float, f2: float) returns (bool);
function $fogt.float.bool(f1: float, f2: float) returns (bool);
function $fone.float.bool(f1: float, f2: float) returns (bool);
function $ford.float.bool(f1: float, f2: float) returns (bool);
function $fueq.float.bool(f1: float, f2: float) returns (bool);
function $fugt.float.bool(f1: float, f2: float) returns (bool);
function $fuge.float.bool(f1: float, f2: float) returns (bool);
function $fult.float.bool(f1: float, f2: float) returns (bool);
function $fule.float.bool(f1: float, f2: float) returns (bool);
function $fune.float.bool(f1: float, f2: float) returns (bool);
function $funo.float.bool(f1: float, f2: float) returns (bool);
function $ffalse.float.bool(f1: float, f2: float) returns (bool);
function $ftrue.float.bool(f1: float, f2: float) returns (bool);
// Floating-point/integer conversion
function $bitcast.float.bv8(f: float) returns (bv8);
function $bitcast.float.bv16(f: float) returns (bv16);
function $bitcast.float.bv32(f: float) returns (bv32);
function $bitcast.float.bv64(f: float) returns (bv64);
function $bitcast.float.bv80(f: float) returns (bv80);
function $bitcast.bv8.float(i: bv8) returns (float);
function $bitcast.bv16.float(i: bv16) returns (float);
function $bitcast.bv32.float(i: bv32) returns (float);
function $bitcast.bv64.float(i: bv64) returns (float);
function $bitcast.bv80.float(i: bv80) returns (float);
function $fp2si.float.bv1(f: float) returns (bv1);
function $fp2si.float.bv5(f: float) returns (bv5);
function $fp2si.float.bv6(f: float) returns (bv6);
function $fp2si.float.bv8(f: float) returns (bv8);
function $fp2si.float.bv16(f: float) returns (bv16);
function $fp2si.float.bv24(f: float) returns (bv24);
function $fp2si.float.bv32(f: float) returns (bv32);
function $fp2si.float.bv33(f: float) returns (bv33);
function $fp2si.float.bv40(f: float) returns (bv40);
function $fp2si.float.bv48(f: float) returns (bv48);
function $fp2si.float.bv56(f: float) returns (bv56);
function $fp2si.float.bv64(f: float) returns (bv64);
function $fp2si.float.bv80(f: float) returns (bv80);
function $fp2si.float.bv88(f: float) returns (bv88);
function $fp2si.float.bv96(f: float) returns (bv96);
function $fp2si.float.bv128(f: float) returns (bv128);
function $fp2si.float.bv160(f: float) returns (bv160);
function $fp2si.float.bv256(f: float) returns (bv256);
function $fp2ui.float.bv1(f: float) returns (bv1);
function $fp2ui.float.bv5(f: float) returns (bv5);
function $fp2ui.float.bv6(f: float) returns (bv6);
function $fp2ui.float.bv8(f: float) returns (bv8);
function $fp2ui.float.bv16(f: float) returns (bv16);
function $fp2ui.float.bv24(f: float) returns (bv24);
function $fp2ui.float.bv32(f: float) returns (bv32);
function $fp2ui.float.bv33(f: float) returns (bv33);
function $fp2ui.float.bv40(f: float) returns (bv40);
function $fp2ui.float.bv48(f: float) returns (bv48);
function $fp2ui.float.bv56(f: float) returns (bv56);
function $fp2ui.float.bv64(f: float) returns (bv64);
function $fp2ui.float.bv80(f: float) returns (bv80);
function $fp2ui.float.bv88(f: float) returns (bv88);
function $fp2ui.float.bv96(f: float) returns (bv96);
function $fp2ui.float.bv128(f: float) returns (bv128);
function $fp2ui.float.bv160(f: float) returns (bv160);
function $fp2ui.float.bv256(f: float) returns (bv256);
function $si2fp.bv1.float(i: bv1) returns (float);
function $si2fp.bv5.float(i: bv5) returns (float);
function $si2fp.bv6.float(i: bv6) returns (float);
function $si2fp.bv8.float(i: bv8) returns (float);
function $si2fp.bv16.float(i: bv16) returns (float);
function $si2fp.bv24.float(i: bv24) returns (float);
function $si2fp.bv32.float(i: bv32) returns (float);
function $si2fp.bv33.float(i: bv33) returns (float);
function $si2fp.bv40.float(i: bv40) returns (float);
function $si2fp.bv48.float(i: bv48) returns (float);
function $si2fp.bv56.float(i: bv56) returns (float);
function $si2fp.bv64.float(i: bv64) returns (float);
function $si2fp.bv80.float(i: bv80) returns (float);
function $si2fp.bv88.float(i: bv88) returns (float);
function $si2fp.bv96.float(i: bv96) returns (float);
function $si2fp.bv128.float(i: bv128) returns (float);
function $si2fp.bv160.float(i: bv160) returns (float);
function $si2fp.bv256.float(i: bv256) returns (float);
function $ui2fp.bv1.float(i: bv1) returns (float);
function $ui2fp.bv5.float(i: bv5) returns (float);
function $ui2fp.bv6.float(i: bv6) returns (float);
function $ui2fp.bv8.float(i: bv8) returns (float);
function $ui2fp.bv16.float(i: bv16) returns (float);
function $ui2fp.bv24.float(i: bv24) returns (float);
function $ui2fp.bv32.float(i: bv32) returns (float);
function $ui2fp.bv33.float(i: bv33) returns (float);
function $ui2fp.bv40.float(i: bv40) returns (float);
function $ui2fp.bv48.float(i: bv48) returns (float);
function $ui2fp.bv56.float(i: bv56) returns (float);
function $ui2fp.bv64.float(i: bv64) returns (float);
function $ui2fp.bv80.float(i: bv80) returns (float);
function $ui2fp.bv88.float(i: bv88) returns (float);
function $ui2fp.bv96.float(i: bv96) returns (float);
function $ui2fp.bv128.float(i: bv128) returns (float);
function $ui2fp.bv160.float(i: bv160) returns (float);
function $ui2fp.bv256.float(i: bv256) returns (float);
// Floating-point conversion
function $fpext.float.float(f: float) returns (float);
function $fptrunc.float.float(f: float) returns (float);
// Floating-point load/store operations
function {:inline} $load.float(M: [ref] float, p: ref) returns (float) { M[p] }
function {:inline} $store.float(M: [ref] float, p: ref, f: float) returns ([ref] float) { M[p := f] }
function {:inline} $load.bytes.float(M: [ref] bv8, p: ref) returns (float) { $bitcast.bv8.float(M[p]) }
function {:inline} $store.bytes.float(M: [ref] bv8, p: ref, f: float) returns ([ref] bv8) { M[p := $bitcast.float.bv8(f)] }
function $extractvalue.float(p: ref, i: int) returns (float);
const {:allocSize 2} .str: ref;
axiom (.str == $sub.ref(0, 1026));
const {:allocSize 18} {:count 18} .str.1: ref;
axiom (.str.1 == $sub.ref(0, 2068));
const {:allocSize 12} {:count 12} .str.2: ref;
axiom (.str.2 == $sub.ref(0, 3104));
const {:allocSize 40} {:count 10} switch.table.ssl3_accept: ref;
axiom (switch.table.ssl3_accept == $sub.ref(0, 4168));
const {:allocSize 40} {:count 10} switch.table.ssl3_accept.3: ref;
axiom (switch.table.ssl3_accept.3 == $sub.ref(0, 5232));
const reach_error: ref;
axiom (reach_error == $sub.ref(0, 6264));
procedure  reach_error()
{
$bb0:
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 3, 22} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 3, 22} true;
  assume {:verifier.code 0} true;
  call __assert_fail(.str, .str.1, 3bv32, .str.2);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 3, 22} true;
  assume {:verifier.code 0} true;
  assume false;
}
const __assert_fail: ref;
axiom (__assert_fail == $sub.ref(0, 7296));
procedure  __assert_fail($p0: ref, $p1: ref, $i2: bv32, $p3: ref);
const ssl3_accept: ref;
axiom (ssl3_accept == $sub.ref(0, 8328));
procedure  ssl3_accept($i0: bv32)
  returns ($r: bv32)
{
  var $i1: bv32;
  var $i2: bv32;
  var $i3: bv32;
  var $i4: bv32;
  var $i5: bv32;
  var $i6: bv32;
  var $i7: bv32;
  var $i8: bv32;
  var $i9: bv32;
  var $i10: bv32;
  var $i11: bv32;
  var $i12: bv32;
  var $i13: bv32;
  var $i14: bv32;
  var $i15: bv32;
  var $i16: bv32;
  var $i17: bv32;
  var $i18: bv32;
  var $i19: bv64;
  var $i20: bv32;
  var $i21: bv32;
  var $i22: bv32;
  var $i23: bv32;
  var $i24: bv32;
  var $i25: bv32;
  var $i26: bv64;
  var $i27: bv32;
  var $i28: bv32;
  var $i29: bv32;
  var $i30: bv1;
  var $i31: bv1;
  var $i32: bv1;
  var $i33: bv1;
  var $i35: bv1;
  var $i36: bv1;
  var $i37: bv1;
  var $i38: bv1;
  var $i39: bv1;
  var $i40: bv1;
  var $i41: bv1;
  var $i42: bv1;
  var $i43: bv1;
  var $i44: bv1;
  var $i45: bv1;
  var $i46: bv1;
  var $i47: bv32;
  var $i48: bv1;
  var $i49: bv1;
  var $i50: bv32;
  var $i51: bv32;
  var $i52: bv1;
  var $i53: bv1;
  var $i54: bv32;
  var $i55: bv1;
  var $i56: bv1;
  var $i57: bv64;
  var $i58: bv32;
  var $i59: bv32;
  var $i60: bv32;
  var $i61: bv1;
  var $i62: bv1;
  var $i63: bv1;
  var $i64: bv1;
  var $i65: bv1;
  var $i66: bv1;
  var $i67: bv1;
  var $i68: bv1;
  var $i69: bv1;
  var $i70: bv32;
  var $i71: bv1;
  var $i72: bv1;
  var $i73: bv1;
  var $i79: bv32;
  var $i80: bv1;
  var $i81: bv32;
  var $i82: bv32;
  var $i83: bv32;
  var $i84: bv32;
  var $i85: bv1;
  var $i86: bv1;
  var $i87: bv1;
  var $i88: bv1;
  var $i89: bv1;
  var $i90: bv1;
  var $i91: bv1;
  var $i92: bv32;
  var $i93: bv32;
  var $i94: bv32;
  var $i95: bv32;
  var $i96: bv1;
  var $i97: bv1;
  var $i98: bv1;
  var $i99: bv1;
  var $i100: bv1;
  var $i101: bv1;
  var $i102: bv1;
  var $i103: bv1;
  var $i104: bv1;
  var $i105: bv32;
  var $i106: bv32;
  var $i107: bv1;
  var $i108: bv32;
  var $i109: bv1;
  var $i110: bv32;
  var $i111: bv1;
  var $i112: bv32;
  var $i113: bv1;
  var $i114: bv1;
  var $i115: bv32;
  var $i116: bv32;
  var $i117: bv1;
  var $i118: bv32;
  var $i119: bv1;
  var $i120: bv1;
  var $i121: bv1;
  var $i122: bv1;
  var $i123: bv32;
  var $i124: bv1;
  var $i125: bv32;
  var $i126: bv1;
  var $i127: bv32;
  var $i128: bv1;
  var $i129: bv32;
  var $i130: bv1;
  var $i131: bv32;
  var $i132: bv1;
  var $i133: bv32;
  var $i134: bv1;
  var $i135: bv1;
  var $i136: bv32;
  var $i137: bv1;
  var $i138: bv32;
  var $i139: bv1;
  var $i140: bv1;
  var $i141: bv32;
  var $i142: bv1;
  var $i143: bv32;
  var $i144: bv1;
  var $i145: bv32;
  var $i146: bv1;
  var $i147: bv32;
  var $i148: bv1;
  var $i149: bv32;
  var $i150: bv1;
  var $i151: bv32;
  var $i152: bv1;
  var $i153: bv32;
  var $i154: bv1;
  var $i155: bv1;
  var $i156: bv1;
  var $i157: bv1;
  var $i158: bv1;
  var $i159: bv1;
  var $i160: bv1;
  var $i161: bv1;
  var $i162: bv1;
  var $i163: bv32;
  var $i164: bv1;
  var $i165: bv32;
  var $i166: bv32;
  var $i167: bv1;
  var $i169: bv16;
  var $i170: bv16;
  var $i171: bv16;
  var $i172: bv1;
  var $i173: bv64;
  var $p174: ref;
  var $i175: bv32;
  var $i168: bv32;
  var $i176: bv1;
  var $i177: bv1;
  var $i178: bv32;
  var $i179: bv32;
  var $i180: bv1;
  var $i182: bv16;
  var $i183: bv16;
  var $i184: bv16;
  var $i185: bv1;
  var $i186: bv64;
  var $p187: ref;
  var $i188: bv32;
  var $i181: bv32;
  var $i189: bv1;
  var $i74: bv32;
  var $i75: bv64;
  var $i76: bv32;
  var $i77: bv32;
  var $i78: bv32;
  var $i190: bv32;
  var $i191: bv1;
  var $i192: bv1;
  var $i193: bv32;
  var $i194: bv1;
  var $i195: bv32;
  var $i34: bv32;
$bb0:
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 13, 26} true;
  assume {:verifier.code 1} true;
  call {:cexpr "ssl3_accept:arg:initial_state"} boogie_si_record_bv32($i0);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 13, 26} true;
  assume {:verifier.code 1} true;
  call $i1 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i1);
  call {:cexpr "s__info_callback"} boogie_si_record_bv32($i1);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 14, 25} true;
  assume {:verifier.code 1} true;
  call $i2 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i2);
  call {:cexpr "s__in_handshake"} boogie_si_record_bv32($i2);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 18, 20} true;
  assume {:verifier.code 1} true;
  call $i3 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i3);
  call {:cexpr "s__version"} boogie_si_record_bv32($i3);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 21, 16} true;
  assume {:verifier.code 1} true;
  call $i4 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i4);
  call {:cexpr "s__hit"} boogie_si_record_bv32($i4);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 24, 18} true;
  assume {:verifier.code 1} true;
  call $i5 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i5);
  call {:cexpr "s__debug"} boogie_si_record_bv32($i5);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 26, 17} true;
  assume {:verifier.code 1} true;
  call $i6 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i6);
  call {:cexpr "s__cert"} boogie_si_record_bv32($i6);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 27, 20} true;
  assume {:verifier.code 1} true;
  call $i7 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i7);
  call {:cexpr "s__options"} boogie_si_record_bv32($i7);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 28, 24} true;
  assume {:verifier.code 1} true;
  call $i8 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i8);
  call {:cexpr "s__verify_mode"} boogie_si_record_bv32($i8);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 29, 26} true;
  assume {:verifier.code 1} true;
  call $i9 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i9);
  call {:cexpr "s__session__peer"} boogie_si_record_bv32($i9);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 30, 41} true;
  assume {:verifier.code 1} true;
  call $i10 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i10);
  call {:cexpr "s__cert__pkeys__AT0__privatekey"} boogie_si_record_bv32($i10);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 31, 31} true;
  assume {:verifier.code 1} true;
  call $i11 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i11);
  call {:cexpr "s__ctx__info_callback"} boogie_si_record_bv32($i11);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 32, 48} true;
  assume {:verifier.code 1} true;
  call $i12 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i12);
  call {:cexpr "s__ctx__stats__sess_accept_renegotiate"} boogie_si_record_bv32($i12);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 33, 36} true;
  assume {:verifier.code 1} true;
  call $i13 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i13);
  call {:cexpr "s__ctx__stats__sess_accept"} boogie_si_record_bv32($i13);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 34, 41} true;
  assume {:verifier.code 1} true;
  call $i14 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i14);
  call {:cexpr "s__ctx__stats__sess_accept_good"} boogie_si_record_bv32($i14);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 36, 35} true;
  assume {:verifier.code 1} true;
  call $i15 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i15);
  call {:cexpr "s__s3__tmp__reuse_message"} boogie_si_record_bv32($i15);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 38, 32} true;
  assume {:verifier.code 1} true;
  call $i16 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i16);
  call {:cexpr "s__s3__tmp__new_cipher"} boogie_si_record_bv32($i16);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 39, 44} true;
  assume {:verifier.code 1} true;
  call $i17 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i17);
  call {:cexpr "s__s3__tmp__new_cipher__algorithms"} boogie_si_record_bv32($i17);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 41, 47} true;
  assume {:verifier.code 1} true;
  call $i18 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i18);
  call {:cexpr "s__s3__tmp__new_cipher__algo_strength"} boogie_si_record_bv32($i18);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 48, 15} true;
  assume {:verifier.code 1} true;
  call $i19 := __VERIFIER_nondet_long();
  call {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_bv64($i19);
  call {:cexpr "num1"} boogie_si_record_bv64($i19);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 54, 17} true;
  assume {:verifier.code 1} true;
  call $i20 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i20);
  call {:cexpr "tmp___1"} boogie_si_record_bv32($i20);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 55, 17} true;
  assume {:verifier.code 1} true;
  call $i21 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i21);
  call {:cexpr "tmp___2"} boogie_si_record_bv32($i21);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 56, 17} true;
  assume {:verifier.code 1} true;
  call $i22 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i22);
  call {:cexpr "tmp___3"} boogie_si_record_bv32($i22);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 57, 17} true;
  assume {:verifier.code 1} true;
  call $i23 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i23);
  call {:cexpr "tmp___4"} boogie_si_record_bv32($i23);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 58, 17} true;
  assume {:verifier.code 1} true;
  call $i24 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i24);
  call {:cexpr "tmp___5"} boogie_si_record_bv32($i24);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 59, 17} true;
  assume {:verifier.code 1} true;
  call $i25 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i25);
  call {:cexpr "tmp___6"} boogie_si_record_bv32($i25);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 61, 18} true;
  assume {:verifier.code 1} true;
  call $i26 := __VERIFIER_nondet_long();
  call {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_bv64($i26);
  call {:cexpr "tmp___8"} boogie_si_record_bv64($i26);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 62, 17} true;
  assume {:verifier.code 1} true;
  call $i27 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i27);
  call {:cexpr "tmp___9"} boogie_si_record_bv32($i27);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 63, 18} true;
  assume {:verifier.code 1} true;
  call $i28 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i28);
  call {:cexpr "tmp___10"} boogie_si_record_bv32($i28);
  call {:cexpr "ssl3_accept:arg:s__state"} boogie_si_record_bv32($i0);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 77, 9} true;
  assume {:verifier.code 1} true;
  call $i29 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i29);
  call {:cexpr "tmp"} boogie_si_record_bv32($i29);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 83, 24} true;
  assume {:verifier.code 0} true;
  $i30 := $ne.bv32($i1, 0bv32);
  assume {:verifier.code 0} true;
  $i31 := $eq.bv32($i11, 0bv32);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 83, 7} true;
  assume {:verifier.code 0} true;
  $i32 := $or.bv1($i30, $i31);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 83, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i32} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i32 == 1bv1);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 99, 15} true;
  assume {:verifier.code 0} true;
  $i33 := $eq.bv32($i6, 0bv32);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 99, 7} true;
  assume {:verifier.code 0} true;
  $i34 := $sub.bv32(0bv32, 1bv32);
  assume {:branchcond $i33} true;
  goto $bb4, $bb6;
$bb2:
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 83, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i32 == 1bv1));
  goto $bb3;
$bb3:
  assume true;
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 672, 11} true;
  assume {:verifier.code 0} true;
  call reach_error();
  assume {:verifier.code 0} true;
  assume false;
$bb4:
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 99, 7} true;
  assume {:verifier.code 0} true;
  assume ($i33 == 1bv1);
  goto $bb5;
$bb5:
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 675, 1} true;
  assume {:verifier.code 0} true;
  $r := $i34;
  $exn := false;
  return;
$bb6:
  assume !(($i33 == 1bv1));
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 0, 0} true;
  assume {:verifier.code 0} true;
  $i35 := $eq.bv32($i8, $sub.bv32(0bv32, 1bv32));
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 0, 0} true;
  assume {:verifier.code 0} true;
  $i36 := $eq.bv32($i9, 0bv32);
  assume {:verifier.code 0} true;
  $i37 := $eq.bv32($i8, $sub.bv32(0bv32, 4bv32));
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 0, 0} true;
  assume {:verifier.code 0} true;
  $i38 := $or.bv1($i37, $i36);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 0, 0} true;
  assume {:verifier.code 0} true;
  $i39 := $ne.bv32($i17, $sub.bv32(0bv32, 256bv32));
  assume {:verifier.code 0} true;
  $i40 := $eq.bv32($i8, $sub.bv32(0bv32, 2bv32));
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 0, 0} true;
  assume {:verifier.code 0} true;
  $i41 := $and.bv1($i40, $i39);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 0, 0} true;
  assume {:verifier.code 0} true;
  $i42 := $ne.bv32($i7, $sub.bv32(0bv32, 2097152bv32));
  assume {:verifier.code 0} true;
  $i43 := $ne.bv32($i17, $sub.bv32(0bv32, 30bv32));
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 0, 0} true;
  assume {:verifier.code 0} true;
  $i44 := $or.bv1($i42, $i43);
  assume {:verifier.code 0} true;
  $i45 := $eq.bv32($i10, 0bv32);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 0, 0} true;
  assume {:verifier.code 0} true;
  $i46 := $or.bv1($i45, $i44);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 0, 0} true;
  assume {:verifier.code 0} true;
  $i47 := $shl.bv32($i25, 3bv32);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 0, 0} true;
  assume {:verifier.code 0} true;
  $i48 := $eq.bv32($i17, $sub.bv32(0bv32, 256bv32));
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 0, 0} true;
  assume {:verifier.code 0} true;
  $i49 := $eq.bv32($i4, 0bv32);
  assume {:verifier.code 0} true;
  $i50 := (if ($i49 == 1bv1) then 8512bv32 else 8656bv32);
  assume {:verifier.code 0} true;
  $i51 := (if ($i49 == 1bv1) then 3bv32 else 8640bv32);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 0, 0} true;
  assume {:verifier.code 0} true;
  $i52 := $eq.bv32($i27, 0bv32);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 0, 0} true;
  assume {:verifier.code 0} true;
  $i53 := $eq.bv32($i28, 0bv32);
  assume {:verifier.code 0} true;
  $i54 := (if ($i49 == 1bv1) then 8656bv32 else 3bv32);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 0, 0} true;
  assume {:verifier.code 0} true;
  $i55 := $slt.bv64($i26, 1bv64);
  assume {:verifier.code 0} true;
  $i56 := $eq.bv32($i5, 0bv32);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 103, 3} true;
  assume {:verifier.code 0} true;
  $i57, $i58, $i59, $i60 := $i19, $u0, 0bv32, $i0;
  goto $bb7;
$bb7:
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 48, 8} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 76, 13} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume true;
  assume {:verifier.code 0} true;
  goto $bb8;
$bb8:
  assume {:verifier.code 0} true;
  $i61 := $slt.bv32($i60, 12292bv32);
  assume {:verifier.code 0} true;
  assume {:branchcond $i61} true;
  goto $bb9, $bb10;
$bb9:
  assume ($i61 == 1bv1);
  assume {:verifier.code 0} true;
  $i67 := $slt.bv32($i60, 8195bv32);
  assume {:verifier.code 0} true;
  assume {:branchcond $i67} true;
  goto $bb22, $bb23;
$bb10:
  assume !(($i61 == 1bv1));
  assume {:verifier.code 0} true;
  $i62 := $slt.bv32($i60, 16384bv32);
  assume {:verifier.code 0} true;
  assume {:branchcond $i62} true;
  goto $bb11, $bb12;
$bb11:
  assume ($i62 == 1bv1);
  assume {:verifier.code 0} true;
  $i66 := $eq.bv32($i60, 12292bv32);
  assume {:verifier.code 0} true;
  $i34 := $sub.bv32(0bv32, 1bv32);
  assume {:branchcond $i66} true;
  goto $bb20, $bb21;
$bb12:
  assume !(($i62 == 1bv1));
  assume {:verifier.code 0} true;
  $i63 := $slt.bv32($i60, 24576bv32);
  assume {:verifier.code 0} true;
  assume {:branchcond $i63} true;
  goto $bb13, $bb14;
$bb13:
  assume ($i63 == 1bv1);
  assume {:verifier.code 0} true;
  $i65 := $eq.bv32($i60, 16384bv32);
  assume {:verifier.code 0} true;
  $i34 := $sub.bv32(0bv32, 1bv32);
  assume {:branchcond $i65} true;
  goto $bb18, $bb19;
$bb14:
  assume !(($i63 == 1bv1));
  assume {:verifier.code 0} true;
  $i64 := $eq.bv32($i60, 24576bv32);
  assume {:verifier.code 0} true;
  $i34 := $sub.bv32(0bv32, 1bv32);
  assume {:branchcond $i64} true;
  goto $bb15, $bb16;
$bb15:
  assume {:verifier.code 0} true;
  assume ($i64 == 1bv1);
  goto $bb5;
$bb16:
  assume {:verifier.code 0} true;
  assume !(($i64 == 1bv1));
  goto $bb17;
$bb17:
  assume {:verifier.code 0} true;
  goto $bb28;
$bb18:
  assume {:verifier.code 0} true;
  assume ($i65 == 1bv1);
  goto $bb5;
$bb19:
  assume {:verifier.code 0} true;
  assume !(($i65 == 1bv1));
  goto $bb17;
$bb20:
  assume {:verifier.code 0} true;
  assume ($i66 == 1bv1);
  goto $bb5;
$bb21:
  assume {:verifier.code 0} true;
  assume !(($i66 == 1bv1));
  goto $bb17;
$bb22:
  assume ($i67 == 1bv1);
  assume {:verifier.code 0} true;
  $i69 := $eq.bv32($i60, 8192bv32);
  assume {:verifier.code 0} true;
  $i34 := $sub.bv32(0bv32, 1bv32);
  assume {:branchcond $i69} true;
  goto $bb26, $bb27;
$bb23:
  assume !(($i67 == 1bv1));
  assume {:verifier.code 0} true;
  $i68 := $eq.bv32($i60, 8195bv32);
  assume {:verifier.code 0} true;
  $i34 := $sub.bv32(0bv32, 1bv32);
  assume {:branchcond $i68} true;
  goto $bb24, $bb25;
$bb24:
  assume {:verifier.code 0} true;
  assume ($i68 == 1bv1);
  goto $bb5;
$bb25:
  assume {:verifier.code 0} true;
  assume !(($i68 == 1bv1));
  goto $bb17;
$bb26:
  assume {:verifier.code 0} true;
  assume ($i69 == 1bv1);
  goto $bb5;
$bb27:
  assume {:verifier.code 0} true;
  assume !(($i69 == 1bv1));
  goto $bb17;
$bb28:
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 121, 19} true;
  assume {:verifier.code 0} true;
  $i70 := $and.bv32($i60, 4294967294bv32);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 121, 19} true;
  assume {:verifier.code 0} true;
  $i71 := $eq.bv32($i70, 8480bv32);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 121, 19} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i71} true;
  goto $bb29, $bb30;
$bb29:
  assume ($i71 == 1bv1);
  assume true;
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 262, 83} true;
  assume {:verifier.code 1} true;
  call $i106 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i106);
  call {:cexpr "ret"} boogie_si_record_bv32($i106);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 263, 85} true;
  assume {:verifier.code 0} true;
  $i107 := $slt.bv32($i106, 1bv32);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 263, 81} true;
  assume {:verifier.code 0} true;
  $i34, $i74, $i75, $i76, $i77, $i78 := $i106, 0bv32, $i57, 8482bv32, $i59, 8448bv32;
  assume {:branchcond $i107} true;
  goto $bb77, $bb78;
$bb30:
  assume !(($i71 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb31;
$bb31:
  assume {:verifier.code 0} true;
  $i72 := $slt.bv32($i60, 8482bv32);
  assume {:verifier.code 0} true;
  assume {:branchcond $i72} true;
  goto $bb32, $bb33;
$bb32:
  assume ($i72 == 1bv1);
  assume {:verifier.code 0} true;
  $i79 := $add.bv32($i60, 4294958832bv32);
  assume {:verifier.code 0} true;
  $i80 := $ule.bv32($i79, 2bv32);
  assume {:verifier.code 0} true;
  assume {:branchcond $i80} true;
  goto $bb38, $bb39;
$bb33:
  assume !(($i72 == 1bv1));
  assume {:verifier.code 0} true;
  $i73 := $eq.bv32($i60, 8482bv32);
  assume {:verifier.code 0} true;
  $i74, $i75, $i76, $i77, $i78 := 0bv32, $i57, $i58, $i59, 3bv32;
  assume {:branchcond $i73} true;
  goto $bb34, $bb36;
$bb34:
  assume {:verifier.code 0} true;
  assume ($i73 == 1bv1);
  goto $bb35;
$bb35:
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 644, 9} true;
  assume {:verifier.code 0} true;
  $i190 := $or.bv32($i74, $i15);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 644, 9} true;
  assume {:verifier.code 0} true;
  $i191 := $ne.bv32($i190, 0bv32);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 644, 9} true;
  assume {:verifier.code 0} true;
  $i192 := $or.bv1($i56, $i191);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 644, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i192} true;
  goto $bb167, $bb169;
$bb36:
  assume {:verifier.code 0} true;
  assume !(($i73 == 1bv1));
  goto $bb37;
$bb37:
  assume {:verifier.code 0} true;
  goto $bb40;
$bb38:
  assume ($i80 == 1bv1);
  assume true;
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 277, 83} true;
  assume {:verifier.code 1} true;
  call $i108 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i108);
  call {:cexpr "ret"} boogie_si_record_bv32($i108);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 278, 91} true;
  assume {:verifier.code 0} true;
  $i109 := $eq.bv32($i59, 0bv32);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 278, 81} true;
  assume {:verifier.code 0} true;
  $i110 := (if ($i109 == 1bv1) then 1bv32 else $i59);
  call {:cexpr "blastFlag"} boogie_si_record_bv32($i110);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 281, 85} true;
  assume {:verifier.code 0} true;
  $i111 := $slt.bv32($i108, 1bv32);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 281, 81} true;
  assume {:verifier.code 0} true;
  $i34, $i74, $i75, $i76, $i77, $i78 := $i108, 0bv32, $i57, $i58, $i110, 8496bv32;
  assume {:branchcond $i111} true;
  goto $bb79, $bb80;
$bb39:
  assume {:verifier.code 0} true;
  assume !(($i80 == 1bv1));
  goto $bb37;
$bb40:
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 139, 31} true;
  assume {:verifier.code 0} true;
  $i81 := $add.bv32($i70, 4294958800bv32);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 139, 31} true;
  assume {:verifier.code 0} true;
  $i82 := $lshr.bv32($i81, 4bv32);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 139, 31} true;
  assume {:verifier.code 0} true;
  $i83 := $shl.bv32($i81, 28bv32);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 139, 31} true;
  assume {:verifier.code 0} true;
  $i84 := $or.bv32($i82, $i83);
  assume {:verifier.code 0} true;
  goto $bb41;
$bb41:
  assume {:verifier.code 0} true;
  $i85 := $slt.bv32($i84, 2bv32);
  assume {:verifier.code 0} true;
  assume {:branchcond $i85} true;
  goto $bb42, $bb43;
$bb42:
  assume ($i85 == 1bv1);
  assume {:verifier.code 0} true;
  $i89 := $slt.bv32($i84, 1bv32);
  assume {:verifier.code 0} true;
  assume {:branchcond $i89} true;
  goto $bb51, $bb52;
$bb43:
  assume !(($i85 == 1bv1));
  assume {:verifier.code 0} true;
  $i86 := $slt.bv32($i84, 3bv32);
  assume {:verifier.code 0} true;
  assume {:branchcond $i86} true;
  goto $bb44, $bb45;
$bb44:
  assume ($i86 == 1bv1);
  assume true;
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 334, 81} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i46} true;
  goto $bb87, $bb89;
$bb45:
  assume !(($i86 == 1bv1));
  assume {:verifier.code 0} true;
  $i87 := $slt.bv32($i84, 4bv32);
  assume {:verifier.code 0} true;
  assume {:branchcond $i87} true;
  goto $bb46, $bb47;
$bb46:
  assume ($i87 == 1bv1);
  assume true;
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 385, 81} true;
  assume {:verifier.code 0} true;
  $i74, $i75, $i76, $i77, $i78 := 1bv32, $i57, $i58, $i59, 8560bv32;
  assume {:branchcond $i35} true;
  goto $bb103, $bb104;
$bb47:
  assume !(($i87 == 1bv1));
  assume {:verifier.code 0} true;
  $i88 := $eq.bv32($i84, 4bv32);
  assume {:verifier.code 0} true;
  assume {:branchcond $i88} true;
  goto $bb48, $bb49;
$bb48:
  assume ($i88 == 1bv1);
  assume true;
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 430, 83} true;
  assume {:verifier.code 1} true;
  call $i133 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i133);
  call {:cexpr "ret"} boogie_si_record_bv32($i133);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 431, 85} true;
  assume {:verifier.code 0} true;
  $i134 := $slt.bv32($i133, 1bv32);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 431, 81} true;
  assume {:verifier.code 0} true;
  $i34, $i74, $i75, $i76, $i77, $i78 := $i133, 0bv32, $i57, 8576bv32, $i59, 8448bv32;
  assume {:branchcond $i134} true;
  goto $bb111, $bb112;
$bb49:
  assume {:verifier.code 0} true;
  assume !(($i88 == 1bv1));
  goto $bb50;
$bb50:
  assume {:verifier.code 0} true;
  goto $bb55;
$bb51:
  assume ($i89 == 1bv1);
  assume {:verifier.code 0} true;
  $i90 := $eq.bv32($i84, 0bv32);
  assume {:verifier.code 0} true;
  assume {:branchcond $i90} true;
  goto $bb53, $bb54;
$bb52:
  assume !(($i89 == 1bv1));
  assume true;
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 308, 81} true;
  assume {:verifier.code 0} true;
  $i74, $i75, $i76, $i77, $i78 := 1bv32, $i57, $i58, $i59, 8528bv32;
  assume {:branchcond $i48} true;
  goto $bb83, $bb84;
$bb53:
  assume ($i90 == 1bv1);
  assume true;
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 290, 83} true;
  assume {:verifier.code 1} true;
  call $i112 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i112);
  call {:cexpr "ret"} boogie_si_record_bv32($i112);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 294, 85} true;
  assume {:verifier.code 0} true;
  $i113 := $slt.bv32($i112, 1bv32);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 294, 81} true;
  assume {:verifier.code 0} true;
  $i34 := $i112;
  assume {:branchcond $i113} true;
  goto $bb81, $bb82;
$bb54:
  assume {:verifier.code 0} true;
  assume !(($i90 == 1bv1));
  goto $bb50;
$bb55:
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 169, 60} true;
  assume {:verifier.code 0} true;
  $i91 := $eq.bv32($i60, 8448bv32);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 169, 51} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i91} true;
  goto $bb56, $bb57;
$bb56:
  assume ($i91 == 1bv1);
  assume true;
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 439, 86} true;
  assume {:verifier.code 0} true;
  $i135 := $sgt.bv64($i57, 0bv64);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 439, 81} true;
  assume {:verifier.code 0} true;
  $i74, $i75, $i76, $i77, $i78 := 0bv32, $i57, $i58, $i59, $i58;
  assume {:branchcond $i135} true;
  goto $bb113, $bb114;
$bb57:
  assume !(($i91 == 1bv1));
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 172, 53} true;
  assume {:verifier.code 0} true;
  $i92 := $add.bv32($i70, 4294958720bv32);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 172, 53} true;
  assume {:verifier.code 0} true;
  $i93 := $lshr.bv32($i92, 4bv32);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 172, 53} true;
  assume {:verifier.code 0} true;
  $i94 := $shl.bv32($i92, 28bv32);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 172, 53} true;
  assume {:verifier.code 0} true;
  $i95 := $or.bv32($i93, $i94);
  assume {:verifier.code 0} true;
  goto $bb58;
$bb58:
  assume {:verifier.code 0} true;
  $i96 := $slt.bv32($i95, 4bv32);
  assume {:verifier.code 0} true;
  assume {:branchcond $i96} true;
  goto $bb59, $bb60;
$bb59:
  assume ($i96 == 1bv1);
  assume {:verifier.code 0} true;
  $i100 := $slt.bv32($i95, 1bv32);
  assume {:verifier.code 0} true;
  assume {:branchcond $i100} true;
  goto $bb68, $bb69;
$bb60:
  assume !(($i96 == 1bv1));
  assume {:verifier.code 0} true;
  $i97 := $slt.bv32($i95, 5bv32);
  assume {:verifier.code 0} true;
  assume {:branchcond $i97} true;
  goto $bb61, $bb62;
$bb61:
  assume ($i97 == 1bv1);
  assume true;
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 499, 83} true;
  assume {:verifier.code 1} true;
  call $i153 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i153);
  call {:cexpr "ret"} boogie_si_record_bv32($i153);
  assume {:verifier.code 0} true;
  goto $bb127;
$bb62:
  assume !(($i97 == 1bv1));
  assume {:verifier.code 0} true;
  $i98 := $slt.bv32($i95, 6bv32);
  assume {:verifier.code 0} true;
  assume {:branchcond $i98} true;
  goto $bb63, $bb64;
$bb63:
  assume ($i98 == 1bv1);
  assume true;
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 532, 81} true;
  assume {:verifier.code 0} true;
  $i34 := $sub.bv32(0bv32, 1bv32);
  assume {:branchcond $i52} true;
  goto $bb151, $bb152;
$bb64:
  assume !(($i98 == 1bv1));
  assume {:verifier.code 0} true;
  $i99 := $eq.bv32($i95, 6bv32);
  assume {:verifier.code 0} true;
  assume {:branchcond $i99} true;
  goto $bb65, $bb66;
$bb65:
  assume ($i99 == 1bv1);
  assume true;
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 564, 83} true;
  assume {:verifier.code 1} true;
  call $i178 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i178);
  call {:cexpr "ret"} boogie_si_record_bv32($i178);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 565, 81} true;
  assume {:verifier.code 0} true;
  $i179 := $add.bv32($i59, 4294967285bv32);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 565, 81} true;
  assume {:verifier.code 0} true;
  $i180 := $ult.bv32($i179, 10bv32);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 565, 81} true;
  assume {:verifier.code 0} true;
  $i181 := $i59;
  assume {:branchcond $i180} true;
  goto $bb160, $bb161;
$bb66:
  assume {:verifier.code 0} true;
  assume !(($i99 == 1bv1));
  goto $bb67;
$bb67:
  assume {:verifier.code 0} true;
  goto $bb76;
$bb68:
  assume ($i100 == 1bv1);
  assume {:verifier.code 0} true;
  $i103 := $eq.bv32($i95, 0bv32);
  assume {:verifier.code 0} true;
  assume {:branchcond $i103} true;
  goto $bb74, $bb75;
$bb69:
  assume !(($i100 == 1bv1));
  assume {:verifier.code 0} true;
  $i101 := $slt.bv32($i95, 2bv32);
  assume {:verifier.code 0} true;
  assume {:branchcond $i101} true;
  goto $bb70, $bb71;
$bb70:
  assume ($i101 == 1bv1);
  assume true;
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 475, 83} true;
  assume {:verifier.code 1} true;
  call $i145 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i145);
  call {:cexpr "ret"} boogie_si_record_bv32($i145);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 476, 91} true;
  assume {:verifier.code 0} true;
  $i146 := $eq.bv32($i59, 7bv32);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 476, 81} true;
  assume {:verifier.code 0} true;
  $i147 := (if ($i146 == 1bv1) then 8bv32 else $i59);
  call {:cexpr "blastFlag"} boogie_si_record_bv32($i147);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 479, 85} true;
  assume {:verifier.code 0} true;
  $i148 := $slt.bv32($i145, 1bv32);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 479, 81} true;
  assume {:verifier.code 0} true;
  $i34, $i74, $i75, $i76, $i77, $i78 := $i145, 0bv32, $i57, $i58, $i147, 8608bv32;
  assume {:branchcond $i148} true;
  goto $bb123, $bb124;
$bb71:
  assume !(($i101 == 1bv1));
  assume {:verifier.code 0} true;
  $i102 := $eq.bv32($i95, 2bv32);
  assume {:verifier.code 0} true;
  assume {:branchcond $i102} true;
  goto $bb72, $bb73;
$bb72:
  assume ($i102 == 1bv1);
  assume true;
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 487, 83} true;
  assume {:verifier.code 1} true;
  call $i149 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i149);
  call {:cexpr "ret"} boogie_si_record_bv32($i149);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 488, 91} true;
  assume {:verifier.code 0} true;
  $i150 := $eq.bv32($i59, 8bv32);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 488, 81} true;
  assume {:verifier.code 0} true;
  $i151 := (if ($i150 == 1bv1) then 9bv32 else $i59);
  call {:cexpr "blastFlag"} boogie_si_record_bv32($i151);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 491, 85} true;
  assume {:verifier.code 0} true;
  $i152 := $slt.bv32($i149, 1bv32);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 491, 81} true;
  assume {:verifier.code 0} true;
  $i34, $i74, $i75, $i76, $i77, $i78 := $i149, 0bv32, $i57, $i58, $i151, 8640bv32;
  assume {:branchcond $i152} true;
  goto $bb125, $bb126;
$bb73:
  assume {:verifier.code 0} true;
  assume !(($i102 == 1bv1));
  goto $bb67;
$bb74:
  assume ($i103 == 1bv1);
  assume true;
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 452, 83} true;
  assume {:verifier.code 1} true;
  call $i136 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i136);
  call {:cexpr "ret"} boogie_si_record_bv32($i136);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 453, 91} true;
  assume {:verifier.code 0} true;
  $i137 := $eq.bv32($i59, 5bv32);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 453, 81} true;
  assume {:verifier.code 0} true;
  $i138 := (if ($i137 == 1bv1) then 6bv32 else $i59);
  call {:cexpr "blastFlag"} boogie_si_record_bv32($i138);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 456, 85} true;
  assume {:verifier.code 0} true;
  $i139 := $slt.bv32($i136, 1bv32);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 456, 81} true;
  assume {:verifier.code 0} true;
  $i34 := $i136;
  assume {:branchcond $i139} true;
  goto $bb117, $bb118;
$bb75:
  assume {:verifier.code 0} true;
  assume !(($i103 == 1bv1));
  goto $bb67;
$bb76:
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 208, 86} true;
  assume {:verifier.code 0} true;
  $i104 := $eq.bv32($i60, 3bv32);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 208, 77} true;
  assume {:verifier.code 0} true;
  $i105 := (if ($i104 == 1bv1) then 1bv32 else 4294967295bv32);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 208, 77} true;
  assume {:verifier.code 0} true;
  $r := $i105;
  $exn := false;
  return;
$bb77:
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 263, 81} true;
  assume {:verifier.code 0} true;
  assume ($i107 == 1bv1);
  goto $bb5;
$bb78:
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 263, 81} true;
  assume {:verifier.code 0} true;
  assume !(($i107 == 1bv1));
  goto $bb35;
$bb79:
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 281, 81} true;
  assume {:verifier.code 0} true;
  assume ($i111 == 1bv1);
  goto $bb5;
$bb80:
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 281, 81} true;
  assume {:verifier.code 0} true;
  assume !(($i111 == 1bv1));
  goto $bb35;
$bb81:
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 294, 81} true;
  assume {:verifier.code 0} true;
  assume ($i113 == 1bv1);
  goto $bb5;
$bb82:
  assume !(($i113 == 1bv1));
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 291, 91} true;
  assume {:verifier.code 0} true;
  $i114 := $eq.bv32($i59, 1bv32);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 291, 81} true;
  assume {:verifier.code 0} true;
  $i115 := (if ($i114 == 1bv1) then 2bv32 else $i59);
  call {:cexpr "blastFlag"} boogie_si_record_bv32($i115);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 303, 77} true;
  assume {:verifier.code 0} true;
  $i74, $i75, $i76, $i77, $i78 := 0bv32, $i57, $i58, $i115, $i50;
  goto $bb35;
$bb83:
  assume ($i48 == 1bv1);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 311, 85} true;
  assume {:verifier.code 1} true;
  call $i116 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i116);
  call {:cexpr "ret"} boogie_si_record_bv32($i116);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 312, 93} true;
  assume {:verifier.code 0} true;
  $i117 := $eq.bv32($i59, 2bv32);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 312, 83} true;
  assume {:verifier.code 0} true;
  $i118 := (if ($i117 == 1bv1) then 3bv32 else $i59);
  call {:cexpr "blastFlag"} boogie_si_record_bv32($i118);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 315, 87} true;
  assume {:verifier.code 0} true;
  $i119 := $slt.bv32($i116, 1bv32);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 315, 83} true;
  assume {:verifier.code 0} true;
  $i34, $i74, $i75, $i76, $i77, $i78 := $i116, 0bv32, $i57, $i58, $i118, 8528bv32;
  assume {:branchcond $i119} true;
  goto $bb85, $bb86;
$bb84:
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 308, 81} true;
  assume {:verifier.code 0} true;
  assume !(($i48 == 1bv1));
  goto $bb35;
$bb85:
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 315, 83} true;
  assume {:verifier.code 0} true;
  assume ($i119 == 1bv1);
  goto $bb5;
$bb86:
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 315, 83} true;
  assume {:verifier.code 0} true;
  assume !(($i119 == 1bv1));
  goto $bb35;
$bb87:
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 334, 81} true;
  assume {:verifier.code 0} true;
  assume ($i46 == 1bv1);
  goto $bb88;
$bb88:
  assume true;
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 359, 95} true;
  assume {:verifier.code 1} true;
  call $i125 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i125);
  call {:cexpr "ret"} boogie_si_record_bv32($i125);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 360, 103} true;
  assume {:verifier.code 0} true;
  $i126 := $eq.bv32($i59, 3bv32);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 360, 93} true;
  assume {:verifier.code 0} true;
  $i127 := (if ($i126 == 1bv1) then 4bv32 else $i59);
  call {:cexpr "blastFlag"} boogie_si_record_bv32($i127);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 363, 97} true;
  assume {:verifier.code 0} true;
  $i128 := $slt.bv32($i125, 1bv32);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 363, 93} true;
  assume {:verifier.code 0} true;
  $i34, $i74, $i75, $i76, $i77, $i78 := $i125, 0bv32, $i57, $i58, $i127, 8544bv32;
  assume {:branchcond $i128} true;
  goto $bb101, $bb102;
$bb89:
  assume !(($i46 == 1bv1));
  assume {:verifier.code 0} true;
  goto $bb90;
$bb90:
  assume {:verifier.code 0} true;
  $i120 := $slt.bv32($i18, $sub.bv32(0bv32, 2bv32));
  assume {:verifier.code 0} true;
  assume {:branchcond $i120} true;
  goto $bb91, $bb92;
$bb91:
  assume ($i120 == 1bv1);
  assume {:verifier.code 0} true;
  $i122 := $eq.bv32($i18, $sub.bv32(0bv32, 4bv32));
  assume {:verifier.code 0} true;
  assume {:branchcond $i122} true;
  goto $bb96, $bb97;
$bb92:
  assume !(($i120 == 1bv1));
  assume {:verifier.code 0} true;
  $i121 := $eq.bv32($i18, $sub.bv32(0bv32, 2bv32));
  assume {:verifier.code 0} true;
  $i74, $i75, $i76, $i77, $i78 := 1bv32, $i57, $i58, $i59, 8544bv32;
  assume {:branchcond $i121} true;
  goto $bb93, $bb94;
$bb93:
  assume {:verifier.code 0} true;
  assume ($i121 == 1bv1);
  goto $bb35;
$bb94:
  assume {:verifier.code 0} true;
  assume !(($i121 == 1bv1));
  goto $bb95;
$bb95:
  assume {:verifier.code 0} true;
  $i123 := 512bv32;
  goto $bb98;
$bb96:
  assume ($i122 == 1bv1);
  assume {:verifier.code 0} true;
  $i123 := 1024bv32;
  goto $bb98;
$bb97:
  assume {:verifier.code 0} true;
  assume !(($i122 == 1bv1));
  goto $bb95;
$bb98:
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 357, 103} true;
  assume {:verifier.code 0} true;
  $i124 := $sgt.bv32($i47, $i123);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 357, 91} true;
  assume {:verifier.code 0} true;
  $i74, $i75, $i76, $i77, $i78 := 1bv32, $i57, $i58, $i59, 8544bv32;
  assume {:branchcond $i124} true;
  goto $bb99, $bb100;
$bb99:
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 357, 91} true;
  assume {:verifier.code 0} true;
  assume ($i124 == 1bv1);
  goto $bb88;
$bb100:
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 357, 91} true;
  assume {:verifier.code 0} true;
  assume !(($i124 == 1bv1));
  goto $bb35;
$bb101:
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 363, 93} true;
  assume {:verifier.code 0} true;
  assume ($i128 == 1bv1);
  goto $bb5;
$bb102:
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 363, 93} true;
  assume {:verifier.code 0} true;
  assume !(($i128 == 1bv1));
  goto $bb35;
$bb103:
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 385, 81} true;
  assume {:verifier.code 0} true;
  assume ($i35 == 1bv1);
  goto $bb35;
$bb104:
  assume !(($i35 == 1bv1));
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 386, 83} true;
  assume {:verifier.code 0} true;
  $i74, $i75, $i76, $i77, $i78 := 1bv32, $i57, $i58, $i59, 8560bv32;
  assume {:branchcond $i38} true;
  goto $bb105, $bb106;
$bb105:
  assume ($i38 == 1bv1);
  assume true;
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 398, 85} true;
  assume {:verifier.code 0} true;
  $i74, $i75, $i76, $i77, $i78 := 1bv32, $i57, $i58, $i59, 8560bv32;
  assume {:branchcond $i41} true;
  goto $bb107, $bb108;
$bb106:
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 386, 83} true;
  assume {:verifier.code 0} true;
  assume !(($i38 == 1bv1));
  goto $bb35;
$bb107:
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 398, 85} true;
  assume {:verifier.code 0} true;
  assume ($i41 == 1bv1);
  goto $bb35;
$bb108:
  assume !(($i41 == 1bv1));
  assume true;
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 409, 89} true;
  assume {:verifier.code 1} true;
  call $i129 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i129);
  call {:cexpr "ret"} boogie_si_record_bv32($i129);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 410, 97} true;
  assume {:verifier.code 0} true;
  $i130 := $eq.bv32($i59, 4bv32);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 410, 87} true;
  assume {:verifier.code 0} true;
  $i131 := (if ($i130 == 1bv1) then 5bv32 else $i59);
  call {:cexpr "blastFlag"} boogie_si_record_bv32($i131);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 413, 91} true;
  assume {:verifier.code 0} true;
  $i132 := $slt.bv32($i129, 1bv32);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 413, 87} true;
  assume {:verifier.code 0} true;
  $i34, $i74, $i75, $i76, $i77, $i78 := $i129, 0bv32, $i57, 8576bv32, $i131, 8448bv32;
  assume {:branchcond $i132} true;
  goto $bb109, $bb110;
$bb109:
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 413, 87} true;
  assume {:verifier.code 0} true;
  assume ($i132 == 1bv1);
  goto $bb5;
$bb110:
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 413, 87} true;
  assume {:verifier.code 0} true;
  assume !(($i132 == 1bv1));
  goto $bb35;
$bb111:
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 431, 81} true;
  assume {:verifier.code 0} true;
  assume ($i134 == 1bv1);
  goto $bb5;
$bb112:
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 431, 81} true;
  assume {:verifier.code 0} true;
  assume !(($i134 == 1bv1));
  goto $bb35;
$bb113:
  assume ($i135 == 1bv1);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 442, 83} true;
  assume {:verifier.code 0} true;
  $i34, $i74, $i75, $i76, $i77, $i78 := $sub.bv32(0bv32, 1bv32), 0bv32, $i26, $i58, $i59, $i58;
  assume {:branchcond $i55} true;
  goto $bb115, $bb116;
$bb114:
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 439, 81} true;
  assume {:verifier.code 0} true;
  assume !(($i135 == 1bv1));
  goto $bb35;
$bb115:
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 442, 83} true;
  assume {:verifier.code 0} true;
  assume ($i55 == 1bv1);
  goto $bb5;
$bb116:
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 442, 83} true;
  assume {:verifier.code 0} true;
  assume !(($i55 == 1bv1));
  goto $bb35;
$bb117:
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 456, 81} true;
  assume {:verifier.code 0} true;
  assume ($i139 == 1bv1);
  goto $bb5;
$bb118:
  assume !(($i139 == 1bv1));
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 459, 85} true;
  assume {:verifier.code 0} true;
  $i140 := $eq.bv32($i136, 2bv32);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 459, 81} true;
  assume {:verifier.code 0} true;
  $i74, $i75, $i76, $i77, $i78 := 0bv32, $i57, $i58, $i138, 8466bv32;
  assume {:branchcond $i140} true;
  goto $bb119, $bb120;
$bb119:
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 459, 81} true;
  assume {:verifier.code 0} true;
  assume ($i140 == 1bv1);
  goto $bb35;
$bb120:
  assume !(($i140 == 1bv1));
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 462, 85} true;
  assume {:verifier.code 1} true;
  call $i141 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i141);
  call {:cexpr "ret"} boogie_si_record_bv32($i141);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 463, 93} true;
  assume {:verifier.code 0} true;
  $i142 := $eq.bv32($i138, 6bv32);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 463, 83} true;
  assume {:verifier.code 0} true;
  $i143 := (if ($i142 == 1bv1) then 7bv32 else $i138);
  call {:cexpr "blastFlag"} boogie_si_record_bv32($i143);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 466, 87} true;
  assume {:verifier.code 0} true;
  $i144 := $slt.bv32($i141, 1bv32);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 466, 83} true;
  assume {:verifier.code 0} true;
  $i34, $i74, $i75, $i76, $i77, $i78 := $i141, 0bv32, $i57, $i58, $i143, 8592bv32;
  assume {:branchcond $i144} true;
  goto $bb121, $bb122;
$bb121:
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 466, 83} true;
  assume {:verifier.code 0} true;
  assume ($i144 == 1bv1);
  goto $bb5;
$bb122:
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 466, 83} true;
  assume {:verifier.code 0} true;
  assume !(($i144 == 1bv1));
  goto $bb35;
$bb123:
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 479, 81} true;
  assume {:verifier.code 0} true;
  assume ($i148 == 1bv1);
  goto $bb5;
$bb124:
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 479, 81} true;
  assume {:verifier.code 0} true;
  assume !(($i148 == 1bv1));
  goto $bb35;
$bb125:
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 491, 81} true;
  assume {:verifier.code 0} true;
  assume ($i152 == 1bv1);
  goto $bb5;
$bb126:
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 491, 81} true;
  assume {:verifier.code 0} true;
  assume !(($i152 == 1bv1));
  goto $bb35;
$bb127:
  assume {:verifier.code 0} true;
  $i154 := $slt.bv32($i59, 15bv32);
  assume {:verifier.code 0} true;
  assume {:branchcond $i154} true;
  goto $bb128, $bb129;
$bb128:
  assume ($i154 == 1bv1);
  assume {:verifier.code 0} true;
  $i160 := $slt.bv32($i59, 12bv32);
  assume {:verifier.code 0} true;
  assume {:branchcond $i160} true;
  goto $bb141, $bb142;
$bb129:
  assume !(($i154 == 1bv1));
  assume {:verifier.code 0} true;
  $i155 := $slt.bv32($i59, 18bv32);
  assume {:verifier.code 0} true;
  assume {:branchcond $i155} true;
  goto $bb130, $bb131;
$bb130:
  assume ($i155 == 1bv1);
  assume {:verifier.code 0} true;
  $i159 := $eq.bv32($i59, 15bv32);
  assume {:verifier.code 0} true;
  assume {:branchcond $i159} true;
  goto $bb139, $bb140;
$bb131:
  assume !(($i155 == 1bv1));
  assume {:verifier.code 0} true;
  $i156 := $slt.bv32($i59, 21bv32);
  assume {:verifier.code 0} true;
  assume {:branchcond $i156} true;
  goto $bb132, $bb133;
$bb132:
  assume ($i156 == 1bv1);
  assume {:verifier.code 0} true;
  $i158 := $eq.bv32($i59, 18bv32);
  assume {:verifier.code 0} true;
  assume {:branchcond $i158} true;
  goto $bb137, $bb138;
$bb133:
  assume !(($i156 == 1bv1));
  assume {:verifier.code 0} true;
  $i157 := $eq.bv32($i59, 21bv32);
  assume {:verifier.code 0} true;
  assume {:branchcond $i157} true;
  goto $bb134, $bb135;
$bb134:
  assume {:verifier.code 0} true;
  assume ($i157 == 1bv1);
  goto $bb3;
$bb135:
  assume {:verifier.code 0} true;
  assume !(($i157 == 1bv1));
  goto $bb136;
$bb136:
  assume {:verifier.code 0} true;
  goto $bb148;
$bb137:
  assume ($i158 == 1bv1);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 511, 83} true;
  assume {:verifier.code 0} true;
  $i163 := 19bv32;
  goto $bb146;
$bb138:
  assume {:verifier.code 0} true;
  assume !(($i158 == 1bv1));
  goto $bb136;
$bb139:
  assume ($i159 == 1bv1);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 508, 81} true;
  assume {:verifier.code 0} true;
  $i163 := 16bv32;
  goto $bb146;
$bb140:
  assume {:verifier.code 0} true;
  assume !(($i159 == 1bv1));
  goto $bb136;
$bb141:
  assume ($i160 == 1bv1);
  assume {:verifier.code 0} true;
  $i162 := $eq.bv32($i59, 9bv32);
  assume {:verifier.code 0} true;
  $i163 := 10bv32;
  assume {:branchcond $i162} true;
  goto $bb145, $bb147;
$bb142:
  assume !(($i160 == 1bv1));
  assume {:verifier.code 0} true;
  $i161 := $eq.bv32($i59, 12bv32);
  assume {:verifier.code 0} true;
  assume {:branchcond $i161} true;
  goto $bb143, $bb144;
$bb143:
  assume ($i161 == 1bv1);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 505, 79} true;
  assume {:verifier.code 0} true;
  $i163 := 13bv32;
  goto $bb146;
$bb144:
  assume {:verifier.code 0} true;
  assume !(($i161 == 1bv1));
  goto $bb136;
$bb145:
  assume {:verifier.code 0} true;
  assume ($i162 == 1bv1);
  goto $bb146;
$bb146:
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 519, 85} true;
  assume {:verifier.code 0} true;
  $i164 := $slt.bv32($i153, 1bv32);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 519, 81} true;
  assume {:verifier.code 0} true;
  $i34, $i74, $i75, $i76, $i77, $i78 := $i153, 0bv32, $i57, $i58, $i163, $i54;
  assume {:branchcond $i164} true;
  goto $bb149, $bb150;
$bb147:
  assume {:verifier.code 0} true;
  assume !(($i162 == 1bv1));
  goto $bb136;
$bb148:
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 519, 85} true;
  assume {:verifier.code 0} true;
  $i163 := $i59;
  goto $bb146;
$bb149:
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 519, 81} true;
  assume {:verifier.code 0} true;
  assume ($i164 == 1bv1);
  goto $bb5;
$bb150:
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 519, 81} true;
  assume {:verifier.code 0} true;
  assume !(($i164 == 1bv1));
  goto $bb35;
$bb151:
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 532, 81} true;
  assume {:verifier.code 0} true;
  assume ($i52 == 1bv1);
  goto $bb5;
$bb152:
  assume !(($i52 == 1bv1));
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 536, 83} true;
  assume {:verifier.code 1} true;
  call $i165 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i165);
  call {:cexpr "ret"} boogie_si_record_bv32($i165);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 537, 81} true;
  assume {:verifier.code 0} true;
  $i166 := $add.bv32($i59, 4294967286bv32);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 537, 81} true;
  assume {:verifier.code 0} true;
  $i167 := $ult.bv32($i166, 10bv32);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 537, 81} true;
  assume {:verifier.code 0} true;
  $i168 := $i59;
  assume {:branchcond $i167} true;
  goto $bb153, $bb154;
$bb153:
  assume ($i167 == 1bv1);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 537, 81} true;
  assume {:verifier.code 0} true;
  $i169 := $trunc.bv32.bv16($i166);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 537, 81} true;
  assume {:verifier.code 0} true;
  $i170 := $lshr.bv16(585bv16, $i169);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 537, 81} true;
  assume {:verifier.code 0} true;
  $i171 := $and.bv16($i170, 1bv16);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 537, 81} true;
  assume {:verifier.code 0} true;
  $i172 := $eq.bv16($i171, 0bv16);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 537, 81} true;
  assume {:verifier.code 0} true;
  $i168 := $i59;
  assume {:branchcond $i172} true;
  goto $bb156, $bb157;
$bb154:
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 537, 81} true;
  assume {:verifier.code 0} true;
  assume !(($i167 == 1bv1));
  goto $bb155;
$bb155:
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 552, 85} true;
  assume {:verifier.code 0} true;
  $i176 := $slt.bv32($i165, 1bv32);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 552, 81} true;
  assume {:verifier.code 0} true;
  $i177 := $or.bv1($i176, $i53);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 552, 81} true;
  assume {:verifier.code 0} true;
  $i74, $i75, $i76, $i77, $i78 := 0bv32, $i57, $i58, $i168, 8672bv32;
  assume {:branchcond $i177} true;
  goto $bb158, $bb159;
$bb156:
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 537, 81} true;
  assume {:verifier.code 0} true;
  assume ($i172 == 1bv1);
  goto $bb155;
$bb157:
  assume !(($i172 == 1bv1));
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 537, 81} true;
  assume {:verifier.code 0} true;
  $i173 := $sext.bv32.bv64($i166);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 537, 81} true;
  assume {:verifier.code 0} true;
  $p174 := $add.ref($add.ref(switch.table.ssl3_accept, $mul.ref(0, 40)), $mul.ref($bv2int.64($i173), 4));
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 537, 81} true;
  assume {:verifier.code 0} true;
  $i175 := $load.bv32($M.0, $p174);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 537, 81} true;
  assume {:verifier.code 0} true;
  $i168 := $i175;
  goto $bb155;
$bb158:
  assume ($i177 == 1bv1);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 552, 81} true;
  assume {:verifier.code 0} true;
  $i195 := (if ($i176 == 1bv1) then $i165 else 4294967295bv32);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 675, 1} true;
  assume {:verifier.code 0} true;
  $i34 := $i195;
  goto $bb5;
$bb159:
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 552, 81} true;
  assume {:verifier.code 0} true;
  assume !(($i177 == 1bv1));
  goto $bb35;
$bb160:
  assume ($i180 == 1bv1);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 565, 81} true;
  assume {:verifier.code 0} true;
  $i182 := $trunc.bv32.bv16($i179);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 565, 81} true;
  assume {:verifier.code 0} true;
  $i183 := $lshr.bv16(585bv16, $i182);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 565, 81} true;
  assume {:verifier.code 0} true;
  $i184 := $and.bv16($i183, 1bv16);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 565, 81} true;
  assume {:verifier.code 0} true;
  $i185 := $eq.bv16($i184, 0bv16);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 565, 81} true;
  assume {:verifier.code 0} true;
  $i181 := $i59;
  assume {:branchcond $i185} true;
  goto $bb163, $bb164;
$bb161:
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 565, 81} true;
  assume {:verifier.code 0} true;
  assume !(($i180 == 1bv1));
  goto $bb162;
$bb162:
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 580, 85} true;
  assume {:verifier.code 0} true;
  $i189 := $slt.bv32($i178, 1bv32);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 580, 81} true;
  assume {:verifier.code 0} true;
  $i34, $i74, $i75, $i76, $i77, $i78 := $i178, 0bv32, $i57, $i51, $i181, 8448bv32;
  assume {:branchcond $i189} true;
  goto $bb165, $bb166;
$bb163:
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 565, 81} true;
  assume {:verifier.code 0} true;
  assume ($i185 == 1bv1);
  goto $bb162;
$bb164:
  assume !(($i185 == 1bv1));
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 565, 81} true;
  assume {:verifier.code 0} true;
  $i186 := $sext.bv32.bv64($i179);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 565, 81} true;
  assume {:verifier.code 0} true;
  $p187 := $add.ref($add.ref(switch.table.ssl3_accept.3, $mul.ref(0, 40)), $mul.ref($bv2int.64($i186), 4));
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 565, 81} true;
  assume {:verifier.code 0} true;
  $i188 := $load.bv32($M.0, $p187);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 565, 81} true;
  assume {:verifier.code 0} true;
  $i181 := $i188;
  goto $bb162;
$bb165:
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 580, 81} true;
  assume {:verifier.code 0} true;
  assume ($i189 == 1bv1);
  goto $bb5;
$bb166:
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 580, 81} true;
  assume {:verifier.code 0} true;
  assume !(($i189 == 1bv1));
  goto $bb35;
$bb167:
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 644, 9} true;
  assume {:verifier.code 0} true;
  assume ($i192 == 1bv1);
  goto $bb168;
$bb168:
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 0, 0} true;
  assume {:verifier.code 0} true;
  $i57, $i58, $i59, $i60 := $i75, $i76, $i77, $i78;
  goto $bb7;
$bb169:
  assume !(($i192 == 1bv1));
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 647, 17} true;
  assume {:verifier.code 1} true;
  call $i193 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_bv32($i193);
  call {:cexpr "ret"} boogie_si_record_bv32($i193);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 648, 19} true;
  assume {:verifier.code 0} true;
  $i194 := $slt.bv32($i193, 1bv32);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 648, 15} true;
  assume {:verifier.code 0} true;
  $i34 := $i193;
  assume {:branchcond $i194} true;
  goto $bb170, $bb171;
$bb170:
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 648, 15} true;
  assume {:verifier.code 0} true;
  assume ($i194 == 1bv1);
  goto $bb5;
$bb171:
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 648, 15} true;
  assume {:verifier.code 0} true;
  assume !(($i194 == 1bv1));
  goto $bb168;
}
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 9360));
procedure  llvm.dbg.value($p0: ref, $p1: ref, $p2: ref);
const llvm.dbg.label: ref;
axiom (llvm.dbg.label == $sub.ref(0, 10392));
procedure  llvm.dbg.label($p0: ref);
const main: ref;
axiom (main == $sub.ref(0, 11424));
procedure {:entrypoint} main()
  returns ($r: bv32)
{
  var $i0: bv32;
$bb0:
  call $initialize();
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 683, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 683, 9} true;
  assume {:verifier.code 0} true;
  call $i0 := ssl3_accept(8464bv32);
  call {:cexpr "tmp"} boogie_si_record_bv32($i0);
  assume {:sourceloc "output/s3_srvr_6.cil-1_tmp.c", 685, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const __SMACK_code: ref;
axiom (__SMACK_code == $sub.ref(0, 12456));
procedure  __SMACK_code.ref($p0: ref);
procedure  __SMACK_code.ref.bv32($p0: ref, p.1: bv32);
const __VERIFIER_assume: ref;
axiom (__VERIFIER_assume == $sub.ref(0, 13488));
procedure  __VERIFIER_assume($i0: bv32)
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1604, 29} true;
  assume {:verifier.code 1} true;
  call {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_bv32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1604, 29} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 45, 3} true;
  assume {:verifier.code 1} true;
  assume $i0 != $0;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 46, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_dummy: ref;
axiom (__SMACK_dummy == $sub.ref(0, 14520));
procedure  __SMACK_dummy($i0: bv32)
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1604, 29} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1604, 29} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1604, 59} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_and32: ref;
axiom (__SMACK_and32 == $sub.ref(0, 15552));
procedure  __SMACK_and32($i0: bv32, $i1: bv32)
  returns ($r: bv32)
{
  var $i2: bv64;
  var $i3: bv64;
  var $i4: bv32;
  var $i5: bv32;
  var $i6: bv64;
  var $i7: bv64;
  var $i8: bv32;
  var $i9: bv32;
  var $i10: bv64;
  var $i11: bv64;
  var $i12: bv32;
  var $i13: bv32;
  var $i14: bv64;
  var $i15: bv64;
  var $i16: bv32;
  var $i17: bv32;
  var $i18: bv64;
  var $i19: bv64;
  var $i20: bv32;
  var $i21: bv32;
  var $i22: bv64;
  var $i23: bv64;
  var $i24: bv32;
  var $i25: bv32;
  var $i26: bv64;
  var $i27: bv64;
  var $i28: bv32;
  var $i29: bv32;
  var $i30: bv64;
  var $i31: bv64;
  var $i32: bv32;
  var $i33: bv32;
  var $i34: bv64;
  var $i35: bv64;
  var $i36: bv32;
  var $i37: bv32;
  var $i38: bv64;
  var $i39: bv64;
  var $i40: bv32;
  var $i41: bv32;
  var $i42: bv64;
  var $i43: bv64;
  var $i44: bv32;
  var $i45: bv32;
  var $i46: bv64;
  var $i47: bv64;
  var $i48: bv32;
  var $i49: bv32;
  var $i50: bv64;
  var $i51: bv64;
  var $i52: bv32;
  var $i53: bv32;
  var $i54: bv64;
  var $i55: bv64;
  var $i56: bv32;
  var $i57: bv32;
  var $i58: bv64;
  var $i59: bv64;
  var $i60: bv32;
  var $i61: bv32;
  var $i62: bv64;
  var $i63: bv64;
  var $i64: bv32;
  var $i65: bv32;
  var $i66: bv64;
  var $i67: bv64;
  var $i68: bv32;
  var $i69: bv32;
  var $i70: bv64;
  var $i71: bv64;
  var $i72: bv32;
  var $i73: bv32;
  var $i74: bv64;
  var $i75: bv64;
  var $i76: bv32;
  var $i77: bv32;
  var $i78: bv64;
  var $i79: bv64;
  var $i80: bv32;
  var $i81: bv32;
  var $i82: bv64;
  var $i83: bv64;
  var $i84: bv32;
  var $i85: bv32;
  var $i86: bv64;
  var $i87: bv64;
  var $i88: bv32;
  var $i89: bv32;
  var $i90: bv64;
  var $i91: bv64;
  var $i92: bv32;
  var $i93: bv32;
  var $i94: bv64;
  var $i95: bv64;
  var $i96: bv32;
  var $i97: bv32;
  var $i98: bv64;
  var $i99: bv64;
  var $i100: bv32;
  var $i101: bv32;
  var $i102: bv64;
  var $i103: bv64;
  var $i104: bv32;
  var $i105: bv32;
  var $i106: bv64;
  var $i107: bv64;
  var $i108: bv32;
  var $i109: bv32;
  var $i110: bv64;
  var $i111: bv64;
  var $i112: bv32;
  var $i113: bv32;
  var $i114: bv64;
  var $i115: bv64;
  var $i116: bv32;
  var $i117: bv32;
  var $i118: bv64;
  var $i119: bv64;
  var $i120: bv32;
  var $i121: bv32;
  var $i122: bv64;
  var $i123: bv64;
  var $i124: bv32;
  var $i125: bv32;
  var $i126: bv64;
  var $i127: bv64;
  var $i128: bv32;
  var $i129: bv32;
  var $i130: bv64;
  var $i131: bv64;
  var $i132: bv32;
  var $i133: bv32;
  var $i134: bv64;
  var $i135: bv64;
  var $i136: bv32;
  var $i137: bv32;
  var $i138: bv64;
  var $i139: bv64;
  var $i140: bv32;
  var $i141: bv32;
  var $i142: bv64;
  var $i143: bv64;
  var $i144: bv32;
  var $i145: bv32;
  var $i146: bv64;
  var $i147: bv64;
  var $i148: bv32;
  var $i149: bv32;
  var $i150: bv64;
  var $i151: bv64;
  var $i152: bv32;
  var $i153: bv32;
  var $i154: bv64;
  var $i155: bv64;
  var $i156: bv32;
  var $i157: bv32;
  var $i158: bv64;
  var $i159: bv64;
  var $i160: bv32;
  var $i161: bv32;
  var $i162: bv64;
  var $i163: bv64;
  var $i164: bv32;
  var $i165: bv32;
  var $i166: bv64;
  var $i167: bv64;
  var $i168: bv32;
  var $i169: bv32;
  var $i170: bv64;
  var $i171: bv64;
  var $i172: bv32;
  var $i173: bv32;
  var $i174: bv64;
  var $i175: bv64;
  var $i176: bv32;
  var $i177: bv32;
  var $i178: bv64;
  var $i179: bv64;
  var $i180: bv32;
  var $i181: bv32;
  var $i182: bv64;
  var $i183: bv64;
  var $i184: bv32;
  var $i185: bv32;
  var $i186: bv64;
  var $i187: bv64;
  var $i188: bv32;
  var $i189: bv32;
  var $i190: bv64;
  var $i191: bv64;
  var $i192: bv32;
  var $i193: bv32;
  var $i194: bv64;
  var $i195: bv64;
  var $i196: bv32;
  var $i197: bv32;
  var $i198: bv64;
  var $i199: bv64;
  var $i200: bv32;
  var $i201: bv32;
  var $i202: bv64;
  var $i203: bv64;
  var $i204: bv32;
  var $i205: bv32;
  var $i206: bv64;
  var $i207: bv64;
  var $i208: bv32;
  var $i209: bv32;
  var $i210: bv64;
  var $i211: bv64;
  var $i212: bv32;
  var $i213: bv32;
  var $i214: bv64;
  var $i215: bv64;
  var $i216: bv32;
  var $i217: bv32;
  var $i218: bv64;
  var $i219: bv64;
  var $i220: bv32;
  var $i221: bv32;
  var $i222: bv64;
  var $i223: bv64;
  var $i224: bv32;
  var $i225: bv32;
  var $i226: bv64;
  var $i227: bv64;
  var $i228: bv32;
  var $i229: bv32;
  var $i230: bv64;
  var $i231: bv64;
  var $i232: bv32;
  var $i233: bv32;
  var $i234: bv64;
  var $i235: bv64;
  var $i236: bv32;
  var $i237: bv32;
  var $i238: bv64;
  var $i239: bv64;
  var $i240: bv32;
  var $i241: bv32;
  var $i242: bv64;
  var $i243: bv64;
  var $i244: bv32;
  var $i245: bv32;
  var $i246: bv64;
  var $i247: bv64;
  var $i248: bv32;
  var $i249: bv32;
  var $i250: bv64;
  var $i251: bv64;
  var $i252: bv32;
  var $i253: bv32;
  var $i254: bv64;
  var $i255: bv64;
  var $i256: bv32;
  var $i257: bv32;
  var $i258: bv64;
  var $i259: bv64;
  var $i260: bv64;
  var $i261: bv32;
  var $i262: bv32;
  var $i263: bv64;
  var $i264: bv64;
  var $i265: bv32;
  var $i266: bv32;
  var $i267: bv64;
  var $i268: bv32;
  var $i269: bv32;
  var $i270: bv64;
  var $i271: bv64;
  var $i272: bv32;
  var $i273: bv32;
  var $i274: bv32;
  var $i275: bv64;
  var $i276: bv64;
  var $i277: bv32;
  var $i278: bv32;
  var $i279: bv64;
  var $i280: bv64;
  var $i281: bv32;
  var $i282: bv32;
  var $i283: bv64;
  var $i284: bv64;
  var $i285: bv64;
  var $i286: bv32;
  var $i287: bv32;
  var $i288: bv64;
  var $i289: bv64;
  var $i290: bv32;
  var $i291: bv32;
  var $i292: bv32;
  var $i293: bv64;
  var $i294: bv32;
  var $i295: bv32;
  var $i296: bv32;
  var $i297: bv64;
  var $i298: bv64;
  var $i299: bv32;
  var $i300: bv32;
  var $i301: bv32;
  var $i302: bv64;
  var $i303: bv64;
  var $i304: bv32;
  var $i305: bv32;
  var $i306: bv64;
  var $i307: bv64;
  var $i308: bv32;
  var $i309: bv32;
  var $i310: bv64;
  var $i311: bv64;
  var $i312: bv64;
  var $i313: bv32;
  var $i314: bv32;
  var $i315: bv64;
  var $i316: bv64;
  var $i317: bv32;
  var $i318: bv32;
  var $i319: bv32;
  var $i320: bv64;
  var $i321: bv32;
  var $i322: bv32;
  var $i323: bv32;
  var $i324: bv64;
  var $i325: bv64;
  var $i326: bv32;
  var $i327: bv32;
  var $i328: bv32;
  var $i329: bv64;
  var $i330: bv64;
  var $i331: bv32;
  var $i332: bv32;
  var $i333: bv64;
  var $i334: bv64;
  var $i335: bv32;
  var $i336: bv32;
  var $i337: bv64;
  var $i338: bv64;
  var $i339: bv64;
  var $i340: bv32;
  var $i341: bv32;
  var $i342: bv64;
  var $i343: bv64;
  var $i344: bv32;
  var $i345: bv32;
  var $i346: bv32;
  var $i347: bv64;
  var $i348: bv32;
  var $i349: bv32;
  var $i350: bv32;
  var $i351: bv64;
  var $i352: bv64;
  var $i353: bv32;
  var $i354: bv32;
  var $i355: bv32;
  var $i356: bv64;
  var $i357: bv64;
  var $i358: bv32;
  var $i359: bv32;
  var $i360: bv64;
  var $i361: bv64;
  var $i362: bv32;
  var $i363: bv32;
  var $i364: bv64;
  var $i365: bv64;
  var $i366: bv64;
  var $i367: bv32;
  var $i368: bv32;
  var $i369: bv64;
  var $i370: bv64;
  var $i371: bv32;
  var $i372: bv32;
  var $i373: bv32;
  var $i374: bv64;
  var $i375: bv32;
  var $i376: bv32;
  var $i377: bv32;
  var $i378: bv64;
  var $i379: bv64;
  var $i380: bv32;
  var $i381: bv32;
  var $i382: bv32;
  var $i383: bv64;
  var $i384: bv64;
  var $i385: bv32;
  var $i386: bv32;
  var $i387: bv64;
  var $i388: bv64;
  var $i389: bv32;
  var $i390: bv32;
  var $i391: bv64;
  var $i392: bv64;
  var $i393: bv64;
  var $i394: bv32;
  var $i395: bv32;
  var $i396: bv64;
  var $i397: bv64;
  var $i398: bv32;
  var $i399: bv32;
  var $i400: bv32;
  var $i401: bv64;
  var $i402: bv32;
  var $i403: bv32;
  var $i404: bv32;
  var $i405: bv64;
  var $i406: bv64;
  var $i407: bv32;
  var $i408: bv32;
  var $i409: bv32;
  var $i410: bv64;
  var $i411: bv64;
  var $i412: bv32;
  var $i413: bv32;
  var $i414: bv64;
  var $i415: bv64;
  var $i416: bv32;
  var $i417: bv32;
  var $i418: bv64;
  var $i419: bv64;
  var $i420: bv64;
  var $i421: bv32;
  var $i422: bv32;
  var $i423: bv64;
  var $i424: bv64;
  var $i425: bv32;
  var $i426: bv32;
  var $i427: bv32;
  var $i428: bv64;
  var $i429: bv32;
  var $i430: bv32;
  var $i431: bv32;
  var $i432: bv64;
  var $i433: bv64;
  var $i434: bv32;
  var $i435: bv32;
  var $i436: bv32;
  var $i437: bv64;
  var $i438: bv64;
  var $i439: bv32;
  var $i440: bv32;
  var $i441: bv64;
  var $i442: bv64;
  var $i443: bv32;
  var $i444: bv32;
  var $i445: bv64;
  var $i446: bv64;
  var $i447: bv64;
  var $i448: bv32;
  var $i449: bv32;
  var $i450: bv64;
  var $i451: bv64;
  var $i452: bv32;
  var $i453: bv32;
  var $i454: bv32;
  var $i455: bv64;
  var $i456: bv32;
  var $i457: bv32;
  var $i458: bv32;
  var $i459: bv64;
  var $i460: bv64;
  var $i461: bv32;
  var $i462: bv32;
  var $i463: bv32;
  var $i464: bv64;
  var $i465: bv64;
  var $i466: bv32;
  var $i467: bv32;
  var $i468: bv64;
  var $i469: bv64;
  var $i470: bv32;
  var $i471: bv32;
  var $i472: bv64;
  var $i473: bv64;
  var $i474: bv64;
  var $i475: bv32;
  var $i476: bv32;
  var $i477: bv64;
  var $i478: bv64;
  var $i479: bv32;
  var $i480: bv32;
  var $i481: bv32;
  var $i482: bv64;
  var $i483: bv32;
  var $i484: bv32;
  var $i485: bv32;
  var $i486: bv64;
  var $i487: bv64;
  var $i488: bv32;
  var $i489: bv32;
  var $i490: bv32;
  var $i491: bv64;
  var $i492: bv64;
  var $i493: bv32;
  var $i494: bv32;
  var $i495: bv64;
  var $i496: bv64;
  var $i497: bv32;
  var $i498: bv32;
  var $i499: bv64;
  var $i500: bv64;
  var $i501: bv64;
  var $i502: bv32;
  var $i503: bv32;
  var $i504: bv64;
  var $i505: bv64;
  var $i506: bv32;
  var $i507: bv32;
  var $i508: bv32;
  var $i509: bv64;
  var $i510: bv32;
  var $i511: bv32;
  var $i512: bv32;
  var $i513: bv64;
  var $i514: bv64;
  var $i515: bv32;
  var $i516: bv32;
  var $i517: bv32;
  var $i518: bv64;
  var $i519: bv64;
  var $i520: bv32;
  var $i521: bv32;
  var $i522: bv64;
  var $i523: bv64;
  var $i524: bv32;
  var $i525: bv32;
  var $i526: bv64;
  var $i527: bv64;
  var $i528: bv64;
  var $i529: bv32;
  var $i530: bv32;
  var $i531: bv64;
  var $i532: bv64;
  var $i533: bv32;
  var $i534: bv32;
  var $i535: bv32;
  var $i536: bv64;
  var $i537: bv32;
  var $i538: bv32;
  var $i539: bv32;
  var $i540: bv64;
  var $i541: bv64;
  var $i542: bv32;
  var $i543: bv32;
  var $i544: bv32;
  var $i545: bv64;
  var $i546: bv64;
  var $i547: bv32;
  var $i548: bv32;
  var $i549: bv64;
  var $i550: bv64;
  var $i551: bv32;
  var $i552: bv32;
  var $i553: bv64;
  var $i554: bv64;
  var $i555: bv64;
  var $i556: bv32;
  var $i557: bv32;
  var $i558: bv64;
  var $i559: bv64;
  var $i560: bv32;
  var $i561: bv32;
  var $i562: bv32;
  var $i563: bv64;
  var $i564: bv32;
  var $i565: bv32;
  var $i566: bv32;
  var $i567: bv64;
  var $i568: bv64;
  var $i569: bv32;
  var $i570: bv32;
  var $i571: bv32;
  var $i572: bv64;
  var $i573: bv64;
  var $i574: bv32;
  var $i575: bv32;
  var $i576: bv64;
  var $i577: bv64;
  var $i578: bv32;
  var $i579: bv32;
  var $i580: bv64;
  var $i581: bv64;
  var $i582: bv64;
  var $i583: bv32;
  var $i584: bv32;
  var $i585: bv64;
  var $i586: bv64;
  var $i587: bv32;
  var $i588: bv32;
  var $i589: bv32;
  var $i590: bv64;
  var $i591: bv32;
  var $i592: bv32;
  var $i593: bv32;
  var $i594: bv64;
  var $i595: bv64;
  var $i596: bv32;
  var $i597: bv32;
  var $i598: bv32;
  var $i599: bv64;
  var $i600: bv64;
  var $i601: bv32;
  var $i602: bv32;
  var $i603: bv64;
  var $i604: bv64;
  var $i605: bv32;
  var $i606: bv32;
  var $i607: bv64;
  var $i608: bv64;
  var $i609: bv64;
  var $i610: bv32;
  var $i611: bv32;
  var $i612: bv64;
  var $i613: bv64;
  var $i614: bv32;
  var $i615: bv32;
  var $i616: bv32;
  var $i617: bv64;
  var $i618: bv32;
  var $i619: bv32;
  var $i620: bv32;
  var $i621: bv64;
  var $i622: bv64;
  var $i623: bv32;
  var $i624: bv32;
  var $i625: bv32;
  var $i626: bv64;
  var $i627: bv64;
  var $i628: bv32;
  var $i629: bv32;
  var $i630: bv64;
  var $i631: bv64;
  var $i632: bv32;
  var $i633: bv32;
  var $i634: bv64;
  var $i635: bv64;
  var $i636: bv64;
  var $i637: bv32;
  var $i638: bv32;
  var $i639: bv64;
  var $i640: bv64;
  var $i641: bv32;
  var $i642: bv32;
  var $i643: bv32;
  var $i644: bv64;
  var $i645: bv32;
  var $i646: bv32;
  var $i647: bv32;
  var $i648: bv64;
  var $i649: bv64;
  var $i650: bv32;
  var $i651: bv32;
  var $i652: bv32;
  var $i653: bv64;
  var $i654: bv64;
  var $i655: bv32;
  var $i656: bv32;
  var $i657: bv64;
  var $i658: bv64;
  var $i659: bv64;
  var $i660: bv64;
  var $i661: bv64;
  var $i662: bv32;
  var $i663: bv32;
  var $i664: bv64;
  var $i665: bv32;
  var $i666: bv32;
  var $i667: bv32;
  var $i668: bv1;
  var $i669: bv32;
  var $i670: bv32;
  var $i671: bv64;
  var $i672: bv64;
  var $i673: bv64;
  var $i674: bv32;
  var $i675: bv32;
  var $i676: bv32;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 66, 7} true;
  assume {:verifier.code 0} true;
  call {:cexpr "__SMACK_and32:arg:a"} boogie_si_record_bv32($i0);
  call {:cexpr "__SMACK_and32:arg:b"} boogie_si_record_bv32($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 66, 7} true;
  assume {:verifier.code 0} true;
  $i2 := $sext.bv32.bv64($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 66, 9} true;
  assume {:verifier.code 0} true;
  $i3 := $srem.bv64($i2, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 66, 7} true;
  assume {:verifier.code 0} true;
  $i4 := $trunc.bv64.bv32($i3);
  call {:cexpr "a"} boogie_si_record_bv32($i4);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 67, 5} true;
  assume {:verifier.code 0} true;
  $i5 := $shl.bv32($i4, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i5);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 68, 7} true;
  assume {:verifier.code 0} true;
  $i6 := $sext.bv32.bv64($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 68, 9} true;
  assume {:verifier.code 0} true;
  $i7 := $srem.bv64($i6, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 68, 7} true;
  assume {:verifier.code 0} true;
  $i8 := $trunc.bv64.bv32($i7);
  call {:cexpr "b"} boogie_si_record_bv32($i8);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 69, 5} true;
  assume {:verifier.code 0} true;
  $i9 := $shl.bv32($i8, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i9);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 77, 7} true;
  assume {:verifier.code 0} true;
  $i10 := $sext.bv32.bv64($i5);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 77, 9} true;
  assume {:verifier.code 0} true;
  $i11 := $srem.bv64($i10, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 77, 7} true;
  assume {:verifier.code 0} true;
  $i12 := $trunc.bv64.bv32($i11);
  call {:cexpr "a"} boogie_si_record_bv32($i12);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 78, 5} true;
  assume {:verifier.code 0} true;
  $i13 := $shl.bv32($i12, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i13);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 79, 7} true;
  assume {:verifier.code 0} true;
  $i14 := $sext.bv32.bv64($i9);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 79, 9} true;
  assume {:verifier.code 0} true;
  $i15 := $srem.bv64($i14, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 79, 7} true;
  assume {:verifier.code 0} true;
  $i16 := $trunc.bv64.bv32($i15);
  call {:cexpr "b"} boogie_si_record_bv32($i16);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 80, 5} true;
  assume {:verifier.code 0} true;
  $i17 := $shl.bv32($i16, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i17);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 88, 7} true;
  assume {:verifier.code 0} true;
  $i18 := $sext.bv32.bv64($i13);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 88, 9} true;
  assume {:verifier.code 0} true;
  $i19 := $srem.bv64($i18, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 88, 7} true;
  assume {:verifier.code 0} true;
  $i20 := $trunc.bv64.bv32($i19);
  call {:cexpr "a"} boogie_si_record_bv32($i20);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 89, 5} true;
  assume {:verifier.code 0} true;
  $i21 := $shl.bv32($i20, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i21);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 90, 7} true;
  assume {:verifier.code 0} true;
  $i22 := $sext.bv32.bv64($i17);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 90, 9} true;
  assume {:verifier.code 0} true;
  $i23 := $srem.bv64($i22, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 90, 7} true;
  assume {:verifier.code 0} true;
  $i24 := $trunc.bv64.bv32($i23);
  call {:cexpr "b"} boogie_si_record_bv32($i24);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 91, 5} true;
  assume {:verifier.code 0} true;
  $i25 := $shl.bv32($i24, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i25);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 99, 7} true;
  assume {:verifier.code 0} true;
  $i26 := $sext.bv32.bv64($i21);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 99, 9} true;
  assume {:verifier.code 0} true;
  $i27 := $srem.bv64($i26, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 99, 7} true;
  assume {:verifier.code 0} true;
  $i28 := $trunc.bv64.bv32($i27);
  call {:cexpr "a"} boogie_si_record_bv32($i28);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 100, 5} true;
  assume {:verifier.code 0} true;
  $i29 := $shl.bv32($i28, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i29);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 101, 7} true;
  assume {:verifier.code 0} true;
  $i30 := $sext.bv32.bv64($i25);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 101, 9} true;
  assume {:verifier.code 0} true;
  $i31 := $srem.bv64($i30, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 101, 7} true;
  assume {:verifier.code 0} true;
  $i32 := $trunc.bv64.bv32($i31);
  call {:cexpr "b"} boogie_si_record_bv32($i32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 102, 5} true;
  assume {:verifier.code 0} true;
  $i33 := $shl.bv32($i32, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i33);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 110, 7} true;
  assume {:verifier.code 0} true;
  $i34 := $sext.bv32.bv64($i29);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 110, 9} true;
  assume {:verifier.code 0} true;
  $i35 := $srem.bv64($i34, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 110, 7} true;
  assume {:verifier.code 0} true;
  $i36 := $trunc.bv64.bv32($i35);
  call {:cexpr "a"} boogie_si_record_bv32($i36);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 111, 5} true;
  assume {:verifier.code 0} true;
  $i37 := $shl.bv32($i36, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i37);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 112, 7} true;
  assume {:verifier.code 0} true;
  $i38 := $sext.bv32.bv64($i33);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 112, 9} true;
  assume {:verifier.code 0} true;
  $i39 := $srem.bv64($i38, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 112, 7} true;
  assume {:verifier.code 0} true;
  $i40 := $trunc.bv64.bv32($i39);
  call {:cexpr "b"} boogie_si_record_bv32($i40);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 113, 5} true;
  assume {:verifier.code 0} true;
  $i41 := $shl.bv32($i40, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i41);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 121, 7} true;
  assume {:verifier.code 0} true;
  $i42 := $sext.bv32.bv64($i37);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 121, 9} true;
  assume {:verifier.code 0} true;
  $i43 := $srem.bv64($i42, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 121, 7} true;
  assume {:verifier.code 0} true;
  $i44 := $trunc.bv64.bv32($i43);
  call {:cexpr "a"} boogie_si_record_bv32($i44);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 122, 5} true;
  assume {:verifier.code 0} true;
  $i45 := $shl.bv32($i44, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i45);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 123, 7} true;
  assume {:verifier.code 0} true;
  $i46 := $sext.bv32.bv64($i41);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 123, 9} true;
  assume {:verifier.code 0} true;
  $i47 := $srem.bv64($i46, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 123, 7} true;
  assume {:verifier.code 0} true;
  $i48 := $trunc.bv64.bv32($i47);
  call {:cexpr "b"} boogie_si_record_bv32($i48);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 124, 5} true;
  assume {:verifier.code 0} true;
  $i49 := $shl.bv32($i48, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i49);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 132, 7} true;
  assume {:verifier.code 0} true;
  $i50 := $sext.bv32.bv64($i45);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 132, 9} true;
  assume {:verifier.code 0} true;
  $i51 := $srem.bv64($i50, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 132, 7} true;
  assume {:verifier.code 0} true;
  $i52 := $trunc.bv64.bv32($i51);
  call {:cexpr "a"} boogie_si_record_bv32($i52);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 133, 5} true;
  assume {:verifier.code 0} true;
  $i53 := $shl.bv32($i52, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i53);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 134, 7} true;
  assume {:verifier.code 0} true;
  $i54 := $sext.bv32.bv64($i49);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 134, 9} true;
  assume {:verifier.code 0} true;
  $i55 := $srem.bv64($i54, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 134, 7} true;
  assume {:verifier.code 0} true;
  $i56 := $trunc.bv64.bv32($i55);
  call {:cexpr "b"} boogie_si_record_bv32($i56);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 135, 5} true;
  assume {:verifier.code 0} true;
  $i57 := $shl.bv32($i56, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i57);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 143, 7} true;
  assume {:verifier.code 0} true;
  $i58 := $sext.bv32.bv64($i53);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 143, 9} true;
  assume {:verifier.code 0} true;
  $i59 := $srem.bv64($i58, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 143, 7} true;
  assume {:verifier.code 0} true;
  $i60 := $trunc.bv64.bv32($i59);
  call {:cexpr "a"} boogie_si_record_bv32($i60);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 144, 5} true;
  assume {:verifier.code 0} true;
  $i61 := $shl.bv32($i60, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i61);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 145, 7} true;
  assume {:verifier.code 0} true;
  $i62 := $sext.bv32.bv64($i57);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 145, 9} true;
  assume {:verifier.code 0} true;
  $i63 := $srem.bv64($i62, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 145, 7} true;
  assume {:verifier.code 0} true;
  $i64 := $trunc.bv64.bv32($i63);
  call {:cexpr "b"} boogie_si_record_bv32($i64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 146, 5} true;
  assume {:verifier.code 0} true;
  $i65 := $shl.bv32($i64, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i65);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 154, 7} true;
  assume {:verifier.code 0} true;
  $i66 := $sext.bv32.bv64($i61);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 154, 9} true;
  assume {:verifier.code 0} true;
  $i67 := $srem.bv64($i66, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 154, 7} true;
  assume {:verifier.code 0} true;
  $i68 := $trunc.bv64.bv32($i67);
  call {:cexpr "a"} boogie_si_record_bv32($i68);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 155, 5} true;
  assume {:verifier.code 0} true;
  $i69 := $shl.bv32($i68, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i69);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 156, 7} true;
  assume {:verifier.code 0} true;
  $i70 := $sext.bv32.bv64($i65);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 156, 9} true;
  assume {:verifier.code 0} true;
  $i71 := $srem.bv64($i70, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 156, 7} true;
  assume {:verifier.code 0} true;
  $i72 := $trunc.bv64.bv32($i71);
  call {:cexpr "b"} boogie_si_record_bv32($i72);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 157, 5} true;
  assume {:verifier.code 0} true;
  $i73 := $shl.bv32($i72, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i73);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 165, 7} true;
  assume {:verifier.code 0} true;
  $i74 := $sext.bv32.bv64($i69);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 165, 9} true;
  assume {:verifier.code 0} true;
  $i75 := $srem.bv64($i74, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 165, 7} true;
  assume {:verifier.code 0} true;
  $i76 := $trunc.bv64.bv32($i75);
  call {:cexpr "a"} boogie_si_record_bv32($i76);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 166, 5} true;
  assume {:verifier.code 0} true;
  $i77 := $shl.bv32($i76, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i77);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 167, 7} true;
  assume {:verifier.code 0} true;
  $i78 := $sext.bv32.bv64($i73);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 167, 9} true;
  assume {:verifier.code 0} true;
  $i79 := $srem.bv64($i78, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 167, 7} true;
  assume {:verifier.code 0} true;
  $i80 := $trunc.bv64.bv32($i79);
  call {:cexpr "b"} boogie_si_record_bv32($i80);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 168, 5} true;
  assume {:verifier.code 0} true;
  $i81 := $shl.bv32($i80, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i81);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 176, 7} true;
  assume {:verifier.code 0} true;
  $i82 := $sext.bv32.bv64($i77);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 176, 9} true;
  assume {:verifier.code 0} true;
  $i83 := $srem.bv64($i82, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 176, 7} true;
  assume {:verifier.code 0} true;
  $i84 := $trunc.bv64.bv32($i83);
  call {:cexpr "a"} boogie_si_record_bv32($i84);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 177, 5} true;
  assume {:verifier.code 0} true;
  $i85 := $shl.bv32($i84, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i85);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 178, 7} true;
  assume {:verifier.code 0} true;
  $i86 := $sext.bv32.bv64($i81);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 178, 9} true;
  assume {:verifier.code 0} true;
  $i87 := $srem.bv64($i86, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 178, 7} true;
  assume {:verifier.code 0} true;
  $i88 := $trunc.bv64.bv32($i87);
  call {:cexpr "b"} boogie_si_record_bv32($i88);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 179, 5} true;
  assume {:verifier.code 0} true;
  $i89 := $shl.bv32($i88, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i89);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 187, 7} true;
  assume {:verifier.code 0} true;
  $i90 := $sext.bv32.bv64($i85);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 187, 9} true;
  assume {:verifier.code 0} true;
  $i91 := $srem.bv64($i90, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 187, 7} true;
  assume {:verifier.code 0} true;
  $i92 := $trunc.bv64.bv32($i91);
  call {:cexpr "a"} boogie_si_record_bv32($i92);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 188, 5} true;
  assume {:verifier.code 0} true;
  $i93 := $shl.bv32($i92, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i93);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 189, 7} true;
  assume {:verifier.code 0} true;
  $i94 := $sext.bv32.bv64($i89);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 189, 9} true;
  assume {:verifier.code 0} true;
  $i95 := $srem.bv64($i94, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 189, 7} true;
  assume {:verifier.code 0} true;
  $i96 := $trunc.bv64.bv32($i95);
  call {:cexpr "b"} boogie_si_record_bv32($i96);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 190, 5} true;
  assume {:verifier.code 0} true;
  $i97 := $shl.bv32($i96, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i97);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 198, 7} true;
  assume {:verifier.code 0} true;
  $i98 := $sext.bv32.bv64($i93);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 198, 9} true;
  assume {:verifier.code 0} true;
  $i99 := $srem.bv64($i98, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 198, 7} true;
  assume {:verifier.code 0} true;
  $i100 := $trunc.bv64.bv32($i99);
  call {:cexpr "a"} boogie_si_record_bv32($i100);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 199, 5} true;
  assume {:verifier.code 0} true;
  $i101 := $shl.bv32($i100, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i101);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 200, 7} true;
  assume {:verifier.code 0} true;
  $i102 := $sext.bv32.bv64($i97);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 200, 9} true;
  assume {:verifier.code 0} true;
  $i103 := $srem.bv64($i102, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 200, 7} true;
  assume {:verifier.code 0} true;
  $i104 := $trunc.bv64.bv32($i103);
  call {:cexpr "b"} boogie_si_record_bv32($i104);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 201, 5} true;
  assume {:verifier.code 0} true;
  $i105 := $shl.bv32($i104, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i105);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 209, 7} true;
  assume {:verifier.code 0} true;
  $i106 := $sext.bv32.bv64($i101);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 209, 9} true;
  assume {:verifier.code 0} true;
  $i107 := $srem.bv64($i106, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 209, 7} true;
  assume {:verifier.code 0} true;
  $i108 := $trunc.bv64.bv32($i107);
  call {:cexpr "a"} boogie_si_record_bv32($i108);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 210, 5} true;
  assume {:verifier.code 0} true;
  $i109 := $shl.bv32($i108, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i109);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 211, 7} true;
  assume {:verifier.code 0} true;
  $i110 := $sext.bv32.bv64($i105);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 211, 9} true;
  assume {:verifier.code 0} true;
  $i111 := $srem.bv64($i110, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 211, 7} true;
  assume {:verifier.code 0} true;
  $i112 := $trunc.bv64.bv32($i111);
  call {:cexpr "b"} boogie_si_record_bv32($i112);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 212, 5} true;
  assume {:verifier.code 0} true;
  $i113 := $shl.bv32($i112, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i113);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 220, 7} true;
  assume {:verifier.code 0} true;
  $i114 := $sext.bv32.bv64($i109);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 220, 9} true;
  assume {:verifier.code 0} true;
  $i115 := $srem.bv64($i114, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 220, 7} true;
  assume {:verifier.code 0} true;
  $i116 := $trunc.bv64.bv32($i115);
  call {:cexpr "a"} boogie_si_record_bv32($i116);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 221, 5} true;
  assume {:verifier.code 0} true;
  $i117 := $shl.bv32($i116, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i117);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 222, 7} true;
  assume {:verifier.code 0} true;
  $i118 := $sext.bv32.bv64($i113);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 222, 9} true;
  assume {:verifier.code 0} true;
  $i119 := $srem.bv64($i118, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 222, 7} true;
  assume {:verifier.code 0} true;
  $i120 := $trunc.bv64.bv32($i119);
  call {:cexpr "b"} boogie_si_record_bv32($i120);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 223, 5} true;
  assume {:verifier.code 0} true;
  $i121 := $shl.bv32($i120, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i121);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 231, 7} true;
  assume {:verifier.code 0} true;
  $i122 := $sext.bv32.bv64($i117);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 231, 9} true;
  assume {:verifier.code 0} true;
  $i123 := $srem.bv64($i122, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 231, 7} true;
  assume {:verifier.code 0} true;
  $i124 := $trunc.bv64.bv32($i123);
  call {:cexpr "a"} boogie_si_record_bv32($i124);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 232, 5} true;
  assume {:verifier.code 0} true;
  $i125 := $shl.bv32($i124, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i125);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 233, 7} true;
  assume {:verifier.code 0} true;
  $i126 := $sext.bv32.bv64($i121);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 233, 9} true;
  assume {:verifier.code 0} true;
  $i127 := $srem.bv64($i126, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 233, 7} true;
  assume {:verifier.code 0} true;
  $i128 := $trunc.bv64.bv32($i127);
  call {:cexpr "b"} boogie_si_record_bv32($i128);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 234, 5} true;
  assume {:verifier.code 0} true;
  $i129 := $shl.bv32($i128, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i129);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 242, 7} true;
  assume {:verifier.code 0} true;
  $i130 := $sext.bv32.bv64($i125);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 242, 9} true;
  assume {:verifier.code 0} true;
  $i131 := $srem.bv64($i130, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 242, 7} true;
  assume {:verifier.code 0} true;
  $i132 := $trunc.bv64.bv32($i131);
  call {:cexpr "a"} boogie_si_record_bv32($i132);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 243, 5} true;
  assume {:verifier.code 0} true;
  $i133 := $shl.bv32($i132, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i133);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 244, 7} true;
  assume {:verifier.code 0} true;
  $i134 := $sext.bv32.bv64($i129);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 244, 9} true;
  assume {:verifier.code 0} true;
  $i135 := $srem.bv64($i134, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 244, 7} true;
  assume {:verifier.code 0} true;
  $i136 := $trunc.bv64.bv32($i135);
  call {:cexpr "b"} boogie_si_record_bv32($i136);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 245, 5} true;
  assume {:verifier.code 0} true;
  $i137 := $shl.bv32($i136, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i137);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 253, 7} true;
  assume {:verifier.code 0} true;
  $i138 := $sext.bv32.bv64($i133);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 253, 9} true;
  assume {:verifier.code 0} true;
  $i139 := $srem.bv64($i138, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 253, 7} true;
  assume {:verifier.code 0} true;
  $i140 := $trunc.bv64.bv32($i139);
  call {:cexpr "a"} boogie_si_record_bv32($i140);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 254, 5} true;
  assume {:verifier.code 0} true;
  $i141 := $shl.bv32($i140, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i141);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 255, 7} true;
  assume {:verifier.code 0} true;
  $i142 := $sext.bv32.bv64($i137);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 255, 9} true;
  assume {:verifier.code 0} true;
  $i143 := $srem.bv64($i142, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 255, 7} true;
  assume {:verifier.code 0} true;
  $i144 := $trunc.bv64.bv32($i143);
  call {:cexpr "b"} boogie_si_record_bv32($i144);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 256, 5} true;
  assume {:verifier.code 0} true;
  $i145 := $shl.bv32($i144, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i145);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 264, 7} true;
  assume {:verifier.code 0} true;
  $i146 := $sext.bv32.bv64($i141);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 264, 9} true;
  assume {:verifier.code 0} true;
  $i147 := $srem.bv64($i146, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 264, 7} true;
  assume {:verifier.code 0} true;
  $i148 := $trunc.bv64.bv32($i147);
  call {:cexpr "a"} boogie_si_record_bv32($i148);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 265, 5} true;
  assume {:verifier.code 0} true;
  $i149 := $shl.bv32($i148, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i149);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 266, 7} true;
  assume {:verifier.code 0} true;
  $i150 := $sext.bv32.bv64($i145);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 266, 9} true;
  assume {:verifier.code 0} true;
  $i151 := $srem.bv64($i150, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 266, 7} true;
  assume {:verifier.code 0} true;
  $i152 := $trunc.bv64.bv32($i151);
  call {:cexpr "b"} boogie_si_record_bv32($i152);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 267, 5} true;
  assume {:verifier.code 0} true;
  $i153 := $shl.bv32($i152, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i153);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 275, 7} true;
  assume {:verifier.code 0} true;
  $i154 := $sext.bv32.bv64($i149);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 275, 9} true;
  assume {:verifier.code 0} true;
  $i155 := $srem.bv64($i154, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 275, 7} true;
  assume {:verifier.code 0} true;
  $i156 := $trunc.bv64.bv32($i155);
  call {:cexpr "a"} boogie_si_record_bv32($i156);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 276, 5} true;
  assume {:verifier.code 0} true;
  $i157 := $shl.bv32($i156, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i157);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 277, 7} true;
  assume {:verifier.code 0} true;
  $i158 := $sext.bv32.bv64($i153);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 277, 9} true;
  assume {:verifier.code 0} true;
  $i159 := $srem.bv64($i158, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 277, 7} true;
  assume {:verifier.code 0} true;
  $i160 := $trunc.bv64.bv32($i159);
  call {:cexpr "b"} boogie_si_record_bv32($i160);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 278, 5} true;
  assume {:verifier.code 0} true;
  $i161 := $shl.bv32($i160, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i161);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 286, 7} true;
  assume {:verifier.code 0} true;
  $i162 := $sext.bv32.bv64($i157);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 286, 9} true;
  assume {:verifier.code 0} true;
  $i163 := $srem.bv64($i162, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 286, 7} true;
  assume {:verifier.code 0} true;
  $i164 := $trunc.bv64.bv32($i163);
  call {:cexpr "a"} boogie_si_record_bv32($i164);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 287, 5} true;
  assume {:verifier.code 0} true;
  $i165 := $shl.bv32($i164, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i165);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 288, 7} true;
  assume {:verifier.code 0} true;
  $i166 := $sext.bv32.bv64($i161);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 288, 9} true;
  assume {:verifier.code 0} true;
  $i167 := $srem.bv64($i166, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 288, 7} true;
  assume {:verifier.code 0} true;
  $i168 := $trunc.bv64.bv32($i167);
  call {:cexpr "b"} boogie_si_record_bv32($i168);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 289, 5} true;
  assume {:verifier.code 0} true;
  $i169 := $shl.bv32($i168, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i169);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 297, 7} true;
  assume {:verifier.code 0} true;
  $i170 := $sext.bv32.bv64($i165);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 297, 9} true;
  assume {:verifier.code 0} true;
  $i171 := $srem.bv64($i170, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 297, 7} true;
  assume {:verifier.code 0} true;
  $i172 := $trunc.bv64.bv32($i171);
  call {:cexpr "a"} boogie_si_record_bv32($i172);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 298, 5} true;
  assume {:verifier.code 0} true;
  $i173 := $shl.bv32($i172, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i173);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 299, 7} true;
  assume {:verifier.code 0} true;
  $i174 := $sext.bv32.bv64($i169);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 299, 9} true;
  assume {:verifier.code 0} true;
  $i175 := $srem.bv64($i174, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 299, 7} true;
  assume {:verifier.code 0} true;
  $i176 := $trunc.bv64.bv32($i175);
  call {:cexpr "b"} boogie_si_record_bv32($i176);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 300, 5} true;
  assume {:verifier.code 0} true;
  $i177 := $shl.bv32($i176, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i177);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 308, 7} true;
  assume {:verifier.code 0} true;
  $i178 := $sext.bv32.bv64($i173);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 308, 9} true;
  assume {:verifier.code 0} true;
  $i179 := $srem.bv64($i178, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 308, 7} true;
  assume {:verifier.code 0} true;
  $i180 := $trunc.bv64.bv32($i179);
  call {:cexpr "a"} boogie_si_record_bv32($i180);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 309, 5} true;
  assume {:verifier.code 0} true;
  $i181 := $shl.bv32($i180, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i181);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 310, 7} true;
  assume {:verifier.code 0} true;
  $i182 := $sext.bv32.bv64($i177);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 310, 9} true;
  assume {:verifier.code 0} true;
  $i183 := $srem.bv64($i182, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 310, 7} true;
  assume {:verifier.code 0} true;
  $i184 := $trunc.bv64.bv32($i183);
  call {:cexpr "b"} boogie_si_record_bv32($i184);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 311, 5} true;
  assume {:verifier.code 0} true;
  $i185 := $shl.bv32($i184, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i185);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 319, 7} true;
  assume {:verifier.code 0} true;
  $i186 := $sext.bv32.bv64($i181);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 319, 9} true;
  assume {:verifier.code 0} true;
  $i187 := $srem.bv64($i186, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 319, 7} true;
  assume {:verifier.code 0} true;
  $i188 := $trunc.bv64.bv32($i187);
  call {:cexpr "a"} boogie_si_record_bv32($i188);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 320, 5} true;
  assume {:verifier.code 0} true;
  $i189 := $shl.bv32($i188, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i189);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 321, 7} true;
  assume {:verifier.code 0} true;
  $i190 := $sext.bv32.bv64($i185);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 321, 9} true;
  assume {:verifier.code 0} true;
  $i191 := $srem.bv64($i190, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 321, 7} true;
  assume {:verifier.code 0} true;
  $i192 := $trunc.bv64.bv32($i191);
  call {:cexpr "b"} boogie_si_record_bv32($i192);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 322, 5} true;
  assume {:verifier.code 0} true;
  $i193 := $shl.bv32($i192, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i193);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 330, 7} true;
  assume {:verifier.code 0} true;
  $i194 := $sext.bv32.bv64($i189);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 330, 9} true;
  assume {:verifier.code 0} true;
  $i195 := $srem.bv64($i194, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 330, 7} true;
  assume {:verifier.code 0} true;
  $i196 := $trunc.bv64.bv32($i195);
  call {:cexpr "a"} boogie_si_record_bv32($i196);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 331, 5} true;
  assume {:verifier.code 0} true;
  $i197 := $shl.bv32($i196, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i197);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 332, 7} true;
  assume {:verifier.code 0} true;
  $i198 := $sext.bv32.bv64($i193);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 332, 9} true;
  assume {:verifier.code 0} true;
  $i199 := $srem.bv64($i198, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 332, 7} true;
  assume {:verifier.code 0} true;
  $i200 := $trunc.bv64.bv32($i199);
  call {:cexpr "b"} boogie_si_record_bv32($i200);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 333, 5} true;
  assume {:verifier.code 0} true;
  $i201 := $shl.bv32($i200, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i201);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 341, 7} true;
  assume {:verifier.code 0} true;
  $i202 := $sext.bv32.bv64($i197);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 341, 9} true;
  assume {:verifier.code 0} true;
  $i203 := $srem.bv64($i202, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 341, 7} true;
  assume {:verifier.code 0} true;
  $i204 := $trunc.bv64.bv32($i203);
  call {:cexpr "a"} boogie_si_record_bv32($i204);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 342, 5} true;
  assume {:verifier.code 0} true;
  $i205 := $shl.bv32($i204, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i205);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 343, 7} true;
  assume {:verifier.code 0} true;
  $i206 := $sext.bv32.bv64($i201);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 343, 9} true;
  assume {:verifier.code 0} true;
  $i207 := $srem.bv64($i206, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 343, 7} true;
  assume {:verifier.code 0} true;
  $i208 := $trunc.bv64.bv32($i207);
  call {:cexpr "b"} boogie_si_record_bv32($i208);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 344, 5} true;
  assume {:verifier.code 0} true;
  $i209 := $shl.bv32($i208, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i209);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 352, 7} true;
  assume {:verifier.code 0} true;
  $i210 := $sext.bv32.bv64($i205);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 352, 9} true;
  assume {:verifier.code 0} true;
  $i211 := $srem.bv64($i210, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 352, 7} true;
  assume {:verifier.code 0} true;
  $i212 := $trunc.bv64.bv32($i211);
  call {:cexpr "a"} boogie_si_record_bv32($i212);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 353, 5} true;
  assume {:verifier.code 0} true;
  $i213 := $shl.bv32($i212, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i213);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 354, 7} true;
  assume {:verifier.code 0} true;
  $i214 := $sext.bv32.bv64($i209);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 354, 9} true;
  assume {:verifier.code 0} true;
  $i215 := $srem.bv64($i214, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 354, 7} true;
  assume {:verifier.code 0} true;
  $i216 := $trunc.bv64.bv32($i215);
  call {:cexpr "b"} boogie_si_record_bv32($i216);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 355, 5} true;
  assume {:verifier.code 0} true;
  $i217 := $shl.bv32($i216, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i217);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 363, 7} true;
  assume {:verifier.code 0} true;
  $i218 := $sext.bv32.bv64($i213);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 363, 9} true;
  assume {:verifier.code 0} true;
  $i219 := $srem.bv64($i218, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 363, 7} true;
  assume {:verifier.code 0} true;
  $i220 := $trunc.bv64.bv32($i219);
  call {:cexpr "a"} boogie_si_record_bv32($i220);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 364, 5} true;
  assume {:verifier.code 0} true;
  $i221 := $shl.bv32($i220, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i221);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 365, 7} true;
  assume {:verifier.code 0} true;
  $i222 := $sext.bv32.bv64($i217);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 365, 9} true;
  assume {:verifier.code 0} true;
  $i223 := $srem.bv64($i222, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 365, 7} true;
  assume {:verifier.code 0} true;
  $i224 := $trunc.bv64.bv32($i223);
  call {:cexpr "b"} boogie_si_record_bv32($i224);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 366, 5} true;
  assume {:verifier.code 0} true;
  $i225 := $shl.bv32($i224, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i225);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 374, 7} true;
  assume {:verifier.code 0} true;
  $i226 := $sext.bv32.bv64($i221);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 374, 9} true;
  assume {:verifier.code 0} true;
  $i227 := $srem.bv64($i226, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 374, 7} true;
  assume {:verifier.code 0} true;
  $i228 := $trunc.bv64.bv32($i227);
  call {:cexpr "a"} boogie_si_record_bv32($i228);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 375, 5} true;
  assume {:verifier.code 0} true;
  $i229 := $shl.bv32($i228, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i229);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 376, 7} true;
  assume {:verifier.code 0} true;
  $i230 := $sext.bv32.bv64($i225);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 376, 9} true;
  assume {:verifier.code 0} true;
  $i231 := $srem.bv64($i230, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 376, 7} true;
  assume {:verifier.code 0} true;
  $i232 := $trunc.bv64.bv32($i231);
  call {:cexpr "b"} boogie_si_record_bv32($i232);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 377, 5} true;
  assume {:verifier.code 0} true;
  $i233 := $shl.bv32($i232, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i233);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 385, 7} true;
  assume {:verifier.code 0} true;
  $i234 := $sext.bv32.bv64($i229);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 385, 9} true;
  assume {:verifier.code 0} true;
  $i235 := $srem.bv64($i234, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 385, 7} true;
  assume {:verifier.code 0} true;
  $i236 := $trunc.bv64.bv32($i235);
  call {:cexpr "a"} boogie_si_record_bv32($i236);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 386, 5} true;
  assume {:verifier.code 0} true;
  $i237 := $shl.bv32($i236, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i237);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 387, 7} true;
  assume {:verifier.code 0} true;
  $i238 := $sext.bv32.bv64($i233);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 387, 9} true;
  assume {:verifier.code 0} true;
  $i239 := $srem.bv64($i238, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 387, 7} true;
  assume {:verifier.code 0} true;
  $i240 := $trunc.bv64.bv32($i239);
  call {:cexpr "b"} boogie_si_record_bv32($i240);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 388, 5} true;
  assume {:verifier.code 0} true;
  $i241 := $shl.bv32($i240, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i241);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 396, 7} true;
  assume {:verifier.code 0} true;
  $i242 := $sext.bv32.bv64($i237);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 396, 9} true;
  assume {:verifier.code 0} true;
  $i243 := $srem.bv64($i242, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 396, 7} true;
  assume {:verifier.code 0} true;
  $i244 := $trunc.bv64.bv32($i243);
  call {:cexpr "a"} boogie_si_record_bv32($i244);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 397, 5} true;
  assume {:verifier.code 0} true;
  $i245 := $shl.bv32($i244, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i245);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 398, 7} true;
  assume {:verifier.code 0} true;
  $i246 := $sext.bv32.bv64($i241);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 398, 9} true;
  assume {:verifier.code 0} true;
  $i247 := $srem.bv64($i246, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 398, 7} true;
  assume {:verifier.code 0} true;
  $i248 := $trunc.bv64.bv32($i247);
  call {:cexpr "b"} boogie_si_record_bv32($i248);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 399, 5} true;
  assume {:verifier.code 0} true;
  $i249 := $shl.bv32($i248, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i249);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 407, 7} true;
  assume {:verifier.code 0} true;
  $i250 := $sext.bv32.bv64($i245);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 407, 9} true;
  assume {:verifier.code 0} true;
  $i251 := $srem.bv64($i250, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 407, 7} true;
  assume {:verifier.code 0} true;
  $i252 := $trunc.bv64.bv32($i251);
  call {:cexpr "a"} boogie_si_record_bv32($i252);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 408, 5} true;
  assume {:verifier.code 0} true;
  $i253 := $shl.bv32($i252, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i253);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 409, 7} true;
  assume {:verifier.code 0} true;
  $i254 := $sext.bv32.bv64($i249);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 409, 9} true;
  assume {:verifier.code 0} true;
  $i255 := $srem.bv64($i254, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 409, 7} true;
  assume {:verifier.code 0} true;
  $i256 := $trunc.bv64.bv32($i255);
  call {:cexpr "b"} boogie_si_record_bv32($i256);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 410, 5} true;
  assume {:verifier.code 0} true;
  $i257 := $shl.bv32($i256, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i257);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 413, 7} true;
  assume {:verifier.code 0} true;
  $i258 := $and.bv64($i255, $i251);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 418, 7} true;
  assume {:verifier.code 0} true;
  $i259 := $sext.bv32.bv64($i253);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 418, 9} true;
  assume {:verifier.code 0} true;
  $i260 := $srem.bv64($i259, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 418, 7} true;
  assume {:verifier.code 0} true;
  $i261 := $trunc.bv64.bv32($i260);
  call {:cexpr "a"} boogie_si_record_bv32($i261);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 419, 5} true;
  assume {:verifier.code 0} true;
  $i262 := $shl.bv32($i261, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i262);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 420, 7} true;
  assume {:verifier.code 0} true;
  $i263 := $sext.bv32.bv64($i257);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 420, 9} true;
  assume {:verifier.code 0} true;
  $i264 := $srem.bv64($i263, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 420, 7} true;
  assume {:verifier.code 0} true;
  $i265 := $trunc.bv64.bv32($i264);
  call {:cexpr "b"} boogie_si_record_bv32($i265);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 421, 5} true;
  assume {:verifier.code 0} true;
  $i266 := $shl.bv32($i265, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i266);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 423, 5} true;
  assume {:verifier.code 0} true;
  $i267 := $lshr.bv64($i258, 30bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 423, 5} true;
  assume {:verifier.code 0} true;
  $i268 := $trunc.bv64.bv32($i267);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 423, 5} true;
  assume {:verifier.code 0} true;
  $i269 := $and.bv32($i268, 2bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i269);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 424, 7} true;
  assume {:verifier.code 0} true;
  $i270 := $and.bv64($i264, $i260);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 424, 7} true;
  assume {:verifier.code 0} true;
  $i271 := $lshr.bv64($i270, 31bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 424, 7} true;
  assume {:verifier.code 0} true;
  $i272 := $trunc.bv64.bv32($i271);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 424, 7} true;
  assume {:verifier.code 0} true;
  $i273 := $and.bv32($i272, 1bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 424, 7} true;
  assume {:verifier.code 0} true;
  $i274 := $or.bv32($i269, $i273);
  call {:cexpr "c"} boogie_si_record_bv32($i274);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 429, 7} true;
  assume {:verifier.code 0} true;
  $i275 := $sext.bv32.bv64($i262);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 429, 9} true;
  assume {:verifier.code 0} true;
  $i276 := $srem.bv64($i275, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 429, 7} true;
  assume {:verifier.code 0} true;
  $i277 := $trunc.bv64.bv32($i276);
  call {:cexpr "a"} boogie_si_record_bv32($i277);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 430, 5} true;
  assume {:verifier.code 0} true;
  $i278 := $shl.bv32($i277, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i278);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 431, 7} true;
  assume {:verifier.code 0} true;
  $i279 := $sext.bv32.bv64($i266);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 431, 9} true;
  assume {:verifier.code 0} true;
  $i280 := $srem.bv64($i279, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 431, 7} true;
  assume {:verifier.code 0} true;
  $i281 := $trunc.bv64.bv32($i280);
  call {:cexpr "b"} boogie_si_record_bv32($i281);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 432, 5} true;
  assume {:verifier.code 0} true;
  $i282 := $shl.bv32($i281, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i282);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 435, 7} true;
  assume {:verifier.code 0} true;
  $i283 := $and.bv64($i280, $i276);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 440, 7} true;
  assume {:verifier.code 0} true;
  $i284 := $sext.bv32.bv64($i278);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 440, 9} true;
  assume {:verifier.code 0} true;
  $i285 := $srem.bv64($i284, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 440, 7} true;
  assume {:verifier.code 0} true;
  $i286 := $trunc.bv64.bv32($i285);
  call {:cexpr "a"} boogie_si_record_bv32($i286);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 441, 5} true;
  assume {:verifier.code 0} true;
  $i287 := $shl.bv32($i286, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i287);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 442, 7} true;
  assume {:verifier.code 0} true;
  $i288 := $sext.bv32.bv64($i282);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 442, 9} true;
  assume {:verifier.code 0} true;
  $i289 := $srem.bv64($i288, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 442, 7} true;
  assume {:verifier.code 0} true;
  $i290 := $trunc.bv64.bv32($i289);
  call {:cexpr "b"} boogie_si_record_bv32($i290);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 443, 5} true;
  assume {:verifier.code 0} true;
  $i291 := $shl.bv32($i290, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i291);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 445, 5} true;
  assume {:verifier.code 0} true;
  $i292 := $shl.bv32($i274, 2bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 445, 5} true;
  assume {:verifier.code 0} true;
  $i293 := $lshr.bv64($i283, 30bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 445, 5} true;
  assume {:verifier.code 0} true;
  $i294 := $trunc.bv64.bv32($i293);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 445, 5} true;
  assume {:verifier.code 0} true;
  $i295 := $and.bv32($i294, 2bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 445, 5} true;
  assume {:verifier.code 0} true;
  $i296 := $or.bv32($i295, $i292);
  call {:cexpr "c"} boogie_si_record_bv32($i296);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 446, 7} true;
  assume {:verifier.code 0} true;
  $i297 := $and.bv64($i289, $i285);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 446, 7} true;
  assume {:verifier.code 0} true;
  $i298 := $lshr.bv64($i297, 31bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 446, 7} true;
  assume {:verifier.code 0} true;
  $i299 := $trunc.bv64.bv32($i298);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 446, 7} true;
  assume {:verifier.code 0} true;
  $i300 := $and.bv32($i299, 1bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 446, 7} true;
  assume {:verifier.code 0} true;
  $i301 := $or.bv32($i296, $i300);
  call {:cexpr "c"} boogie_si_record_bv32($i301);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 451, 7} true;
  assume {:verifier.code 0} true;
  $i302 := $sext.bv32.bv64($i287);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 451, 9} true;
  assume {:verifier.code 0} true;
  $i303 := $srem.bv64($i302, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 451, 7} true;
  assume {:verifier.code 0} true;
  $i304 := $trunc.bv64.bv32($i303);
  call {:cexpr "a"} boogie_si_record_bv32($i304);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 452, 5} true;
  assume {:verifier.code 0} true;
  $i305 := $shl.bv32($i304, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i305);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 453, 7} true;
  assume {:verifier.code 0} true;
  $i306 := $sext.bv32.bv64($i291);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 453, 9} true;
  assume {:verifier.code 0} true;
  $i307 := $srem.bv64($i306, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 453, 7} true;
  assume {:verifier.code 0} true;
  $i308 := $trunc.bv64.bv32($i307);
  call {:cexpr "b"} boogie_si_record_bv32($i308);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 454, 5} true;
  assume {:verifier.code 0} true;
  $i309 := $shl.bv32($i308, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i309);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 457, 7} true;
  assume {:verifier.code 0} true;
  $i310 := $and.bv64($i307, $i303);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 462, 7} true;
  assume {:verifier.code 0} true;
  $i311 := $sext.bv32.bv64($i305);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 462, 9} true;
  assume {:verifier.code 0} true;
  $i312 := $srem.bv64($i311, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 462, 7} true;
  assume {:verifier.code 0} true;
  $i313 := $trunc.bv64.bv32($i312);
  call {:cexpr "a"} boogie_si_record_bv32($i313);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 463, 5} true;
  assume {:verifier.code 0} true;
  $i314 := $shl.bv32($i313, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i314);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 464, 7} true;
  assume {:verifier.code 0} true;
  $i315 := $sext.bv32.bv64($i309);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 464, 9} true;
  assume {:verifier.code 0} true;
  $i316 := $srem.bv64($i315, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 464, 7} true;
  assume {:verifier.code 0} true;
  $i317 := $trunc.bv64.bv32($i316);
  call {:cexpr "b"} boogie_si_record_bv32($i317);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 465, 5} true;
  assume {:verifier.code 0} true;
  $i318 := $shl.bv32($i317, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i318);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 467, 5} true;
  assume {:verifier.code 0} true;
  $i319 := $shl.bv32($i301, 2bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 467, 5} true;
  assume {:verifier.code 0} true;
  $i320 := $lshr.bv64($i310, 30bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 467, 5} true;
  assume {:verifier.code 0} true;
  $i321 := $trunc.bv64.bv32($i320);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 467, 5} true;
  assume {:verifier.code 0} true;
  $i322 := $and.bv32($i321, 2bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 467, 5} true;
  assume {:verifier.code 0} true;
  $i323 := $or.bv32($i322, $i319);
  call {:cexpr "c"} boogie_si_record_bv32($i323);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 468, 7} true;
  assume {:verifier.code 0} true;
  $i324 := $and.bv64($i316, $i312);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 468, 7} true;
  assume {:verifier.code 0} true;
  $i325 := $lshr.bv64($i324, 31bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 468, 7} true;
  assume {:verifier.code 0} true;
  $i326 := $trunc.bv64.bv32($i325);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 468, 7} true;
  assume {:verifier.code 0} true;
  $i327 := $and.bv32($i326, 1bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 468, 7} true;
  assume {:verifier.code 0} true;
  $i328 := $or.bv32($i323, $i327);
  call {:cexpr "c"} boogie_si_record_bv32($i328);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 473, 7} true;
  assume {:verifier.code 0} true;
  $i329 := $sext.bv32.bv64($i314);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 473, 9} true;
  assume {:verifier.code 0} true;
  $i330 := $srem.bv64($i329, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 473, 7} true;
  assume {:verifier.code 0} true;
  $i331 := $trunc.bv64.bv32($i330);
  call {:cexpr "a"} boogie_si_record_bv32($i331);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 474, 5} true;
  assume {:verifier.code 0} true;
  $i332 := $shl.bv32($i331, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i332);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 475, 7} true;
  assume {:verifier.code 0} true;
  $i333 := $sext.bv32.bv64($i318);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 475, 9} true;
  assume {:verifier.code 0} true;
  $i334 := $srem.bv64($i333, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 475, 7} true;
  assume {:verifier.code 0} true;
  $i335 := $trunc.bv64.bv32($i334);
  call {:cexpr "b"} boogie_si_record_bv32($i335);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 476, 5} true;
  assume {:verifier.code 0} true;
  $i336 := $shl.bv32($i335, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i336);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 479, 7} true;
  assume {:verifier.code 0} true;
  $i337 := $and.bv64($i334, $i330);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 484, 7} true;
  assume {:verifier.code 0} true;
  $i338 := $sext.bv32.bv64($i332);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 484, 9} true;
  assume {:verifier.code 0} true;
  $i339 := $srem.bv64($i338, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 484, 7} true;
  assume {:verifier.code 0} true;
  $i340 := $trunc.bv64.bv32($i339);
  call {:cexpr "a"} boogie_si_record_bv32($i340);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 485, 5} true;
  assume {:verifier.code 0} true;
  $i341 := $shl.bv32($i340, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i341);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 486, 7} true;
  assume {:verifier.code 0} true;
  $i342 := $sext.bv32.bv64($i336);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 486, 9} true;
  assume {:verifier.code 0} true;
  $i343 := $srem.bv64($i342, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 486, 7} true;
  assume {:verifier.code 0} true;
  $i344 := $trunc.bv64.bv32($i343);
  call {:cexpr "b"} boogie_si_record_bv32($i344);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 487, 5} true;
  assume {:verifier.code 0} true;
  $i345 := $shl.bv32($i344, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i345);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 489, 5} true;
  assume {:verifier.code 0} true;
  $i346 := $shl.bv32($i328, 2bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 489, 5} true;
  assume {:verifier.code 0} true;
  $i347 := $lshr.bv64($i337, 30bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 489, 5} true;
  assume {:verifier.code 0} true;
  $i348 := $trunc.bv64.bv32($i347);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 489, 5} true;
  assume {:verifier.code 0} true;
  $i349 := $and.bv32($i348, 2bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 489, 5} true;
  assume {:verifier.code 0} true;
  $i350 := $or.bv32($i349, $i346);
  call {:cexpr "c"} boogie_si_record_bv32($i350);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 490, 7} true;
  assume {:verifier.code 0} true;
  $i351 := $and.bv64($i343, $i339);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 490, 7} true;
  assume {:verifier.code 0} true;
  $i352 := $lshr.bv64($i351, 31bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 490, 7} true;
  assume {:verifier.code 0} true;
  $i353 := $trunc.bv64.bv32($i352);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 490, 7} true;
  assume {:verifier.code 0} true;
  $i354 := $and.bv32($i353, 1bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 490, 7} true;
  assume {:verifier.code 0} true;
  $i355 := $or.bv32($i350, $i354);
  call {:cexpr "c"} boogie_si_record_bv32($i355);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 495, 7} true;
  assume {:verifier.code 0} true;
  $i356 := $sext.bv32.bv64($i341);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 495, 9} true;
  assume {:verifier.code 0} true;
  $i357 := $srem.bv64($i356, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 495, 7} true;
  assume {:verifier.code 0} true;
  $i358 := $trunc.bv64.bv32($i357);
  call {:cexpr "a"} boogie_si_record_bv32($i358);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 496, 5} true;
  assume {:verifier.code 0} true;
  $i359 := $shl.bv32($i358, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i359);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 497, 7} true;
  assume {:verifier.code 0} true;
  $i360 := $sext.bv32.bv64($i345);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 497, 9} true;
  assume {:verifier.code 0} true;
  $i361 := $srem.bv64($i360, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 497, 7} true;
  assume {:verifier.code 0} true;
  $i362 := $trunc.bv64.bv32($i361);
  call {:cexpr "b"} boogie_si_record_bv32($i362);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 498, 5} true;
  assume {:verifier.code 0} true;
  $i363 := $shl.bv32($i362, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i363);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 501, 7} true;
  assume {:verifier.code 0} true;
  $i364 := $and.bv64($i361, $i357);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 506, 7} true;
  assume {:verifier.code 0} true;
  $i365 := $sext.bv32.bv64($i359);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 506, 9} true;
  assume {:verifier.code 0} true;
  $i366 := $srem.bv64($i365, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 506, 7} true;
  assume {:verifier.code 0} true;
  $i367 := $trunc.bv64.bv32($i366);
  call {:cexpr "a"} boogie_si_record_bv32($i367);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 507, 5} true;
  assume {:verifier.code 0} true;
  $i368 := $shl.bv32($i367, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i368);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 508, 7} true;
  assume {:verifier.code 0} true;
  $i369 := $sext.bv32.bv64($i363);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 508, 9} true;
  assume {:verifier.code 0} true;
  $i370 := $srem.bv64($i369, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 508, 7} true;
  assume {:verifier.code 0} true;
  $i371 := $trunc.bv64.bv32($i370);
  call {:cexpr "b"} boogie_si_record_bv32($i371);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 509, 5} true;
  assume {:verifier.code 0} true;
  $i372 := $shl.bv32($i371, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i372);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 511, 5} true;
  assume {:verifier.code 0} true;
  $i373 := $shl.bv32($i355, 2bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 511, 5} true;
  assume {:verifier.code 0} true;
  $i374 := $lshr.bv64($i364, 30bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 511, 5} true;
  assume {:verifier.code 0} true;
  $i375 := $trunc.bv64.bv32($i374);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 511, 5} true;
  assume {:verifier.code 0} true;
  $i376 := $and.bv32($i375, 2bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 511, 5} true;
  assume {:verifier.code 0} true;
  $i377 := $or.bv32($i376, $i373);
  call {:cexpr "c"} boogie_si_record_bv32($i377);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 512, 7} true;
  assume {:verifier.code 0} true;
  $i378 := $and.bv64($i370, $i366);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 512, 7} true;
  assume {:verifier.code 0} true;
  $i379 := $lshr.bv64($i378, 31bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 512, 7} true;
  assume {:verifier.code 0} true;
  $i380 := $trunc.bv64.bv32($i379);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 512, 7} true;
  assume {:verifier.code 0} true;
  $i381 := $and.bv32($i380, 1bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 512, 7} true;
  assume {:verifier.code 0} true;
  $i382 := $or.bv32($i377, $i381);
  call {:cexpr "c"} boogie_si_record_bv32($i382);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 517, 7} true;
  assume {:verifier.code 0} true;
  $i383 := $sext.bv32.bv64($i368);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 517, 9} true;
  assume {:verifier.code 0} true;
  $i384 := $srem.bv64($i383, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 517, 7} true;
  assume {:verifier.code 0} true;
  $i385 := $trunc.bv64.bv32($i384);
  call {:cexpr "a"} boogie_si_record_bv32($i385);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 518, 5} true;
  assume {:verifier.code 0} true;
  $i386 := $shl.bv32($i385, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i386);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 519, 7} true;
  assume {:verifier.code 0} true;
  $i387 := $sext.bv32.bv64($i372);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 519, 9} true;
  assume {:verifier.code 0} true;
  $i388 := $srem.bv64($i387, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 519, 7} true;
  assume {:verifier.code 0} true;
  $i389 := $trunc.bv64.bv32($i388);
  call {:cexpr "b"} boogie_si_record_bv32($i389);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 520, 5} true;
  assume {:verifier.code 0} true;
  $i390 := $shl.bv32($i389, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i390);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 523, 7} true;
  assume {:verifier.code 0} true;
  $i391 := $and.bv64($i388, $i384);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 528, 7} true;
  assume {:verifier.code 0} true;
  $i392 := $sext.bv32.bv64($i386);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 528, 9} true;
  assume {:verifier.code 0} true;
  $i393 := $srem.bv64($i392, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 528, 7} true;
  assume {:verifier.code 0} true;
  $i394 := $trunc.bv64.bv32($i393);
  call {:cexpr "a"} boogie_si_record_bv32($i394);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 529, 5} true;
  assume {:verifier.code 0} true;
  $i395 := $shl.bv32($i394, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i395);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 530, 7} true;
  assume {:verifier.code 0} true;
  $i396 := $sext.bv32.bv64($i390);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 530, 9} true;
  assume {:verifier.code 0} true;
  $i397 := $srem.bv64($i396, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 530, 7} true;
  assume {:verifier.code 0} true;
  $i398 := $trunc.bv64.bv32($i397);
  call {:cexpr "b"} boogie_si_record_bv32($i398);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 531, 5} true;
  assume {:verifier.code 0} true;
  $i399 := $shl.bv32($i398, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i399);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 533, 5} true;
  assume {:verifier.code 0} true;
  $i400 := $shl.bv32($i382, 2bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 533, 5} true;
  assume {:verifier.code 0} true;
  $i401 := $lshr.bv64($i391, 30bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 533, 5} true;
  assume {:verifier.code 0} true;
  $i402 := $trunc.bv64.bv32($i401);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 533, 5} true;
  assume {:verifier.code 0} true;
  $i403 := $and.bv32($i402, 2bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 533, 5} true;
  assume {:verifier.code 0} true;
  $i404 := $or.bv32($i403, $i400);
  call {:cexpr "c"} boogie_si_record_bv32($i404);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 534, 7} true;
  assume {:verifier.code 0} true;
  $i405 := $and.bv64($i397, $i393);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 534, 7} true;
  assume {:verifier.code 0} true;
  $i406 := $lshr.bv64($i405, 31bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 534, 7} true;
  assume {:verifier.code 0} true;
  $i407 := $trunc.bv64.bv32($i406);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 534, 7} true;
  assume {:verifier.code 0} true;
  $i408 := $and.bv32($i407, 1bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 534, 7} true;
  assume {:verifier.code 0} true;
  $i409 := $or.bv32($i404, $i408);
  call {:cexpr "c"} boogie_si_record_bv32($i409);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 539, 7} true;
  assume {:verifier.code 0} true;
  $i410 := $sext.bv32.bv64($i395);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 539, 9} true;
  assume {:verifier.code 0} true;
  $i411 := $srem.bv64($i410, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 539, 7} true;
  assume {:verifier.code 0} true;
  $i412 := $trunc.bv64.bv32($i411);
  call {:cexpr "a"} boogie_si_record_bv32($i412);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 540, 5} true;
  assume {:verifier.code 0} true;
  $i413 := $shl.bv32($i412, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i413);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 541, 7} true;
  assume {:verifier.code 0} true;
  $i414 := $sext.bv32.bv64($i399);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 541, 9} true;
  assume {:verifier.code 0} true;
  $i415 := $srem.bv64($i414, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 541, 7} true;
  assume {:verifier.code 0} true;
  $i416 := $trunc.bv64.bv32($i415);
  call {:cexpr "b"} boogie_si_record_bv32($i416);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 542, 5} true;
  assume {:verifier.code 0} true;
  $i417 := $shl.bv32($i416, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i417);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 545, 7} true;
  assume {:verifier.code 0} true;
  $i418 := $and.bv64($i415, $i411);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 550, 7} true;
  assume {:verifier.code 0} true;
  $i419 := $sext.bv32.bv64($i413);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 550, 9} true;
  assume {:verifier.code 0} true;
  $i420 := $srem.bv64($i419, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 550, 7} true;
  assume {:verifier.code 0} true;
  $i421 := $trunc.bv64.bv32($i420);
  call {:cexpr "a"} boogie_si_record_bv32($i421);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 551, 5} true;
  assume {:verifier.code 0} true;
  $i422 := $shl.bv32($i421, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i422);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 552, 7} true;
  assume {:verifier.code 0} true;
  $i423 := $sext.bv32.bv64($i417);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 552, 9} true;
  assume {:verifier.code 0} true;
  $i424 := $srem.bv64($i423, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 552, 7} true;
  assume {:verifier.code 0} true;
  $i425 := $trunc.bv64.bv32($i424);
  call {:cexpr "b"} boogie_si_record_bv32($i425);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 553, 5} true;
  assume {:verifier.code 0} true;
  $i426 := $shl.bv32($i425, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i426);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 555, 5} true;
  assume {:verifier.code 0} true;
  $i427 := $shl.bv32($i409, 2bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 555, 5} true;
  assume {:verifier.code 0} true;
  $i428 := $lshr.bv64($i418, 30bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 555, 5} true;
  assume {:verifier.code 0} true;
  $i429 := $trunc.bv64.bv32($i428);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 555, 5} true;
  assume {:verifier.code 0} true;
  $i430 := $and.bv32($i429, 2bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 555, 5} true;
  assume {:verifier.code 0} true;
  $i431 := $or.bv32($i430, $i427);
  call {:cexpr "c"} boogie_si_record_bv32($i431);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 556, 7} true;
  assume {:verifier.code 0} true;
  $i432 := $and.bv64($i424, $i420);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 556, 7} true;
  assume {:verifier.code 0} true;
  $i433 := $lshr.bv64($i432, 31bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 556, 7} true;
  assume {:verifier.code 0} true;
  $i434 := $trunc.bv64.bv32($i433);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 556, 7} true;
  assume {:verifier.code 0} true;
  $i435 := $and.bv32($i434, 1bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 556, 7} true;
  assume {:verifier.code 0} true;
  $i436 := $or.bv32($i431, $i435);
  call {:cexpr "c"} boogie_si_record_bv32($i436);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 561, 7} true;
  assume {:verifier.code 0} true;
  $i437 := $sext.bv32.bv64($i422);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 561, 9} true;
  assume {:verifier.code 0} true;
  $i438 := $srem.bv64($i437, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 561, 7} true;
  assume {:verifier.code 0} true;
  $i439 := $trunc.bv64.bv32($i438);
  call {:cexpr "a"} boogie_si_record_bv32($i439);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 562, 5} true;
  assume {:verifier.code 0} true;
  $i440 := $shl.bv32($i439, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i440);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 563, 7} true;
  assume {:verifier.code 0} true;
  $i441 := $sext.bv32.bv64($i426);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 563, 9} true;
  assume {:verifier.code 0} true;
  $i442 := $srem.bv64($i441, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 563, 7} true;
  assume {:verifier.code 0} true;
  $i443 := $trunc.bv64.bv32($i442);
  call {:cexpr "b"} boogie_si_record_bv32($i443);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 564, 5} true;
  assume {:verifier.code 0} true;
  $i444 := $shl.bv32($i443, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i444);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 567, 7} true;
  assume {:verifier.code 0} true;
  $i445 := $and.bv64($i442, $i438);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 572, 7} true;
  assume {:verifier.code 0} true;
  $i446 := $sext.bv32.bv64($i440);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 572, 9} true;
  assume {:verifier.code 0} true;
  $i447 := $srem.bv64($i446, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 572, 7} true;
  assume {:verifier.code 0} true;
  $i448 := $trunc.bv64.bv32($i447);
  call {:cexpr "a"} boogie_si_record_bv32($i448);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 573, 5} true;
  assume {:verifier.code 0} true;
  $i449 := $shl.bv32($i448, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i449);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 574, 7} true;
  assume {:verifier.code 0} true;
  $i450 := $sext.bv32.bv64($i444);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 574, 9} true;
  assume {:verifier.code 0} true;
  $i451 := $srem.bv64($i450, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 574, 7} true;
  assume {:verifier.code 0} true;
  $i452 := $trunc.bv64.bv32($i451);
  call {:cexpr "b"} boogie_si_record_bv32($i452);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 575, 5} true;
  assume {:verifier.code 0} true;
  $i453 := $shl.bv32($i452, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i453);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 577, 5} true;
  assume {:verifier.code 0} true;
  $i454 := $shl.bv32($i436, 2bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 577, 5} true;
  assume {:verifier.code 0} true;
  $i455 := $lshr.bv64($i445, 30bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 577, 5} true;
  assume {:verifier.code 0} true;
  $i456 := $trunc.bv64.bv32($i455);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 577, 5} true;
  assume {:verifier.code 0} true;
  $i457 := $and.bv32($i456, 2bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 577, 5} true;
  assume {:verifier.code 0} true;
  $i458 := $or.bv32($i457, $i454);
  call {:cexpr "c"} boogie_si_record_bv32($i458);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 578, 7} true;
  assume {:verifier.code 0} true;
  $i459 := $and.bv64($i451, $i447);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 578, 7} true;
  assume {:verifier.code 0} true;
  $i460 := $lshr.bv64($i459, 31bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 578, 7} true;
  assume {:verifier.code 0} true;
  $i461 := $trunc.bv64.bv32($i460);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 578, 7} true;
  assume {:verifier.code 0} true;
  $i462 := $and.bv32($i461, 1bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 578, 7} true;
  assume {:verifier.code 0} true;
  $i463 := $or.bv32($i458, $i462);
  call {:cexpr "c"} boogie_si_record_bv32($i463);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 583, 7} true;
  assume {:verifier.code 0} true;
  $i464 := $sext.bv32.bv64($i449);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 583, 9} true;
  assume {:verifier.code 0} true;
  $i465 := $srem.bv64($i464, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 583, 7} true;
  assume {:verifier.code 0} true;
  $i466 := $trunc.bv64.bv32($i465);
  call {:cexpr "a"} boogie_si_record_bv32($i466);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 584, 5} true;
  assume {:verifier.code 0} true;
  $i467 := $shl.bv32($i466, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i467);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 585, 7} true;
  assume {:verifier.code 0} true;
  $i468 := $sext.bv32.bv64($i453);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 585, 9} true;
  assume {:verifier.code 0} true;
  $i469 := $srem.bv64($i468, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 585, 7} true;
  assume {:verifier.code 0} true;
  $i470 := $trunc.bv64.bv32($i469);
  call {:cexpr "b"} boogie_si_record_bv32($i470);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 586, 5} true;
  assume {:verifier.code 0} true;
  $i471 := $shl.bv32($i470, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i471);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 589, 7} true;
  assume {:verifier.code 0} true;
  $i472 := $and.bv64($i469, $i465);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 594, 7} true;
  assume {:verifier.code 0} true;
  $i473 := $sext.bv32.bv64($i467);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 594, 9} true;
  assume {:verifier.code 0} true;
  $i474 := $srem.bv64($i473, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 594, 7} true;
  assume {:verifier.code 0} true;
  $i475 := $trunc.bv64.bv32($i474);
  call {:cexpr "a"} boogie_si_record_bv32($i475);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 595, 5} true;
  assume {:verifier.code 0} true;
  $i476 := $shl.bv32($i475, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i476);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 596, 7} true;
  assume {:verifier.code 0} true;
  $i477 := $sext.bv32.bv64($i471);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 596, 9} true;
  assume {:verifier.code 0} true;
  $i478 := $srem.bv64($i477, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 596, 7} true;
  assume {:verifier.code 0} true;
  $i479 := $trunc.bv64.bv32($i478);
  call {:cexpr "b"} boogie_si_record_bv32($i479);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 597, 5} true;
  assume {:verifier.code 0} true;
  $i480 := $shl.bv32($i479, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i480);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 599, 5} true;
  assume {:verifier.code 0} true;
  $i481 := $shl.bv32($i463, 2bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 599, 5} true;
  assume {:verifier.code 0} true;
  $i482 := $lshr.bv64($i472, 30bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 599, 5} true;
  assume {:verifier.code 0} true;
  $i483 := $trunc.bv64.bv32($i482);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 599, 5} true;
  assume {:verifier.code 0} true;
  $i484 := $and.bv32($i483, 2bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 599, 5} true;
  assume {:verifier.code 0} true;
  $i485 := $or.bv32($i484, $i481);
  call {:cexpr "c"} boogie_si_record_bv32($i485);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 600, 7} true;
  assume {:verifier.code 0} true;
  $i486 := $and.bv64($i478, $i474);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 600, 7} true;
  assume {:verifier.code 0} true;
  $i487 := $lshr.bv64($i486, 31bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 600, 7} true;
  assume {:verifier.code 0} true;
  $i488 := $trunc.bv64.bv32($i487);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 600, 7} true;
  assume {:verifier.code 0} true;
  $i489 := $and.bv32($i488, 1bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 600, 7} true;
  assume {:verifier.code 0} true;
  $i490 := $or.bv32($i485, $i489);
  call {:cexpr "c"} boogie_si_record_bv32($i490);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 605, 7} true;
  assume {:verifier.code 0} true;
  $i491 := $sext.bv32.bv64($i476);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 605, 9} true;
  assume {:verifier.code 0} true;
  $i492 := $srem.bv64($i491, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 605, 7} true;
  assume {:verifier.code 0} true;
  $i493 := $trunc.bv64.bv32($i492);
  call {:cexpr "a"} boogie_si_record_bv32($i493);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 606, 5} true;
  assume {:verifier.code 0} true;
  $i494 := $shl.bv32($i493, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i494);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 607, 7} true;
  assume {:verifier.code 0} true;
  $i495 := $sext.bv32.bv64($i480);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 607, 9} true;
  assume {:verifier.code 0} true;
  $i496 := $srem.bv64($i495, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 607, 7} true;
  assume {:verifier.code 0} true;
  $i497 := $trunc.bv64.bv32($i496);
  call {:cexpr "b"} boogie_si_record_bv32($i497);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 608, 5} true;
  assume {:verifier.code 0} true;
  $i498 := $shl.bv32($i497, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i498);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 611, 7} true;
  assume {:verifier.code 0} true;
  $i499 := $and.bv64($i496, $i492);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 616, 7} true;
  assume {:verifier.code 0} true;
  $i500 := $sext.bv32.bv64($i494);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 616, 9} true;
  assume {:verifier.code 0} true;
  $i501 := $srem.bv64($i500, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 616, 7} true;
  assume {:verifier.code 0} true;
  $i502 := $trunc.bv64.bv32($i501);
  call {:cexpr "a"} boogie_si_record_bv32($i502);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 617, 5} true;
  assume {:verifier.code 0} true;
  $i503 := $shl.bv32($i502, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i503);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 618, 7} true;
  assume {:verifier.code 0} true;
  $i504 := $sext.bv32.bv64($i498);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 618, 9} true;
  assume {:verifier.code 0} true;
  $i505 := $srem.bv64($i504, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 618, 7} true;
  assume {:verifier.code 0} true;
  $i506 := $trunc.bv64.bv32($i505);
  call {:cexpr "b"} boogie_si_record_bv32($i506);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 619, 5} true;
  assume {:verifier.code 0} true;
  $i507 := $shl.bv32($i506, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i507);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 621, 5} true;
  assume {:verifier.code 0} true;
  $i508 := $shl.bv32($i490, 2bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 621, 5} true;
  assume {:verifier.code 0} true;
  $i509 := $lshr.bv64($i499, 30bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 621, 5} true;
  assume {:verifier.code 0} true;
  $i510 := $trunc.bv64.bv32($i509);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 621, 5} true;
  assume {:verifier.code 0} true;
  $i511 := $and.bv32($i510, 2bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 621, 5} true;
  assume {:verifier.code 0} true;
  $i512 := $or.bv32($i511, $i508);
  call {:cexpr "c"} boogie_si_record_bv32($i512);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 622, 7} true;
  assume {:verifier.code 0} true;
  $i513 := $and.bv64($i505, $i501);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 622, 7} true;
  assume {:verifier.code 0} true;
  $i514 := $lshr.bv64($i513, 31bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 622, 7} true;
  assume {:verifier.code 0} true;
  $i515 := $trunc.bv64.bv32($i514);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 622, 7} true;
  assume {:verifier.code 0} true;
  $i516 := $and.bv32($i515, 1bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 622, 7} true;
  assume {:verifier.code 0} true;
  $i517 := $or.bv32($i512, $i516);
  call {:cexpr "c"} boogie_si_record_bv32($i517);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 627, 7} true;
  assume {:verifier.code 0} true;
  $i518 := $sext.bv32.bv64($i503);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 627, 9} true;
  assume {:verifier.code 0} true;
  $i519 := $srem.bv64($i518, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 627, 7} true;
  assume {:verifier.code 0} true;
  $i520 := $trunc.bv64.bv32($i519);
  call {:cexpr "a"} boogie_si_record_bv32($i520);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 628, 5} true;
  assume {:verifier.code 0} true;
  $i521 := $shl.bv32($i520, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i521);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 629, 7} true;
  assume {:verifier.code 0} true;
  $i522 := $sext.bv32.bv64($i507);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 629, 9} true;
  assume {:verifier.code 0} true;
  $i523 := $srem.bv64($i522, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 629, 7} true;
  assume {:verifier.code 0} true;
  $i524 := $trunc.bv64.bv32($i523);
  call {:cexpr "b"} boogie_si_record_bv32($i524);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 630, 5} true;
  assume {:verifier.code 0} true;
  $i525 := $shl.bv32($i524, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i525);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 633, 7} true;
  assume {:verifier.code 0} true;
  $i526 := $and.bv64($i523, $i519);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 638, 7} true;
  assume {:verifier.code 0} true;
  $i527 := $sext.bv32.bv64($i521);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 638, 9} true;
  assume {:verifier.code 0} true;
  $i528 := $srem.bv64($i527, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 638, 7} true;
  assume {:verifier.code 0} true;
  $i529 := $trunc.bv64.bv32($i528);
  call {:cexpr "a"} boogie_si_record_bv32($i529);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 639, 5} true;
  assume {:verifier.code 0} true;
  $i530 := $shl.bv32($i529, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i530);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 640, 7} true;
  assume {:verifier.code 0} true;
  $i531 := $sext.bv32.bv64($i525);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 640, 9} true;
  assume {:verifier.code 0} true;
  $i532 := $srem.bv64($i531, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 640, 7} true;
  assume {:verifier.code 0} true;
  $i533 := $trunc.bv64.bv32($i532);
  call {:cexpr "b"} boogie_si_record_bv32($i533);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 641, 5} true;
  assume {:verifier.code 0} true;
  $i534 := $shl.bv32($i533, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i534);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 643, 5} true;
  assume {:verifier.code 0} true;
  $i535 := $shl.bv32($i517, 2bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 643, 5} true;
  assume {:verifier.code 0} true;
  $i536 := $lshr.bv64($i526, 30bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 643, 5} true;
  assume {:verifier.code 0} true;
  $i537 := $trunc.bv64.bv32($i536);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 643, 5} true;
  assume {:verifier.code 0} true;
  $i538 := $and.bv32($i537, 2bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 643, 5} true;
  assume {:verifier.code 0} true;
  $i539 := $or.bv32($i538, $i535);
  call {:cexpr "c"} boogie_si_record_bv32($i539);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 644, 7} true;
  assume {:verifier.code 0} true;
  $i540 := $and.bv64($i532, $i528);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 644, 7} true;
  assume {:verifier.code 0} true;
  $i541 := $lshr.bv64($i540, 31bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 644, 7} true;
  assume {:verifier.code 0} true;
  $i542 := $trunc.bv64.bv32($i541);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 644, 7} true;
  assume {:verifier.code 0} true;
  $i543 := $and.bv32($i542, 1bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 644, 7} true;
  assume {:verifier.code 0} true;
  $i544 := $or.bv32($i539, $i543);
  call {:cexpr "c"} boogie_si_record_bv32($i544);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 649, 7} true;
  assume {:verifier.code 0} true;
  $i545 := $sext.bv32.bv64($i530);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 649, 9} true;
  assume {:verifier.code 0} true;
  $i546 := $srem.bv64($i545, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 649, 7} true;
  assume {:verifier.code 0} true;
  $i547 := $trunc.bv64.bv32($i546);
  call {:cexpr "a"} boogie_si_record_bv32($i547);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 650, 5} true;
  assume {:verifier.code 0} true;
  $i548 := $shl.bv32($i547, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i548);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 651, 7} true;
  assume {:verifier.code 0} true;
  $i549 := $sext.bv32.bv64($i534);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 651, 9} true;
  assume {:verifier.code 0} true;
  $i550 := $srem.bv64($i549, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 651, 7} true;
  assume {:verifier.code 0} true;
  $i551 := $trunc.bv64.bv32($i550);
  call {:cexpr "b"} boogie_si_record_bv32($i551);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 652, 5} true;
  assume {:verifier.code 0} true;
  $i552 := $shl.bv32($i551, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i552);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 655, 7} true;
  assume {:verifier.code 0} true;
  $i553 := $and.bv64($i550, $i546);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 660, 7} true;
  assume {:verifier.code 0} true;
  $i554 := $sext.bv32.bv64($i548);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 660, 9} true;
  assume {:verifier.code 0} true;
  $i555 := $srem.bv64($i554, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 660, 7} true;
  assume {:verifier.code 0} true;
  $i556 := $trunc.bv64.bv32($i555);
  call {:cexpr "a"} boogie_si_record_bv32($i556);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 661, 5} true;
  assume {:verifier.code 0} true;
  $i557 := $shl.bv32($i556, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i557);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 662, 7} true;
  assume {:verifier.code 0} true;
  $i558 := $sext.bv32.bv64($i552);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 662, 9} true;
  assume {:verifier.code 0} true;
  $i559 := $srem.bv64($i558, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 662, 7} true;
  assume {:verifier.code 0} true;
  $i560 := $trunc.bv64.bv32($i559);
  call {:cexpr "b"} boogie_si_record_bv32($i560);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 663, 5} true;
  assume {:verifier.code 0} true;
  $i561 := $shl.bv32($i560, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i561);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 665, 5} true;
  assume {:verifier.code 0} true;
  $i562 := $shl.bv32($i544, 2bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 665, 5} true;
  assume {:verifier.code 0} true;
  $i563 := $lshr.bv64($i553, 30bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 665, 5} true;
  assume {:verifier.code 0} true;
  $i564 := $trunc.bv64.bv32($i563);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 665, 5} true;
  assume {:verifier.code 0} true;
  $i565 := $and.bv32($i564, 2bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 665, 5} true;
  assume {:verifier.code 0} true;
  $i566 := $or.bv32($i565, $i562);
  call {:cexpr "c"} boogie_si_record_bv32($i566);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 666, 7} true;
  assume {:verifier.code 0} true;
  $i567 := $and.bv64($i559, $i555);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 666, 7} true;
  assume {:verifier.code 0} true;
  $i568 := $lshr.bv64($i567, 31bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 666, 7} true;
  assume {:verifier.code 0} true;
  $i569 := $trunc.bv64.bv32($i568);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 666, 7} true;
  assume {:verifier.code 0} true;
  $i570 := $and.bv32($i569, 1bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 666, 7} true;
  assume {:verifier.code 0} true;
  $i571 := $or.bv32($i566, $i570);
  call {:cexpr "c"} boogie_si_record_bv32($i571);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 671, 7} true;
  assume {:verifier.code 0} true;
  $i572 := $sext.bv32.bv64($i557);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 671, 9} true;
  assume {:verifier.code 0} true;
  $i573 := $srem.bv64($i572, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 671, 7} true;
  assume {:verifier.code 0} true;
  $i574 := $trunc.bv64.bv32($i573);
  call {:cexpr "a"} boogie_si_record_bv32($i574);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 672, 5} true;
  assume {:verifier.code 0} true;
  $i575 := $shl.bv32($i574, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i575);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 673, 7} true;
  assume {:verifier.code 0} true;
  $i576 := $sext.bv32.bv64($i561);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 673, 9} true;
  assume {:verifier.code 0} true;
  $i577 := $srem.bv64($i576, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 673, 7} true;
  assume {:verifier.code 0} true;
  $i578 := $trunc.bv64.bv32($i577);
  call {:cexpr "b"} boogie_si_record_bv32($i578);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 674, 5} true;
  assume {:verifier.code 0} true;
  $i579 := $shl.bv32($i578, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i579);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 677, 7} true;
  assume {:verifier.code 0} true;
  $i580 := $and.bv64($i577, $i573);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 682, 7} true;
  assume {:verifier.code 0} true;
  $i581 := $sext.bv32.bv64($i575);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 682, 9} true;
  assume {:verifier.code 0} true;
  $i582 := $srem.bv64($i581, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 682, 7} true;
  assume {:verifier.code 0} true;
  $i583 := $trunc.bv64.bv32($i582);
  call {:cexpr "a"} boogie_si_record_bv32($i583);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 683, 5} true;
  assume {:verifier.code 0} true;
  $i584 := $shl.bv32($i583, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i584);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 684, 7} true;
  assume {:verifier.code 0} true;
  $i585 := $sext.bv32.bv64($i579);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 684, 9} true;
  assume {:verifier.code 0} true;
  $i586 := $srem.bv64($i585, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 684, 7} true;
  assume {:verifier.code 0} true;
  $i587 := $trunc.bv64.bv32($i586);
  call {:cexpr "b"} boogie_si_record_bv32($i587);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 685, 5} true;
  assume {:verifier.code 0} true;
  $i588 := $shl.bv32($i587, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i588);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 687, 5} true;
  assume {:verifier.code 0} true;
  $i589 := $shl.bv32($i571, 2bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 687, 5} true;
  assume {:verifier.code 0} true;
  $i590 := $lshr.bv64($i580, 30bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 687, 5} true;
  assume {:verifier.code 0} true;
  $i591 := $trunc.bv64.bv32($i590);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 687, 5} true;
  assume {:verifier.code 0} true;
  $i592 := $and.bv32($i591, 2bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 687, 5} true;
  assume {:verifier.code 0} true;
  $i593 := $or.bv32($i592, $i589);
  call {:cexpr "c"} boogie_si_record_bv32($i593);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 688, 7} true;
  assume {:verifier.code 0} true;
  $i594 := $and.bv64($i586, $i582);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 688, 7} true;
  assume {:verifier.code 0} true;
  $i595 := $lshr.bv64($i594, 31bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 688, 7} true;
  assume {:verifier.code 0} true;
  $i596 := $trunc.bv64.bv32($i595);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 688, 7} true;
  assume {:verifier.code 0} true;
  $i597 := $and.bv32($i596, 1bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 688, 7} true;
  assume {:verifier.code 0} true;
  $i598 := $or.bv32($i593, $i597);
  call {:cexpr "c"} boogie_si_record_bv32($i598);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 693, 7} true;
  assume {:verifier.code 0} true;
  $i599 := $sext.bv32.bv64($i584);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 693, 9} true;
  assume {:verifier.code 0} true;
  $i600 := $srem.bv64($i599, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 693, 7} true;
  assume {:verifier.code 0} true;
  $i601 := $trunc.bv64.bv32($i600);
  call {:cexpr "a"} boogie_si_record_bv32($i601);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 694, 5} true;
  assume {:verifier.code 0} true;
  $i602 := $shl.bv32($i601, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i602);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 695, 7} true;
  assume {:verifier.code 0} true;
  $i603 := $sext.bv32.bv64($i588);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 695, 9} true;
  assume {:verifier.code 0} true;
  $i604 := $srem.bv64($i603, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 695, 7} true;
  assume {:verifier.code 0} true;
  $i605 := $trunc.bv64.bv32($i604);
  call {:cexpr "b"} boogie_si_record_bv32($i605);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 696, 5} true;
  assume {:verifier.code 0} true;
  $i606 := $shl.bv32($i605, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i606);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 699, 7} true;
  assume {:verifier.code 0} true;
  $i607 := $and.bv64($i604, $i600);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 704, 7} true;
  assume {:verifier.code 0} true;
  $i608 := $sext.bv32.bv64($i602);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 704, 9} true;
  assume {:verifier.code 0} true;
  $i609 := $srem.bv64($i608, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 704, 7} true;
  assume {:verifier.code 0} true;
  $i610 := $trunc.bv64.bv32($i609);
  call {:cexpr "a"} boogie_si_record_bv32($i610);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 705, 5} true;
  assume {:verifier.code 0} true;
  $i611 := $shl.bv32($i610, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i611);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 706, 7} true;
  assume {:verifier.code 0} true;
  $i612 := $sext.bv32.bv64($i606);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 706, 9} true;
  assume {:verifier.code 0} true;
  $i613 := $srem.bv64($i612, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 706, 7} true;
  assume {:verifier.code 0} true;
  $i614 := $trunc.bv64.bv32($i613);
  call {:cexpr "b"} boogie_si_record_bv32($i614);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 707, 5} true;
  assume {:verifier.code 0} true;
  $i615 := $shl.bv32($i614, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i615);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 709, 5} true;
  assume {:verifier.code 0} true;
  $i616 := $shl.bv32($i598, 2bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 709, 5} true;
  assume {:verifier.code 0} true;
  $i617 := $lshr.bv64($i607, 30bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 709, 5} true;
  assume {:verifier.code 0} true;
  $i618 := $trunc.bv64.bv32($i617);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 709, 5} true;
  assume {:verifier.code 0} true;
  $i619 := $and.bv32($i618, 2bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 709, 5} true;
  assume {:verifier.code 0} true;
  $i620 := $or.bv32($i619, $i616);
  call {:cexpr "c"} boogie_si_record_bv32($i620);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 710, 7} true;
  assume {:verifier.code 0} true;
  $i621 := $and.bv64($i613, $i609);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 710, 7} true;
  assume {:verifier.code 0} true;
  $i622 := $lshr.bv64($i621, 31bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 710, 7} true;
  assume {:verifier.code 0} true;
  $i623 := $trunc.bv64.bv32($i622);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 710, 7} true;
  assume {:verifier.code 0} true;
  $i624 := $and.bv32($i623, 1bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 710, 7} true;
  assume {:verifier.code 0} true;
  $i625 := $or.bv32($i620, $i624);
  call {:cexpr "c"} boogie_si_record_bv32($i625);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 715, 7} true;
  assume {:verifier.code 0} true;
  $i626 := $sext.bv32.bv64($i611);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 715, 9} true;
  assume {:verifier.code 0} true;
  $i627 := $srem.bv64($i626, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 715, 7} true;
  assume {:verifier.code 0} true;
  $i628 := $trunc.bv64.bv32($i627);
  call {:cexpr "a"} boogie_si_record_bv32($i628);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 716, 5} true;
  assume {:verifier.code 0} true;
  $i629 := $shl.bv32($i628, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i629);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 717, 7} true;
  assume {:verifier.code 0} true;
  $i630 := $sext.bv32.bv64($i615);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 717, 9} true;
  assume {:verifier.code 0} true;
  $i631 := $srem.bv64($i630, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 717, 7} true;
  assume {:verifier.code 0} true;
  $i632 := $trunc.bv64.bv32($i631);
  call {:cexpr "b"} boogie_si_record_bv32($i632);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 718, 5} true;
  assume {:verifier.code 0} true;
  $i633 := $shl.bv32($i632, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i633);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 721, 7} true;
  assume {:verifier.code 0} true;
  $i634 := $and.bv64($i631, $i627);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 726, 7} true;
  assume {:verifier.code 0} true;
  $i635 := $sext.bv32.bv64($i629);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 726, 9} true;
  assume {:verifier.code 0} true;
  $i636 := $srem.bv64($i635, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 726, 7} true;
  assume {:verifier.code 0} true;
  $i637 := $trunc.bv64.bv32($i636);
  call {:cexpr "a"} boogie_si_record_bv32($i637);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 727, 5} true;
  assume {:verifier.code 0} true;
  $i638 := $shl.bv32($i637, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i638);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 728, 7} true;
  assume {:verifier.code 0} true;
  $i639 := $sext.bv32.bv64($i633);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 728, 9} true;
  assume {:verifier.code 0} true;
  $i640 := $srem.bv64($i639, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 728, 7} true;
  assume {:verifier.code 0} true;
  $i641 := $trunc.bv64.bv32($i640);
  call {:cexpr "b"} boogie_si_record_bv32($i641);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 729, 5} true;
  assume {:verifier.code 0} true;
  $i642 := $shl.bv32($i641, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i642);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 731, 5} true;
  assume {:verifier.code 0} true;
  $i643 := $shl.bv32($i625, 2bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 731, 5} true;
  assume {:verifier.code 0} true;
  $i644 := $lshr.bv64($i634, 30bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 731, 5} true;
  assume {:verifier.code 0} true;
  $i645 := $trunc.bv64.bv32($i644);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 731, 5} true;
  assume {:verifier.code 0} true;
  $i646 := $and.bv32($i645, 2bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 731, 5} true;
  assume {:verifier.code 0} true;
  $i647 := $or.bv32($i646, $i643);
  call {:cexpr "c"} boogie_si_record_bv32($i647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 732, 7} true;
  assume {:verifier.code 0} true;
  $i648 := $and.bv64($i640, $i636);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 732, 7} true;
  assume {:verifier.code 0} true;
  $i649 := $lshr.bv64($i648, 31bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 732, 7} true;
  assume {:verifier.code 0} true;
  $i650 := $trunc.bv64.bv32($i649);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 732, 7} true;
  assume {:verifier.code 0} true;
  $i651 := $and.bv32($i650, 1bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 732, 7} true;
  assume {:verifier.code 0} true;
  $i652 := $or.bv32($i647, $i651);
  call {:cexpr "c"} boogie_si_record_bv32($i652);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 737, 7} true;
  assume {:verifier.code 0} true;
  $i653 := $sext.bv32.bv64($i638);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 737, 9} true;
  assume {:verifier.code 0} true;
  $i654 := $srem.bv64($i653, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 737, 7} true;
  assume {:verifier.code 0} true;
  $i655 := $trunc.bv64.bv32($i654);
  call {:cexpr "a"} boogie_si_record_bv32($i655);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 738, 5} true;
  assume {:verifier.code 0} true;
  $i656 := $shl.bv32($i655, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i656);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 739, 7} true;
  assume {:verifier.code 0} true;
  $i657 := $sext.bv32.bv64($i642);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 739, 9} true;
  assume {:verifier.code 0} true;
  $i658 := $srem.bv64($i657, 2147483648bv64);
  call {:cexpr "b"} boogie_si_record_bv64($i658);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 743, 7} true;
  assume {:verifier.code 0} true;
  $i659 := $and.bv64($i658, $i654);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 748, 7} true;
  assume {:verifier.code 0} true;
  $i660 := $sext.bv32.bv64($i656);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 748, 9} true;
  assume {:verifier.code 0} true;
  $i661 := $srem.bv64($i660, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 748, 7} true;
  assume {:verifier.code 0} true;
  $i662 := $trunc.bv64.bv32($i661);
  call {:cexpr "a"} boogie_si_record_bv32($i662);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 753, 5} true;
  assume {:verifier.code 0} true;
  $i663 := $shl.bv32($i652, 2bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 753, 5} true;
  assume {:verifier.code 0} true;
  $i664 := $lshr.bv64($i659, 30bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 753, 5} true;
  assume {:verifier.code 0} true;
  $i665 := $trunc.bv64.bv32($i664);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 753, 5} true;
  assume {:verifier.code 0} true;
  $i666 := $and.bv32($i665, 2bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 753, 5} true;
  assume {:verifier.code 0} true;
  $i667 := $or.bv32($i666, $i663);
  call {:cexpr "c"} boogie_si_record_bv32($i667);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 754, 9} true;
  assume {:verifier.code 0} true;
  $i668 := $slt.bv32($i662, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 754, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i668} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i668 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 739, 7} true;
  assume {:verifier.code 0} true;
  $i669 := $trunc.bv64.bv32($i658);
  call {:cexpr "b"} boogie_si_record_bv32($i669);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 740, 5} true;
  assume {:verifier.code 0} true;
  $i670 := $shl.bv32($i669, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i670);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 750, 7} true;
  assume {:verifier.code 0} true;
  $i671 := $sext.bv32.bv64($i670);
  call {:cexpr "b"} boogie_si_record_bv64($i671);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 750, 9} true;
  assume {:verifier.code 0} true;
  $i672 := $srem.bv64($i671, 2147483648bv64);
  call {:cexpr "b"} boogie_si_record_bv64($i672);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 755, 15} true;
  assume {:verifier.code 0} true;
  $i673 := $lshr.bv64($i672, 31bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 755, 15} true;
  assume {:verifier.code 0} true;
  $i674 := $trunc.bv64.bv32($i673);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 755, 15} true;
  assume {:verifier.code 0} true;
  $i675 := $and.bv32($i674, 1bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 755, 15} true;
  assume {:verifier.code 0} true;
  $i676 := $or.bv32($i675, $i667);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 755, 15} true;
  assume {:verifier.code 0} true;
  $r := $i676;
  $exn := false;
  return;
$bb2:
  assume !(($i668 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 764, 3} true;
  assume {:verifier.code 0} true;
  $r := $i667;
  $exn := false;
  return;
}
const __SMACK_and64: ref;
axiom (__SMACK_and64 == $sub.ref(0, 16584));
procedure  __SMACK_and64($i0: bv64, $i1: bv64)
  returns ($r: bv64)
{
  var $i2: bv32;
  var $i3: bv32;
  var $i4: bv32;
  var $i5: bv64;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 767, 65} true;
  assume {:verifier.code 1} true;
  call {:cexpr "__SMACK_and64:arg:a"} boogie_si_record_bv64($i0);
  call {:cexpr "__SMACK_and64:arg:b"} boogie_si_record_bv64($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 767, 65} true;
  assume {:verifier.code 1} true;
  $i2 := $trunc.bv64.bv32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 767, 68} true;
  assume {:verifier.code 1} true;
  $i3 := $trunc.bv64.bv32($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 767, 51} true;
  assume {:verifier.code 1} true;
  call $i4 := __SMACK_and32($i2, $i3);
  call {:cexpr "smack:ext:__SMACK_and32"} boogie_si_record_bv32($i4);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 767, 45} true;
  assume {:verifier.code 0} true;
  $i5 := $sext.bv32.bv64($i4);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 767, 38} true;
  assume {:verifier.code 0} true;
  $r := $i5;
  $exn := false;
  return;
}
const __SMACK_and16: ref;
axiom (__SMACK_and16 == $sub.ref(0, 17616));
procedure  __SMACK_and16($i0: bv16, $i1: bv16)
  returns ($r: bv16)
{
  var $i2: bv1;
  var $i3: bv16;
  var $i4: bv16;
  var $i5: bv16;
  var $i6: bv16;
  var $i7: bv16;
  var $i8: bv16;
  var $i9: bv16;
  var $i10: bv16;
  var $i11: bv16;
  var $i12: bv16;
  var $i13: bv16;
  var $i14: bv16;
  var $i15: bv16;
  var $i16: bv16;
  var $i17: bv16;
  var $i18: bv16;
  var $i19: bv16;
  var $i20: bv16;
  var $i21: bv16;
  var $i22: bv16;
  var $i23: bv16;
  var $i24: bv16;
  var $i25: bv16;
  var $i26: bv16;
  var $i27: bv16;
  var $i28: bv16;
  var $i29: bv16;
  var $i30: bv16;
  var $i31: bv16;
  var $i32: bv16;
  var $i33: bv16;
  var $i34: bv16;
  var $i35: bv16;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 773, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "__SMACK_and16:arg:a"} boogie_si_record_bv16($i0);
  call {:cexpr "__SMACK_and16:arg:b"} boogie_si_record_bv16($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 773, 9} true;
  assume {:verifier.code 0} true;
  $i2 := $slt.bv16($i0, 0bv16);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 773, 7} true;
  assume {:verifier.code 0} true;
  $i3 := $and.bv16($i1, 32768bv16);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 773, 7} true;
  assume {:verifier.code 0} true;
  $i4 := (if ($i2 == 1bv1) then $i3 else 0bv16);
  call {:cexpr "__SMACK_and16:arg:a"} boogie_si_record_bv16($i0);
  call {:cexpr "__SMACK_and16:arg:b"} boogie_si_record_bv16($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 784, 7} true;
  assume {:verifier.code 0} true;
  $i5 := $and.bv16($i1, $i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 784, 7} true;
  assume {:verifier.code 0} true;
  $i6 := $and.bv16($i5, 16384bv16);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 784, 7} true;
  assume {:verifier.code 0} true;
  $i7 := $or.bv16($i6, $i4);
  call {:cexpr "c"} boogie_si_record_bv16($i7);
  call {:cexpr "__SMACK_and16:arg:a"} boogie_si_record_bv16($i0);
  call {:cexpr "__SMACK_and16:arg:b"} boogie_si_record_bv16($i1);
  call {:cexpr "__SMACK_and16:arg:a"} boogie_si_record_bv16($i0);
  call {:cexpr "__SMACK_and16:arg:b"} boogie_si_record_bv16($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 805, 5} true;
  assume {:verifier.code 0} true;
  $i8 := $and.bv16($i5, 8192bv16);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 805, 5} true;
  assume {:verifier.code 0} true;
  $i9 := $or.bv16($i7, $i8);
  call {:cexpr "c"} boogie_si_record_bv16($i9);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 806, 7} true;
  assume {:verifier.code 0} true;
  $i10 := $and.bv16($i5, 4096bv16);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 806, 7} true;
  assume {:verifier.code 0} true;
  $i11 := $or.bv16($i9, $i10);
  call {:cexpr "c"} boogie_si_record_bv16($i11);
  call {:cexpr "__SMACK_and16:arg:a"} boogie_si_record_bv16($i0);
  call {:cexpr "__SMACK_and16:arg:b"} boogie_si_record_bv16($i1);
  call {:cexpr "__SMACK_and16:arg:a"} boogie_si_record_bv16($i0);
  call {:cexpr "__SMACK_and16:arg:b"} boogie_si_record_bv16($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 827, 5} true;
  assume {:verifier.code 0} true;
  $i12 := $and.bv16($i5, 2048bv16);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 827, 5} true;
  assume {:verifier.code 0} true;
  $i13 := $or.bv16($i11, $i12);
  call {:cexpr "c"} boogie_si_record_bv16($i13);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 828, 7} true;
  assume {:verifier.code 0} true;
  $i14 := $and.bv16($i5, 1024bv16);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 828, 7} true;
  assume {:verifier.code 0} true;
  $i15 := $or.bv16($i13, $i14);
  call {:cexpr "c"} boogie_si_record_bv16($i15);
  call {:cexpr "__SMACK_and16:arg:a"} boogie_si_record_bv16($i0);
  call {:cexpr "__SMACK_and16:arg:b"} boogie_si_record_bv16($i1);
  call {:cexpr "__SMACK_and16:arg:a"} boogie_si_record_bv16($i0);
  call {:cexpr "__SMACK_and16:arg:b"} boogie_si_record_bv16($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 849, 5} true;
  assume {:verifier.code 0} true;
  $i16 := $and.bv16($i5, 512bv16);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 849, 5} true;
  assume {:verifier.code 0} true;
  $i17 := $or.bv16($i15, $i16);
  call {:cexpr "c"} boogie_si_record_bv16($i17);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 850, 7} true;
  assume {:verifier.code 0} true;
  $i18 := $and.bv16($i5, 256bv16);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 850, 7} true;
  assume {:verifier.code 0} true;
  $i19 := $or.bv16($i17, $i18);
  call {:cexpr "c"} boogie_si_record_bv16($i19);
  call {:cexpr "__SMACK_and16:arg:a"} boogie_si_record_bv16($i0);
  call {:cexpr "__SMACK_and16:arg:b"} boogie_si_record_bv16($i1);
  call {:cexpr "__SMACK_and16:arg:a"} boogie_si_record_bv16($i0);
  call {:cexpr "__SMACK_and16:arg:b"} boogie_si_record_bv16($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 871, 5} true;
  assume {:verifier.code 0} true;
  $i20 := $and.bv16($i5, 128bv16);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 871, 5} true;
  assume {:verifier.code 0} true;
  $i21 := $or.bv16($i19, $i20);
  call {:cexpr "c"} boogie_si_record_bv16($i21);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 872, 7} true;
  assume {:verifier.code 0} true;
  $i22 := $and.bv16($i5, 64bv16);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 872, 7} true;
  assume {:verifier.code 0} true;
  $i23 := $or.bv16($i21, $i22);
  call {:cexpr "c"} boogie_si_record_bv16($i23);
  call {:cexpr "__SMACK_and16:arg:a"} boogie_si_record_bv16($i0);
  call {:cexpr "__SMACK_and16:arg:b"} boogie_si_record_bv16($i1);
  call {:cexpr "__SMACK_and16:arg:a"} boogie_si_record_bv16($i0);
  call {:cexpr "__SMACK_and16:arg:b"} boogie_si_record_bv16($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 893, 5} true;
  assume {:verifier.code 0} true;
  $i24 := $and.bv16($i5, 32bv16);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 893, 5} true;
  assume {:verifier.code 0} true;
  $i25 := $or.bv16($i23, $i24);
  call {:cexpr "c"} boogie_si_record_bv16($i25);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 894, 7} true;
  assume {:verifier.code 0} true;
  $i26 := $and.bv16($i5, 16bv16);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 894, 7} true;
  assume {:verifier.code 0} true;
  $i27 := $or.bv16($i25, $i26);
  call {:cexpr "c"} boogie_si_record_bv16($i27);
  call {:cexpr "__SMACK_and16:arg:a"} boogie_si_record_bv16($i0);
  call {:cexpr "__SMACK_and16:arg:b"} boogie_si_record_bv16($i1);
  call {:cexpr "__SMACK_and16:arg:a"} boogie_si_record_bv16($i0);
  call {:cexpr "__SMACK_and16:arg:b"} boogie_si_record_bv16($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 915, 5} true;
  assume {:verifier.code 0} true;
  $i28 := $and.bv16($i5, 8bv16);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 915, 5} true;
  assume {:verifier.code 0} true;
  $i29 := $or.bv16($i27, $i28);
  call {:cexpr "c"} boogie_si_record_bv16($i29);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 916, 7} true;
  assume {:verifier.code 0} true;
  $i30 := $and.bv16($i5, 4bv16);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 916, 7} true;
  assume {:verifier.code 0} true;
  $i31 := $or.bv16($i29, $i30);
  call {:cexpr "c"} boogie_si_record_bv16($i31);
  call {:cexpr "__SMACK_and16:arg:a"} boogie_si_record_bv16($i0);
  call {:cexpr "__SMACK_and16:arg:b"} boogie_si_record_bv16($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 927, 7} true;
  assume {:verifier.code 0} true;
  $i32 := $and.bv16($i5, 2bv16);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 927, 7} true;
  assume {:verifier.code 0} true;
  $i33 := $or.bv16($i31, $i32);
  call {:cexpr "c"} boogie_si_record_bv16($i33);
  call {:cexpr "__SMACK_and16:arg:a"} boogie_si_record_bv16($i0);
  call {:cexpr "__SMACK_and16:arg:b"} boogie_si_record_bv16($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 938, 7} true;
  assume {:verifier.code 0} true;
  $i34 := $and.bv16($i5, 1bv16);
  call {:cexpr "__SMACK_and16:arg:b"} boogie_si_record_bv16($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 938, 7} true;
  assume {:verifier.code 0} true;
  $i35 := $or.bv16($i33, $i34);
  call {:cexpr "c"} boogie_si_record_bv16($i35);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 948, 3} true;
  assume {:verifier.code 0} true;
  $r := $i35;
  $exn := false;
  return;
}
const __SMACK_and8: ref;
axiom (__SMACK_and8 == $sub.ref(0, 18648));
procedure  __SMACK_and8($i0: bv8, $i1: bv8)
  returns ($r: bv8)
{
  var $i2: bv1;
  var $i3: bv8;
  var $i4: bv8;
  var $i5: bv8;
  var $i6: bv8;
  var $i7: bv8;
  var $i8: bv8;
  var $i9: bv8;
  var $i10: bv8;
  var $i11: bv8;
  var $i12: bv8;
  var $i13: bv8;
  var $i14: bv8;
  var $i15: bv8;
  var $i16: bv8;
  var $i17: bv8;
  var $i18: bv8;
  var $i19: bv8;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 955, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "__SMACK_and8:arg:a"} boogie_si_record_bv8($i0);
  call {:cexpr "__SMACK_and8:arg:b"} boogie_si_record_bv8($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 955, 9} true;
  assume {:verifier.code 0} true;
  $i2 := $slt.bv8($i0, 0bv8);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 955, 7} true;
  assume {:verifier.code 0} true;
  $i3 := $and.bv8($i1, 128bv8);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 955, 7} true;
  assume {:verifier.code 0} true;
  $i4 := (if ($i2 == 1bv1) then $i3 else 0bv8);
  call {:cexpr "__SMACK_and8:arg:a"} boogie_si_record_bv8($i0);
  call {:cexpr "__SMACK_and8:arg:b"} boogie_si_record_bv8($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 966, 7} true;
  assume {:verifier.code 0} true;
  $i5 := $and.bv8($i1, $i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 966, 7} true;
  assume {:verifier.code 0} true;
  $i6 := $and.bv8($i5, 64bv8);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 966, 7} true;
  assume {:verifier.code 0} true;
  $i7 := $or.bv8($i6, $i4);
  call {:cexpr "c"} boogie_si_record_bv8($i7);
  call {:cexpr "__SMACK_and8:arg:a"} boogie_si_record_bv8($i0);
  call {:cexpr "__SMACK_and8:arg:b"} boogie_si_record_bv8($i1);
  call {:cexpr "__SMACK_and8:arg:a"} boogie_si_record_bv8($i0);
  call {:cexpr "__SMACK_and8:arg:b"} boogie_si_record_bv8($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 987, 5} true;
  assume {:verifier.code 0} true;
  $i8 := $and.bv8($i5, 32bv8);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 987, 5} true;
  assume {:verifier.code 0} true;
  $i9 := $or.bv8($i7, $i8);
  call {:cexpr "c"} boogie_si_record_bv8($i9);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 988, 7} true;
  assume {:verifier.code 0} true;
  $i10 := $and.bv8($i5, 16bv8);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 988, 7} true;
  assume {:verifier.code 0} true;
  $i11 := $or.bv8($i9, $i10);
  call {:cexpr "c"} boogie_si_record_bv8($i11);
  call {:cexpr "__SMACK_and8:arg:a"} boogie_si_record_bv8($i0);
  call {:cexpr "__SMACK_and8:arg:b"} boogie_si_record_bv8($i1);
  call {:cexpr "__SMACK_and8:arg:a"} boogie_si_record_bv8($i0);
  call {:cexpr "__SMACK_and8:arg:b"} boogie_si_record_bv8($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1009, 5} true;
  assume {:verifier.code 0} true;
  $i12 := $and.bv8($i5, 8bv8);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1009, 5} true;
  assume {:verifier.code 0} true;
  $i13 := $or.bv8($i11, $i12);
  call {:cexpr "c"} boogie_si_record_bv8($i13);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1010, 7} true;
  assume {:verifier.code 0} true;
  $i14 := $and.bv8($i5, 4bv8);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1010, 7} true;
  assume {:verifier.code 0} true;
  $i15 := $or.bv8($i13, $i14);
  call {:cexpr "c"} boogie_si_record_bv8($i15);
  call {:cexpr "__SMACK_and8:arg:a"} boogie_si_record_bv8($i0);
  call {:cexpr "__SMACK_and8:arg:b"} boogie_si_record_bv8($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1021, 7} true;
  assume {:verifier.code 0} true;
  $i16 := $and.bv8($i5, 2bv8);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1021, 7} true;
  assume {:verifier.code 0} true;
  $i17 := $or.bv8($i15, $i16);
  call {:cexpr "c"} boogie_si_record_bv8($i17);
  call {:cexpr "__SMACK_and8:arg:a"} boogie_si_record_bv8($i0);
  call {:cexpr "__SMACK_and8:arg:b"} boogie_si_record_bv8($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1032, 7} true;
  assume {:verifier.code 0} true;
  $i18 := $and.bv8($i5, 1bv8);
  call {:cexpr "__SMACK_and8:arg:b"} boogie_si_record_bv8($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1032, 7} true;
  assume {:verifier.code 0} true;
  $i19 := $or.bv8($i17, $i18);
  call {:cexpr "c"} boogie_si_record_bv8($i19);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1042, 3} true;
  assume {:verifier.code 0} true;
  $r := $i19;
  $exn := false;
  return;
}
const __SMACK_or32: ref;
axiom (__SMACK_or32 == $sub.ref(0, 19680));
procedure  __SMACK_or32($i0: bv32, $i1: bv32)
  returns ($r: bv32)
{
  var $i2: bv1;
  var $i3: bv32;
  var $i4: bv32;
  var $i5: bv32;
  var $i6: bv32;
  var $i7: bv64;
  var $i8: bv64;
  var $i9: bv32;
  var $i10: bv32;
  var $i11: bv64;
  var $i12: bv64;
  var $i13: bv32;
  var $i14: bv64;
  var $i15: bv64;
  var $i16: bv32;
  var $i17: bv32;
  var $i18: bv32;
  var $i19: bv32;
  var $i20: bv64;
  var $i21: bv64;
  var $i22: bv32;
  var $i23: bv32;
  var $i24: bv64;
  var $i25: bv64;
  var $i26: bv32;
  var $i27: bv64;
  var $i28: bv32;
  var $i29: bv64;
  var $i30: bv64;
  var $i31: bv32;
  var $i32: bv32;
  var $i33: bv64;
  var $i34: bv64;
  var $i35: bv32;
  var $i36: bv32;
  var $i37: bv64;
  var $i38: bv32;
  var $i39: bv32;
  var $i40: bv32;
  var $i41: bv64;
  var $i42: bv64;
  var $i43: bv32;
  var $i44: bv32;
  var $i45: bv32;
  var $i46: bv32;
  var $i47: bv64;
  var $i48: bv64;
  var $i49: bv32;
  var $i50: bv32;
  var $i51: bv64;
  var $i52: bv64;
  var $i53: bv32;
  var $i54: bv64;
  var $i55: bv32;
  var $i56: bv64;
  var $i57: bv64;
  var $i58: bv32;
  var $i59: bv32;
  var $i60: bv64;
  var $i61: bv64;
  var $i62: bv32;
  var $i63: bv32;
  var $i64: bv64;
  var $i65: bv32;
  var $i66: bv32;
  var $i67: bv32;
  var $i68: bv64;
  var $i69: bv64;
  var $i70: bv32;
  var $i71: bv32;
  var $i72: bv32;
  var $i73: bv32;
  var $i74: bv64;
  var $i75: bv64;
  var $i76: bv32;
  var $i77: bv32;
  var $i78: bv64;
  var $i79: bv64;
  var $i80: bv32;
  var $i81: bv64;
  var $i82: bv32;
  var $i83: bv64;
  var $i84: bv64;
  var $i85: bv32;
  var $i86: bv32;
  var $i87: bv64;
  var $i88: bv64;
  var $i89: bv32;
  var $i90: bv32;
  var $i91: bv64;
  var $i92: bv32;
  var $i93: bv32;
  var $i94: bv32;
  var $i95: bv64;
  var $i96: bv64;
  var $i97: bv32;
  var $i98: bv32;
  var $i99: bv32;
  var $i100: bv32;
  var $i101: bv64;
  var $i102: bv64;
  var $i103: bv32;
  var $i104: bv32;
  var $i105: bv64;
  var $i106: bv64;
  var $i107: bv32;
  var $i108: bv64;
  var $i109: bv32;
  var $i110: bv64;
  var $i111: bv64;
  var $i112: bv32;
  var $i113: bv32;
  var $i114: bv64;
  var $i115: bv64;
  var $i116: bv32;
  var $i117: bv32;
  var $i118: bv64;
  var $i119: bv32;
  var $i120: bv32;
  var $i121: bv32;
  var $i122: bv64;
  var $i123: bv64;
  var $i124: bv32;
  var $i125: bv32;
  var $i126: bv32;
  var $i127: bv32;
  var $i128: bv64;
  var $i129: bv64;
  var $i130: bv32;
  var $i131: bv32;
  var $i132: bv64;
  var $i133: bv64;
  var $i134: bv32;
  var $i135: bv64;
  var $i136: bv32;
  var $i137: bv64;
  var $i138: bv64;
  var $i139: bv32;
  var $i140: bv32;
  var $i141: bv64;
  var $i142: bv64;
  var $i143: bv32;
  var $i144: bv32;
  var $i145: bv64;
  var $i146: bv32;
  var $i147: bv32;
  var $i148: bv32;
  var $i149: bv64;
  var $i150: bv64;
  var $i151: bv32;
  var $i152: bv32;
  var $i153: bv32;
  var $i154: bv32;
  var $i155: bv64;
  var $i156: bv64;
  var $i157: bv32;
  var $i158: bv32;
  var $i159: bv64;
  var $i160: bv64;
  var $i161: bv32;
  var $i162: bv64;
  var $i163: bv32;
  var $i164: bv64;
  var $i165: bv64;
  var $i166: bv32;
  var $i167: bv32;
  var $i168: bv64;
  var $i169: bv64;
  var $i170: bv32;
  var $i171: bv32;
  var $i172: bv64;
  var $i173: bv32;
  var $i174: bv32;
  var $i175: bv32;
  var $i176: bv64;
  var $i177: bv64;
  var $i178: bv32;
  var $i179: bv32;
  var $i180: bv32;
  var $i181: bv32;
  var $i182: bv64;
  var $i183: bv64;
  var $i184: bv32;
  var $i185: bv32;
  var $i186: bv64;
  var $i187: bv64;
  var $i188: bv32;
  var $i189: bv64;
  var $i190: bv32;
  var $i191: bv64;
  var $i192: bv64;
  var $i193: bv32;
  var $i194: bv32;
  var $i195: bv64;
  var $i196: bv64;
  var $i197: bv32;
  var $i198: bv32;
  var $i199: bv64;
  var $i200: bv32;
  var $i201: bv32;
  var $i202: bv32;
  var $i203: bv64;
  var $i204: bv64;
  var $i205: bv32;
  var $i206: bv32;
  var $i207: bv32;
  var $i208: bv32;
  var $i209: bv64;
  var $i210: bv64;
  var $i211: bv32;
  var $i212: bv32;
  var $i213: bv64;
  var $i214: bv64;
  var $i215: bv32;
  var $i216: bv64;
  var $i217: bv32;
  var $i218: bv64;
  var $i219: bv64;
  var $i220: bv32;
  var $i221: bv32;
  var $i222: bv64;
  var $i223: bv64;
  var $i224: bv32;
  var $i225: bv32;
  var $i226: bv64;
  var $i227: bv32;
  var $i228: bv32;
  var $i229: bv32;
  var $i230: bv64;
  var $i231: bv64;
  var $i232: bv32;
  var $i233: bv32;
  var $i234: bv32;
  var $i235: bv32;
  var $i236: bv64;
  var $i237: bv64;
  var $i238: bv32;
  var $i239: bv32;
  var $i240: bv64;
  var $i241: bv64;
  var $i242: bv32;
  var $i243: bv64;
  var $i244: bv32;
  var $i245: bv64;
  var $i246: bv64;
  var $i247: bv32;
  var $i248: bv32;
  var $i249: bv64;
  var $i250: bv64;
  var $i251: bv32;
  var $i252: bv32;
  var $i253: bv64;
  var $i254: bv32;
  var $i255: bv32;
  var $i256: bv32;
  var $i257: bv64;
  var $i258: bv64;
  var $i259: bv32;
  var $i260: bv32;
  var $i261: bv32;
  var $i262: bv32;
  var $i263: bv64;
  var $i264: bv64;
  var $i265: bv32;
  var $i266: bv32;
  var $i267: bv64;
  var $i268: bv64;
  var $i269: bv32;
  var $i270: bv64;
  var $i271: bv32;
  var $i272: bv64;
  var $i273: bv64;
  var $i274: bv32;
  var $i275: bv32;
  var $i276: bv64;
  var $i277: bv64;
  var $i278: bv32;
  var $i279: bv32;
  var $i280: bv64;
  var $i281: bv32;
  var $i282: bv32;
  var $i283: bv32;
  var $i284: bv64;
  var $i285: bv64;
  var $i286: bv32;
  var $i287: bv32;
  var $i288: bv32;
  var $i289: bv32;
  var $i290: bv64;
  var $i291: bv64;
  var $i292: bv32;
  var $i293: bv32;
  var $i294: bv64;
  var $i295: bv64;
  var $i296: bv32;
  var $i297: bv64;
  var $i298: bv32;
  var $i299: bv64;
  var $i300: bv64;
  var $i301: bv32;
  var $i302: bv32;
  var $i303: bv64;
  var $i304: bv64;
  var $i305: bv32;
  var $i306: bv32;
  var $i307: bv64;
  var $i308: bv32;
  var $i309: bv32;
  var $i310: bv32;
  var $i311: bv64;
  var $i312: bv64;
  var $i313: bv32;
  var $i314: bv32;
  var $i315: bv32;
  var $i316: bv32;
  var $i317: bv64;
  var $i318: bv64;
  var $i319: bv32;
  var $i320: bv32;
  var $i321: bv64;
  var $i322: bv64;
  var $i323: bv32;
  var $i324: bv64;
  var $i325: bv32;
  var $i326: bv64;
  var $i327: bv64;
  var $i328: bv32;
  var $i329: bv32;
  var $i330: bv64;
  var $i331: bv64;
  var $i332: bv32;
  var $i333: bv32;
  var $i334: bv64;
  var $i335: bv32;
  var $i336: bv32;
  var $i337: bv32;
  var $i338: bv64;
  var $i339: bv64;
  var $i340: bv32;
  var $i341: bv32;
  var $i342: bv32;
  var $i343: bv32;
  var $i344: bv64;
  var $i345: bv64;
  var $i346: bv32;
  var $i347: bv32;
  var $i348: bv64;
  var $i349: bv64;
  var $i350: bv32;
  var $i351: bv64;
  var $i352: bv32;
  var $i353: bv64;
  var $i354: bv64;
  var $i355: bv32;
  var $i356: bv32;
  var $i357: bv64;
  var $i358: bv64;
  var $i359: bv32;
  var $i360: bv32;
  var $i361: bv64;
  var $i362: bv32;
  var $i363: bv32;
  var $i364: bv32;
  var $i365: bv64;
  var $i366: bv64;
  var $i367: bv32;
  var $i368: bv32;
  var $i369: bv32;
  var $i370: bv32;
  var $i371: bv64;
  var $i372: bv64;
  var $i373: bv32;
  var $i374: bv32;
  var $i375: bv64;
  var $i376: bv64;
  var $i377: bv32;
  var $i378: bv64;
  var $i379: bv32;
  var $i380: bv64;
  var $i381: bv64;
  var $i382: bv32;
  var $i383: bv32;
  var $i384: bv64;
  var $i385: bv64;
  var $i386: bv32;
  var $i387: bv32;
  var $i388: bv64;
  var $i389: bv32;
  var $i390: bv32;
  var $i391: bv32;
  var $i392: bv64;
  var $i393: bv64;
  var $i394: bv32;
  var $i395: bv32;
  var $i396: bv32;
  var $i397: bv32;
  var $i398: bv64;
  var $i399: bv64;
  var $i400: bv32;
  var $i401: bv32;
  var $i402: bv64;
  var $i403: bv64;
  var $i404: bv64;
  var $i405: bv32;
  var $i406: bv64;
  var $i407: bv64;
  var $i408: bv32;
  var $i409: bv32;
  var $i410: bv64;
  var $i411: bv32;
  var $i412: bv32;
  var $i413: bv32;
  var $i414: bv1;
  var $i415: bv32;
  var $i416: bv32;
  var $i417: bv32;
  var $i418: bv64;
  var $i419: bv64;
  var $i420: bv64;
  var $i421: bv32;
  var $i422: bv32;
  var $i423: bv32;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1049, 9} true;
  assume {:verifier.code 0} true;
  call {:cexpr "__SMACK_or32:arg:a"} boogie_si_record_bv32($i0);
  call {:cexpr "__SMACK_or32:arg:b"} boogie_si_record_bv32($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1049, 9} true;
  assume {:verifier.code 0} true;
  $i2 := $slt.bv32($i0, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1049, 7} true;
  assume {:verifier.code 0} true;
  $i3 := $lshr.bv32($i1, 30bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1049, 7} true;
  assume {:verifier.code 0} true;
  $i4 := $and.bv32($i3, 2bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1049, 7} true;
  assume {:verifier.code 0} true;
  $i5 := (if ($i2 == 1bv1) then 2bv32 else $i4);
  call {:cexpr "c"} boogie_si_record_bv32($i5);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1054, 5} true;
  assume {:verifier.code 0} true;
  $i6 := $shl.bv32($i0, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i6);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1055, 7} true;
  assume {:verifier.code 0} true;
  $i7 := $sext.bv32.bv64($i6);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1055, 9} true;
  assume {:verifier.code 0} true;
  $i8 := $srem.bv64($i7, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1055, 7} true;
  assume {:verifier.code 0} true;
  $i9 := $trunc.bv64.bv32($i8);
  call {:cexpr "a"} boogie_si_record_bv32($i9);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1056, 5} true;
  assume {:verifier.code 0} true;
  $i10 := $shl.bv32($i1, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i10);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1057, 7} true;
  assume {:verifier.code 0} true;
  $i11 := $sext.bv32.bv64($i10);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1057, 9} true;
  assume {:verifier.code 0} true;
  $i12 := $srem.bv64($i11, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1057, 7} true;
  assume {:verifier.code 0} true;
  $i13 := $trunc.bv64.bv32($i12);
  call {:cexpr "b"} boogie_si_record_bv32($i13);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1060, 7} true;
  assume {:verifier.code 0} true;
  $i14 := $or.bv64($i12, $i8);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1060, 7} true;
  assume {:verifier.code 0} true;
  $i15 := $lshr.bv64($i14, 31bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1060, 7} true;
  assume {:verifier.code 0} true;
  $i16 := $trunc.bv64.bv32($i15);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1060, 7} true;
  assume {:verifier.code 0} true;
  $i17 := $and.bv32($i16, 1bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1060, 7} true;
  assume {:verifier.code 0} true;
  $i18 := $or.bv32($i17, $i5);
  call {:cexpr "c"} boogie_si_record_bv32($i18);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1065, 5} true;
  assume {:verifier.code 0} true;
  $i19 := $shl.bv32($i9, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i19);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1066, 7} true;
  assume {:verifier.code 0} true;
  $i20 := $sext.bv32.bv64($i19);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1066, 9} true;
  assume {:verifier.code 0} true;
  $i21 := $srem.bv64($i20, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1066, 7} true;
  assume {:verifier.code 0} true;
  $i22 := $trunc.bv64.bv32($i21);
  call {:cexpr "a"} boogie_si_record_bv32($i22);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1067, 5} true;
  assume {:verifier.code 0} true;
  $i23 := $shl.bv32($i13, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i23);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1068, 7} true;
  assume {:verifier.code 0} true;
  $i24 := $sext.bv32.bv64($i23);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1068, 9} true;
  assume {:verifier.code 0} true;
  $i25 := $srem.bv64($i24, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1068, 7} true;
  assume {:verifier.code 0} true;
  $i26 := $trunc.bv64.bv32($i25);
  call {:cexpr "b"} boogie_si_record_bv32($i26);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1071, 7} true;
  assume {:verifier.code 0} true;
  $i27 := $or.bv64($i25, $i21);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1076, 5} true;
  assume {:verifier.code 0} true;
  $i28 := $shl.bv32($i22, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i28);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1077, 7} true;
  assume {:verifier.code 0} true;
  $i29 := $sext.bv32.bv64($i28);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1077, 9} true;
  assume {:verifier.code 0} true;
  $i30 := $srem.bv64($i29, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1077, 7} true;
  assume {:verifier.code 0} true;
  $i31 := $trunc.bv64.bv32($i30);
  call {:cexpr "a"} boogie_si_record_bv32($i31);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1078, 5} true;
  assume {:verifier.code 0} true;
  $i32 := $shl.bv32($i26, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1079, 7} true;
  assume {:verifier.code 0} true;
  $i33 := $sext.bv32.bv64($i32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1079, 9} true;
  assume {:verifier.code 0} true;
  $i34 := $srem.bv64($i33, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1079, 7} true;
  assume {:verifier.code 0} true;
  $i35 := $trunc.bv64.bv32($i34);
  call {:cexpr "b"} boogie_si_record_bv32($i35);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1081, 5} true;
  assume {:verifier.code 0} true;
  $i36 := $shl.bv32($i18, 2bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1081, 5} true;
  assume {:verifier.code 0} true;
  $i37 := $lshr.bv64($i27, 30bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1081, 5} true;
  assume {:verifier.code 0} true;
  $i38 := $trunc.bv64.bv32($i37);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1081, 5} true;
  assume {:verifier.code 0} true;
  $i39 := $and.bv32($i38, 2bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1081, 5} true;
  assume {:verifier.code 0} true;
  $i40 := $or.bv32($i39, $i36);
  call {:cexpr "c"} boogie_si_record_bv32($i40);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1082, 7} true;
  assume {:verifier.code 0} true;
  $i41 := $or.bv64($i34, $i30);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1082, 7} true;
  assume {:verifier.code 0} true;
  $i42 := $lshr.bv64($i41, 31bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1082, 7} true;
  assume {:verifier.code 0} true;
  $i43 := $trunc.bv64.bv32($i42);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1082, 7} true;
  assume {:verifier.code 0} true;
  $i44 := $and.bv32($i43, 1bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1082, 7} true;
  assume {:verifier.code 0} true;
  $i45 := $or.bv32($i40, $i44);
  call {:cexpr "c"} boogie_si_record_bv32($i45);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1087, 5} true;
  assume {:verifier.code 0} true;
  $i46 := $shl.bv32($i31, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i46);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1088, 7} true;
  assume {:verifier.code 0} true;
  $i47 := $sext.bv32.bv64($i46);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1088, 9} true;
  assume {:verifier.code 0} true;
  $i48 := $srem.bv64($i47, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1088, 7} true;
  assume {:verifier.code 0} true;
  $i49 := $trunc.bv64.bv32($i48);
  call {:cexpr "a"} boogie_si_record_bv32($i49);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1089, 5} true;
  assume {:verifier.code 0} true;
  $i50 := $shl.bv32($i35, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i50);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1090, 7} true;
  assume {:verifier.code 0} true;
  $i51 := $sext.bv32.bv64($i50);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1090, 9} true;
  assume {:verifier.code 0} true;
  $i52 := $srem.bv64($i51, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1090, 7} true;
  assume {:verifier.code 0} true;
  $i53 := $trunc.bv64.bv32($i52);
  call {:cexpr "b"} boogie_si_record_bv32($i53);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1093, 7} true;
  assume {:verifier.code 0} true;
  $i54 := $or.bv64($i52, $i48);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1098, 5} true;
  assume {:verifier.code 0} true;
  $i55 := $shl.bv32($i49, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i55);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1099, 7} true;
  assume {:verifier.code 0} true;
  $i56 := $sext.bv32.bv64($i55);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1099, 9} true;
  assume {:verifier.code 0} true;
  $i57 := $srem.bv64($i56, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1099, 7} true;
  assume {:verifier.code 0} true;
  $i58 := $trunc.bv64.bv32($i57);
  call {:cexpr "a"} boogie_si_record_bv32($i58);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1100, 5} true;
  assume {:verifier.code 0} true;
  $i59 := $shl.bv32($i53, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i59);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1101, 7} true;
  assume {:verifier.code 0} true;
  $i60 := $sext.bv32.bv64($i59);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1101, 9} true;
  assume {:verifier.code 0} true;
  $i61 := $srem.bv64($i60, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1101, 7} true;
  assume {:verifier.code 0} true;
  $i62 := $trunc.bv64.bv32($i61);
  call {:cexpr "b"} boogie_si_record_bv32($i62);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1103, 5} true;
  assume {:verifier.code 0} true;
  $i63 := $shl.bv32($i45, 2bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1103, 5} true;
  assume {:verifier.code 0} true;
  $i64 := $lshr.bv64($i54, 30bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1103, 5} true;
  assume {:verifier.code 0} true;
  $i65 := $trunc.bv64.bv32($i64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1103, 5} true;
  assume {:verifier.code 0} true;
  $i66 := $and.bv32($i65, 2bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1103, 5} true;
  assume {:verifier.code 0} true;
  $i67 := $or.bv32($i66, $i63);
  call {:cexpr "c"} boogie_si_record_bv32($i67);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1104, 7} true;
  assume {:verifier.code 0} true;
  $i68 := $or.bv64($i61, $i57);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1104, 7} true;
  assume {:verifier.code 0} true;
  $i69 := $lshr.bv64($i68, 31bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1104, 7} true;
  assume {:verifier.code 0} true;
  $i70 := $trunc.bv64.bv32($i69);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1104, 7} true;
  assume {:verifier.code 0} true;
  $i71 := $and.bv32($i70, 1bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1104, 7} true;
  assume {:verifier.code 0} true;
  $i72 := $or.bv32($i67, $i71);
  call {:cexpr "c"} boogie_si_record_bv32($i72);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1109, 5} true;
  assume {:verifier.code 0} true;
  $i73 := $shl.bv32($i58, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i73);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1110, 7} true;
  assume {:verifier.code 0} true;
  $i74 := $sext.bv32.bv64($i73);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1110, 9} true;
  assume {:verifier.code 0} true;
  $i75 := $srem.bv64($i74, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1110, 7} true;
  assume {:verifier.code 0} true;
  $i76 := $trunc.bv64.bv32($i75);
  call {:cexpr "a"} boogie_si_record_bv32($i76);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1111, 5} true;
  assume {:verifier.code 0} true;
  $i77 := $shl.bv32($i62, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i77);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1112, 7} true;
  assume {:verifier.code 0} true;
  $i78 := $sext.bv32.bv64($i77);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1112, 9} true;
  assume {:verifier.code 0} true;
  $i79 := $srem.bv64($i78, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1112, 7} true;
  assume {:verifier.code 0} true;
  $i80 := $trunc.bv64.bv32($i79);
  call {:cexpr "b"} boogie_si_record_bv32($i80);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1115, 7} true;
  assume {:verifier.code 0} true;
  $i81 := $or.bv64($i79, $i75);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1120, 5} true;
  assume {:verifier.code 0} true;
  $i82 := $shl.bv32($i76, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i82);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1121, 7} true;
  assume {:verifier.code 0} true;
  $i83 := $sext.bv32.bv64($i82);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1121, 9} true;
  assume {:verifier.code 0} true;
  $i84 := $srem.bv64($i83, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1121, 7} true;
  assume {:verifier.code 0} true;
  $i85 := $trunc.bv64.bv32($i84);
  call {:cexpr "a"} boogie_si_record_bv32($i85);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1122, 5} true;
  assume {:verifier.code 0} true;
  $i86 := $shl.bv32($i80, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i86);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1123, 7} true;
  assume {:verifier.code 0} true;
  $i87 := $sext.bv32.bv64($i86);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1123, 9} true;
  assume {:verifier.code 0} true;
  $i88 := $srem.bv64($i87, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1123, 7} true;
  assume {:verifier.code 0} true;
  $i89 := $trunc.bv64.bv32($i88);
  call {:cexpr "b"} boogie_si_record_bv32($i89);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1125, 5} true;
  assume {:verifier.code 0} true;
  $i90 := $shl.bv32($i72, 2bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1125, 5} true;
  assume {:verifier.code 0} true;
  $i91 := $lshr.bv64($i81, 30bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1125, 5} true;
  assume {:verifier.code 0} true;
  $i92 := $trunc.bv64.bv32($i91);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1125, 5} true;
  assume {:verifier.code 0} true;
  $i93 := $and.bv32($i92, 2bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1125, 5} true;
  assume {:verifier.code 0} true;
  $i94 := $or.bv32($i93, $i90);
  call {:cexpr "c"} boogie_si_record_bv32($i94);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1126, 7} true;
  assume {:verifier.code 0} true;
  $i95 := $or.bv64($i88, $i84);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1126, 7} true;
  assume {:verifier.code 0} true;
  $i96 := $lshr.bv64($i95, 31bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1126, 7} true;
  assume {:verifier.code 0} true;
  $i97 := $trunc.bv64.bv32($i96);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1126, 7} true;
  assume {:verifier.code 0} true;
  $i98 := $and.bv32($i97, 1bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1126, 7} true;
  assume {:verifier.code 0} true;
  $i99 := $or.bv32($i94, $i98);
  call {:cexpr "c"} boogie_si_record_bv32($i99);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1131, 5} true;
  assume {:verifier.code 0} true;
  $i100 := $shl.bv32($i85, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i100);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1132, 7} true;
  assume {:verifier.code 0} true;
  $i101 := $sext.bv32.bv64($i100);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1132, 9} true;
  assume {:verifier.code 0} true;
  $i102 := $srem.bv64($i101, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1132, 7} true;
  assume {:verifier.code 0} true;
  $i103 := $trunc.bv64.bv32($i102);
  call {:cexpr "a"} boogie_si_record_bv32($i103);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1133, 5} true;
  assume {:verifier.code 0} true;
  $i104 := $shl.bv32($i89, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i104);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1134, 7} true;
  assume {:verifier.code 0} true;
  $i105 := $sext.bv32.bv64($i104);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1134, 9} true;
  assume {:verifier.code 0} true;
  $i106 := $srem.bv64($i105, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1134, 7} true;
  assume {:verifier.code 0} true;
  $i107 := $trunc.bv64.bv32($i106);
  call {:cexpr "b"} boogie_si_record_bv32($i107);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1137, 7} true;
  assume {:verifier.code 0} true;
  $i108 := $or.bv64($i106, $i102);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1142, 5} true;
  assume {:verifier.code 0} true;
  $i109 := $shl.bv32($i103, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i109);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1143, 7} true;
  assume {:verifier.code 0} true;
  $i110 := $sext.bv32.bv64($i109);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1143, 9} true;
  assume {:verifier.code 0} true;
  $i111 := $srem.bv64($i110, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1143, 7} true;
  assume {:verifier.code 0} true;
  $i112 := $trunc.bv64.bv32($i111);
  call {:cexpr "a"} boogie_si_record_bv32($i112);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1144, 5} true;
  assume {:verifier.code 0} true;
  $i113 := $shl.bv32($i107, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i113);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1145, 7} true;
  assume {:verifier.code 0} true;
  $i114 := $sext.bv32.bv64($i113);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1145, 9} true;
  assume {:verifier.code 0} true;
  $i115 := $srem.bv64($i114, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1145, 7} true;
  assume {:verifier.code 0} true;
  $i116 := $trunc.bv64.bv32($i115);
  call {:cexpr "b"} boogie_si_record_bv32($i116);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1147, 5} true;
  assume {:verifier.code 0} true;
  $i117 := $shl.bv32($i99, 2bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1147, 5} true;
  assume {:verifier.code 0} true;
  $i118 := $lshr.bv64($i108, 30bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1147, 5} true;
  assume {:verifier.code 0} true;
  $i119 := $trunc.bv64.bv32($i118);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1147, 5} true;
  assume {:verifier.code 0} true;
  $i120 := $and.bv32($i119, 2bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1147, 5} true;
  assume {:verifier.code 0} true;
  $i121 := $or.bv32($i120, $i117);
  call {:cexpr "c"} boogie_si_record_bv32($i121);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1148, 7} true;
  assume {:verifier.code 0} true;
  $i122 := $or.bv64($i115, $i111);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1148, 7} true;
  assume {:verifier.code 0} true;
  $i123 := $lshr.bv64($i122, 31bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1148, 7} true;
  assume {:verifier.code 0} true;
  $i124 := $trunc.bv64.bv32($i123);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1148, 7} true;
  assume {:verifier.code 0} true;
  $i125 := $and.bv32($i124, 1bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1148, 7} true;
  assume {:verifier.code 0} true;
  $i126 := $or.bv32($i121, $i125);
  call {:cexpr "c"} boogie_si_record_bv32($i126);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1153, 5} true;
  assume {:verifier.code 0} true;
  $i127 := $shl.bv32($i112, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i127);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1154, 7} true;
  assume {:verifier.code 0} true;
  $i128 := $sext.bv32.bv64($i127);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1154, 9} true;
  assume {:verifier.code 0} true;
  $i129 := $srem.bv64($i128, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1154, 7} true;
  assume {:verifier.code 0} true;
  $i130 := $trunc.bv64.bv32($i129);
  call {:cexpr "a"} boogie_si_record_bv32($i130);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1155, 5} true;
  assume {:verifier.code 0} true;
  $i131 := $shl.bv32($i116, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i131);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1156, 7} true;
  assume {:verifier.code 0} true;
  $i132 := $sext.bv32.bv64($i131);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1156, 9} true;
  assume {:verifier.code 0} true;
  $i133 := $srem.bv64($i132, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1156, 7} true;
  assume {:verifier.code 0} true;
  $i134 := $trunc.bv64.bv32($i133);
  call {:cexpr "b"} boogie_si_record_bv32($i134);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1159, 7} true;
  assume {:verifier.code 0} true;
  $i135 := $or.bv64($i133, $i129);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1164, 5} true;
  assume {:verifier.code 0} true;
  $i136 := $shl.bv32($i130, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i136);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1165, 7} true;
  assume {:verifier.code 0} true;
  $i137 := $sext.bv32.bv64($i136);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1165, 9} true;
  assume {:verifier.code 0} true;
  $i138 := $srem.bv64($i137, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1165, 7} true;
  assume {:verifier.code 0} true;
  $i139 := $trunc.bv64.bv32($i138);
  call {:cexpr "a"} boogie_si_record_bv32($i139);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1166, 5} true;
  assume {:verifier.code 0} true;
  $i140 := $shl.bv32($i134, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i140);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1167, 7} true;
  assume {:verifier.code 0} true;
  $i141 := $sext.bv32.bv64($i140);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1167, 9} true;
  assume {:verifier.code 0} true;
  $i142 := $srem.bv64($i141, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1167, 7} true;
  assume {:verifier.code 0} true;
  $i143 := $trunc.bv64.bv32($i142);
  call {:cexpr "b"} boogie_si_record_bv32($i143);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1169, 5} true;
  assume {:verifier.code 0} true;
  $i144 := $shl.bv32($i126, 2bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1169, 5} true;
  assume {:verifier.code 0} true;
  $i145 := $lshr.bv64($i135, 30bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1169, 5} true;
  assume {:verifier.code 0} true;
  $i146 := $trunc.bv64.bv32($i145);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1169, 5} true;
  assume {:verifier.code 0} true;
  $i147 := $and.bv32($i146, 2bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1169, 5} true;
  assume {:verifier.code 0} true;
  $i148 := $or.bv32($i147, $i144);
  call {:cexpr "c"} boogie_si_record_bv32($i148);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1170, 7} true;
  assume {:verifier.code 0} true;
  $i149 := $or.bv64($i142, $i138);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1170, 7} true;
  assume {:verifier.code 0} true;
  $i150 := $lshr.bv64($i149, 31bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1170, 7} true;
  assume {:verifier.code 0} true;
  $i151 := $trunc.bv64.bv32($i150);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1170, 7} true;
  assume {:verifier.code 0} true;
  $i152 := $and.bv32($i151, 1bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1170, 7} true;
  assume {:verifier.code 0} true;
  $i153 := $or.bv32($i148, $i152);
  call {:cexpr "c"} boogie_si_record_bv32($i153);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1175, 5} true;
  assume {:verifier.code 0} true;
  $i154 := $shl.bv32($i139, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i154);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1176, 7} true;
  assume {:verifier.code 0} true;
  $i155 := $sext.bv32.bv64($i154);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1176, 9} true;
  assume {:verifier.code 0} true;
  $i156 := $srem.bv64($i155, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1176, 7} true;
  assume {:verifier.code 0} true;
  $i157 := $trunc.bv64.bv32($i156);
  call {:cexpr "a"} boogie_si_record_bv32($i157);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1177, 5} true;
  assume {:verifier.code 0} true;
  $i158 := $shl.bv32($i143, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i158);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1178, 7} true;
  assume {:verifier.code 0} true;
  $i159 := $sext.bv32.bv64($i158);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1178, 9} true;
  assume {:verifier.code 0} true;
  $i160 := $srem.bv64($i159, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1178, 7} true;
  assume {:verifier.code 0} true;
  $i161 := $trunc.bv64.bv32($i160);
  call {:cexpr "b"} boogie_si_record_bv32($i161);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1181, 7} true;
  assume {:verifier.code 0} true;
  $i162 := $or.bv64($i160, $i156);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1186, 5} true;
  assume {:verifier.code 0} true;
  $i163 := $shl.bv32($i157, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i163);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1187, 7} true;
  assume {:verifier.code 0} true;
  $i164 := $sext.bv32.bv64($i163);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1187, 9} true;
  assume {:verifier.code 0} true;
  $i165 := $srem.bv64($i164, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1187, 7} true;
  assume {:verifier.code 0} true;
  $i166 := $trunc.bv64.bv32($i165);
  call {:cexpr "a"} boogie_si_record_bv32($i166);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1188, 5} true;
  assume {:verifier.code 0} true;
  $i167 := $shl.bv32($i161, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i167);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1189, 7} true;
  assume {:verifier.code 0} true;
  $i168 := $sext.bv32.bv64($i167);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1189, 9} true;
  assume {:verifier.code 0} true;
  $i169 := $srem.bv64($i168, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1189, 7} true;
  assume {:verifier.code 0} true;
  $i170 := $trunc.bv64.bv32($i169);
  call {:cexpr "b"} boogie_si_record_bv32($i170);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1191, 5} true;
  assume {:verifier.code 0} true;
  $i171 := $shl.bv32($i153, 2bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1191, 5} true;
  assume {:verifier.code 0} true;
  $i172 := $lshr.bv64($i162, 30bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1191, 5} true;
  assume {:verifier.code 0} true;
  $i173 := $trunc.bv64.bv32($i172);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1191, 5} true;
  assume {:verifier.code 0} true;
  $i174 := $and.bv32($i173, 2bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1191, 5} true;
  assume {:verifier.code 0} true;
  $i175 := $or.bv32($i174, $i171);
  call {:cexpr "c"} boogie_si_record_bv32($i175);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1192, 7} true;
  assume {:verifier.code 0} true;
  $i176 := $or.bv64($i169, $i165);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1192, 7} true;
  assume {:verifier.code 0} true;
  $i177 := $lshr.bv64($i176, 31bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1192, 7} true;
  assume {:verifier.code 0} true;
  $i178 := $trunc.bv64.bv32($i177);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1192, 7} true;
  assume {:verifier.code 0} true;
  $i179 := $and.bv32($i178, 1bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1192, 7} true;
  assume {:verifier.code 0} true;
  $i180 := $or.bv32($i175, $i179);
  call {:cexpr "c"} boogie_si_record_bv32($i180);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1197, 5} true;
  assume {:verifier.code 0} true;
  $i181 := $shl.bv32($i166, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i181);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1198, 7} true;
  assume {:verifier.code 0} true;
  $i182 := $sext.bv32.bv64($i181);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1198, 9} true;
  assume {:verifier.code 0} true;
  $i183 := $srem.bv64($i182, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1198, 7} true;
  assume {:verifier.code 0} true;
  $i184 := $trunc.bv64.bv32($i183);
  call {:cexpr "a"} boogie_si_record_bv32($i184);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1199, 5} true;
  assume {:verifier.code 0} true;
  $i185 := $shl.bv32($i170, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i185);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1200, 7} true;
  assume {:verifier.code 0} true;
  $i186 := $sext.bv32.bv64($i185);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1200, 9} true;
  assume {:verifier.code 0} true;
  $i187 := $srem.bv64($i186, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1200, 7} true;
  assume {:verifier.code 0} true;
  $i188 := $trunc.bv64.bv32($i187);
  call {:cexpr "b"} boogie_si_record_bv32($i188);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1203, 7} true;
  assume {:verifier.code 0} true;
  $i189 := $or.bv64($i187, $i183);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1208, 5} true;
  assume {:verifier.code 0} true;
  $i190 := $shl.bv32($i184, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i190);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1209, 7} true;
  assume {:verifier.code 0} true;
  $i191 := $sext.bv32.bv64($i190);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1209, 9} true;
  assume {:verifier.code 0} true;
  $i192 := $srem.bv64($i191, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1209, 7} true;
  assume {:verifier.code 0} true;
  $i193 := $trunc.bv64.bv32($i192);
  call {:cexpr "a"} boogie_si_record_bv32($i193);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1210, 5} true;
  assume {:verifier.code 0} true;
  $i194 := $shl.bv32($i188, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i194);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1211, 7} true;
  assume {:verifier.code 0} true;
  $i195 := $sext.bv32.bv64($i194);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1211, 9} true;
  assume {:verifier.code 0} true;
  $i196 := $srem.bv64($i195, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1211, 7} true;
  assume {:verifier.code 0} true;
  $i197 := $trunc.bv64.bv32($i196);
  call {:cexpr "b"} boogie_si_record_bv32($i197);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1213, 5} true;
  assume {:verifier.code 0} true;
  $i198 := $shl.bv32($i180, 2bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1213, 5} true;
  assume {:verifier.code 0} true;
  $i199 := $lshr.bv64($i189, 30bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1213, 5} true;
  assume {:verifier.code 0} true;
  $i200 := $trunc.bv64.bv32($i199);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1213, 5} true;
  assume {:verifier.code 0} true;
  $i201 := $and.bv32($i200, 2bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1213, 5} true;
  assume {:verifier.code 0} true;
  $i202 := $or.bv32($i201, $i198);
  call {:cexpr "c"} boogie_si_record_bv32($i202);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1214, 7} true;
  assume {:verifier.code 0} true;
  $i203 := $or.bv64($i196, $i192);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1214, 7} true;
  assume {:verifier.code 0} true;
  $i204 := $lshr.bv64($i203, 31bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1214, 7} true;
  assume {:verifier.code 0} true;
  $i205 := $trunc.bv64.bv32($i204);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1214, 7} true;
  assume {:verifier.code 0} true;
  $i206 := $and.bv32($i205, 1bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1214, 7} true;
  assume {:verifier.code 0} true;
  $i207 := $or.bv32($i202, $i206);
  call {:cexpr "c"} boogie_si_record_bv32($i207);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1219, 5} true;
  assume {:verifier.code 0} true;
  $i208 := $shl.bv32($i193, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i208);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1220, 7} true;
  assume {:verifier.code 0} true;
  $i209 := $sext.bv32.bv64($i208);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1220, 9} true;
  assume {:verifier.code 0} true;
  $i210 := $srem.bv64($i209, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1220, 7} true;
  assume {:verifier.code 0} true;
  $i211 := $trunc.bv64.bv32($i210);
  call {:cexpr "a"} boogie_si_record_bv32($i211);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1221, 5} true;
  assume {:verifier.code 0} true;
  $i212 := $shl.bv32($i197, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i212);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1222, 7} true;
  assume {:verifier.code 0} true;
  $i213 := $sext.bv32.bv64($i212);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1222, 9} true;
  assume {:verifier.code 0} true;
  $i214 := $srem.bv64($i213, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1222, 7} true;
  assume {:verifier.code 0} true;
  $i215 := $trunc.bv64.bv32($i214);
  call {:cexpr "b"} boogie_si_record_bv32($i215);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1225, 7} true;
  assume {:verifier.code 0} true;
  $i216 := $or.bv64($i214, $i210);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1230, 5} true;
  assume {:verifier.code 0} true;
  $i217 := $shl.bv32($i211, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i217);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1231, 7} true;
  assume {:verifier.code 0} true;
  $i218 := $sext.bv32.bv64($i217);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1231, 9} true;
  assume {:verifier.code 0} true;
  $i219 := $srem.bv64($i218, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1231, 7} true;
  assume {:verifier.code 0} true;
  $i220 := $trunc.bv64.bv32($i219);
  call {:cexpr "a"} boogie_si_record_bv32($i220);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1232, 5} true;
  assume {:verifier.code 0} true;
  $i221 := $shl.bv32($i215, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i221);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1233, 7} true;
  assume {:verifier.code 0} true;
  $i222 := $sext.bv32.bv64($i221);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1233, 9} true;
  assume {:verifier.code 0} true;
  $i223 := $srem.bv64($i222, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1233, 7} true;
  assume {:verifier.code 0} true;
  $i224 := $trunc.bv64.bv32($i223);
  call {:cexpr "b"} boogie_si_record_bv32($i224);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1235, 5} true;
  assume {:verifier.code 0} true;
  $i225 := $shl.bv32($i207, 2bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1235, 5} true;
  assume {:verifier.code 0} true;
  $i226 := $lshr.bv64($i216, 30bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1235, 5} true;
  assume {:verifier.code 0} true;
  $i227 := $trunc.bv64.bv32($i226);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1235, 5} true;
  assume {:verifier.code 0} true;
  $i228 := $and.bv32($i227, 2bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1235, 5} true;
  assume {:verifier.code 0} true;
  $i229 := $or.bv32($i228, $i225);
  call {:cexpr "c"} boogie_si_record_bv32($i229);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1236, 7} true;
  assume {:verifier.code 0} true;
  $i230 := $or.bv64($i223, $i219);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1236, 7} true;
  assume {:verifier.code 0} true;
  $i231 := $lshr.bv64($i230, 31bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1236, 7} true;
  assume {:verifier.code 0} true;
  $i232 := $trunc.bv64.bv32($i231);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1236, 7} true;
  assume {:verifier.code 0} true;
  $i233 := $and.bv32($i232, 1bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1236, 7} true;
  assume {:verifier.code 0} true;
  $i234 := $or.bv32($i229, $i233);
  call {:cexpr "c"} boogie_si_record_bv32($i234);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1241, 5} true;
  assume {:verifier.code 0} true;
  $i235 := $shl.bv32($i220, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i235);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1242, 7} true;
  assume {:verifier.code 0} true;
  $i236 := $sext.bv32.bv64($i235);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1242, 9} true;
  assume {:verifier.code 0} true;
  $i237 := $srem.bv64($i236, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1242, 7} true;
  assume {:verifier.code 0} true;
  $i238 := $trunc.bv64.bv32($i237);
  call {:cexpr "a"} boogie_si_record_bv32($i238);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1243, 5} true;
  assume {:verifier.code 0} true;
  $i239 := $shl.bv32($i224, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i239);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1244, 7} true;
  assume {:verifier.code 0} true;
  $i240 := $sext.bv32.bv64($i239);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1244, 9} true;
  assume {:verifier.code 0} true;
  $i241 := $srem.bv64($i240, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1244, 7} true;
  assume {:verifier.code 0} true;
  $i242 := $trunc.bv64.bv32($i241);
  call {:cexpr "b"} boogie_si_record_bv32($i242);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1247, 7} true;
  assume {:verifier.code 0} true;
  $i243 := $or.bv64($i241, $i237);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1252, 5} true;
  assume {:verifier.code 0} true;
  $i244 := $shl.bv32($i238, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i244);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1253, 7} true;
  assume {:verifier.code 0} true;
  $i245 := $sext.bv32.bv64($i244);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1253, 9} true;
  assume {:verifier.code 0} true;
  $i246 := $srem.bv64($i245, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1253, 7} true;
  assume {:verifier.code 0} true;
  $i247 := $trunc.bv64.bv32($i246);
  call {:cexpr "a"} boogie_si_record_bv32($i247);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1254, 5} true;
  assume {:verifier.code 0} true;
  $i248 := $shl.bv32($i242, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i248);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1255, 7} true;
  assume {:verifier.code 0} true;
  $i249 := $sext.bv32.bv64($i248);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1255, 9} true;
  assume {:verifier.code 0} true;
  $i250 := $srem.bv64($i249, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1255, 7} true;
  assume {:verifier.code 0} true;
  $i251 := $trunc.bv64.bv32($i250);
  call {:cexpr "b"} boogie_si_record_bv32($i251);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1257, 5} true;
  assume {:verifier.code 0} true;
  $i252 := $shl.bv32($i234, 2bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1257, 5} true;
  assume {:verifier.code 0} true;
  $i253 := $lshr.bv64($i243, 30bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1257, 5} true;
  assume {:verifier.code 0} true;
  $i254 := $trunc.bv64.bv32($i253);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1257, 5} true;
  assume {:verifier.code 0} true;
  $i255 := $and.bv32($i254, 2bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1257, 5} true;
  assume {:verifier.code 0} true;
  $i256 := $or.bv32($i255, $i252);
  call {:cexpr "c"} boogie_si_record_bv32($i256);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1258, 7} true;
  assume {:verifier.code 0} true;
  $i257 := $or.bv64($i250, $i246);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1258, 7} true;
  assume {:verifier.code 0} true;
  $i258 := $lshr.bv64($i257, 31bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1258, 7} true;
  assume {:verifier.code 0} true;
  $i259 := $trunc.bv64.bv32($i258);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1258, 7} true;
  assume {:verifier.code 0} true;
  $i260 := $and.bv32($i259, 1bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1258, 7} true;
  assume {:verifier.code 0} true;
  $i261 := $or.bv32($i256, $i260);
  call {:cexpr "c"} boogie_si_record_bv32($i261);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1263, 5} true;
  assume {:verifier.code 0} true;
  $i262 := $shl.bv32($i247, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i262);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1264, 7} true;
  assume {:verifier.code 0} true;
  $i263 := $sext.bv32.bv64($i262);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1264, 9} true;
  assume {:verifier.code 0} true;
  $i264 := $srem.bv64($i263, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1264, 7} true;
  assume {:verifier.code 0} true;
  $i265 := $trunc.bv64.bv32($i264);
  call {:cexpr "a"} boogie_si_record_bv32($i265);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1265, 5} true;
  assume {:verifier.code 0} true;
  $i266 := $shl.bv32($i251, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i266);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1266, 7} true;
  assume {:verifier.code 0} true;
  $i267 := $sext.bv32.bv64($i266);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1266, 9} true;
  assume {:verifier.code 0} true;
  $i268 := $srem.bv64($i267, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1266, 7} true;
  assume {:verifier.code 0} true;
  $i269 := $trunc.bv64.bv32($i268);
  call {:cexpr "b"} boogie_si_record_bv32($i269);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1269, 7} true;
  assume {:verifier.code 0} true;
  $i270 := $or.bv64($i268, $i264);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1274, 5} true;
  assume {:verifier.code 0} true;
  $i271 := $shl.bv32($i265, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i271);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1275, 7} true;
  assume {:verifier.code 0} true;
  $i272 := $sext.bv32.bv64($i271);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1275, 9} true;
  assume {:verifier.code 0} true;
  $i273 := $srem.bv64($i272, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1275, 7} true;
  assume {:verifier.code 0} true;
  $i274 := $trunc.bv64.bv32($i273);
  call {:cexpr "a"} boogie_si_record_bv32($i274);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1276, 5} true;
  assume {:verifier.code 0} true;
  $i275 := $shl.bv32($i269, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i275);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1277, 7} true;
  assume {:verifier.code 0} true;
  $i276 := $sext.bv32.bv64($i275);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1277, 9} true;
  assume {:verifier.code 0} true;
  $i277 := $srem.bv64($i276, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1277, 7} true;
  assume {:verifier.code 0} true;
  $i278 := $trunc.bv64.bv32($i277);
  call {:cexpr "b"} boogie_si_record_bv32($i278);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1279, 5} true;
  assume {:verifier.code 0} true;
  $i279 := $shl.bv32($i261, 2bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1279, 5} true;
  assume {:verifier.code 0} true;
  $i280 := $lshr.bv64($i270, 30bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1279, 5} true;
  assume {:verifier.code 0} true;
  $i281 := $trunc.bv64.bv32($i280);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1279, 5} true;
  assume {:verifier.code 0} true;
  $i282 := $and.bv32($i281, 2bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1279, 5} true;
  assume {:verifier.code 0} true;
  $i283 := $or.bv32($i282, $i279);
  call {:cexpr "c"} boogie_si_record_bv32($i283);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1280, 7} true;
  assume {:verifier.code 0} true;
  $i284 := $or.bv64($i277, $i273);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1280, 7} true;
  assume {:verifier.code 0} true;
  $i285 := $lshr.bv64($i284, 31bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1280, 7} true;
  assume {:verifier.code 0} true;
  $i286 := $trunc.bv64.bv32($i285);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1280, 7} true;
  assume {:verifier.code 0} true;
  $i287 := $and.bv32($i286, 1bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1280, 7} true;
  assume {:verifier.code 0} true;
  $i288 := $or.bv32($i283, $i287);
  call {:cexpr "c"} boogie_si_record_bv32($i288);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1285, 5} true;
  assume {:verifier.code 0} true;
  $i289 := $shl.bv32($i274, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i289);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1286, 7} true;
  assume {:verifier.code 0} true;
  $i290 := $sext.bv32.bv64($i289);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1286, 9} true;
  assume {:verifier.code 0} true;
  $i291 := $srem.bv64($i290, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1286, 7} true;
  assume {:verifier.code 0} true;
  $i292 := $trunc.bv64.bv32($i291);
  call {:cexpr "a"} boogie_si_record_bv32($i292);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1287, 5} true;
  assume {:verifier.code 0} true;
  $i293 := $shl.bv32($i278, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i293);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1288, 7} true;
  assume {:verifier.code 0} true;
  $i294 := $sext.bv32.bv64($i293);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1288, 9} true;
  assume {:verifier.code 0} true;
  $i295 := $srem.bv64($i294, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1288, 7} true;
  assume {:verifier.code 0} true;
  $i296 := $trunc.bv64.bv32($i295);
  call {:cexpr "b"} boogie_si_record_bv32($i296);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1291, 7} true;
  assume {:verifier.code 0} true;
  $i297 := $or.bv64($i295, $i291);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1296, 5} true;
  assume {:verifier.code 0} true;
  $i298 := $shl.bv32($i292, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i298);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1297, 7} true;
  assume {:verifier.code 0} true;
  $i299 := $sext.bv32.bv64($i298);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1297, 9} true;
  assume {:verifier.code 0} true;
  $i300 := $srem.bv64($i299, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1297, 7} true;
  assume {:verifier.code 0} true;
  $i301 := $trunc.bv64.bv32($i300);
  call {:cexpr "a"} boogie_si_record_bv32($i301);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1298, 5} true;
  assume {:verifier.code 0} true;
  $i302 := $shl.bv32($i296, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i302);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1299, 7} true;
  assume {:verifier.code 0} true;
  $i303 := $sext.bv32.bv64($i302);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1299, 9} true;
  assume {:verifier.code 0} true;
  $i304 := $srem.bv64($i303, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1299, 7} true;
  assume {:verifier.code 0} true;
  $i305 := $trunc.bv64.bv32($i304);
  call {:cexpr "b"} boogie_si_record_bv32($i305);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1301, 5} true;
  assume {:verifier.code 0} true;
  $i306 := $shl.bv32($i288, 2bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1301, 5} true;
  assume {:verifier.code 0} true;
  $i307 := $lshr.bv64($i297, 30bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1301, 5} true;
  assume {:verifier.code 0} true;
  $i308 := $trunc.bv64.bv32($i307);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1301, 5} true;
  assume {:verifier.code 0} true;
  $i309 := $and.bv32($i308, 2bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1301, 5} true;
  assume {:verifier.code 0} true;
  $i310 := $or.bv32($i309, $i306);
  call {:cexpr "c"} boogie_si_record_bv32($i310);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1302, 7} true;
  assume {:verifier.code 0} true;
  $i311 := $or.bv64($i304, $i300);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1302, 7} true;
  assume {:verifier.code 0} true;
  $i312 := $lshr.bv64($i311, 31bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1302, 7} true;
  assume {:verifier.code 0} true;
  $i313 := $trunc.bv64.bv32($i312);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1302, 7} true;
  assume {:verifier.code 0} true;
  $i314 := $and.bv32($i313, 1bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1302, 7} true;
  assume {:verifier.code 0} true;
  $i315 := $or.bv32($i310, $i314);
  call {:cexpr "c"} boogie_si_record_bv32($i315);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1307, 5} true;
  assume {:verifier.code 0} true;
  $i316 := $shl.bv32($i301, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i316);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1308, 7} true;
  assume {:verifier.code 0} true;
  $i317 := $sext.bv32.bv64($i316);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1308, 9} true;
  assume {:verifier.code 0} true;
  $i318 := $srem.bv64($i317, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1308, 7} true;
  assume {:verifier.code 0} true;
  $i319 := $trunc.bv64.bv32($i318);
  call {:cexpr "a"} boogie_si_record_bv32($i319);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1309, 5} true;
  assume {:verifier.code 0} true;
  $i320 := $shl.bv32($i305, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i320);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1310, 7} true;
  assume {:verifier.code 0} true;
  $i321 := $sext.bv32.bv64($i320);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1310, 9} true;
  assume {:verifier.code 0} true;
  $i322 := $srem.bv64($i321, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1310, 7} true;
  assume {:verifier.code 0} true;
  $i323 := $trunc.bv64.bv32($i322);
  call {:cexpr "b"} boogie_si_record_bv32($i323);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1313, 7} true;
  assume {:verifier.code 0} true;
  $i324 := $or.bv64($i322, $i318);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1318, 5} true;
  assume {:verifier.code 0} true;
  $i325 := $shl.bv32($i319, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i325);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1319, 7} true;
  assume {:verifier.code 0} true;
  $i326 := $sext.bv32.bv64($i325);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1319, 9} true;
  assume {:verifier.code 0} true;
  $i327 := $srem.bv64($i326, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1319, 7} true;
  assume {:verifier.code 0} true;
  $i328 := $trunc.bv64.bv32($i327);
  call {:cexpr "a"} boogie_si_record_bv32($i328);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1320, 5} true;
  assume {:verifier.code 0} true;
  $i329 := $shl.bv32($i323, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i329);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1321, 7} true;
  assume {:verifier.code 0} true;
  $i330 := $sext.bv32.bv64($i329);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1321, 9} true;
  assume {:verifier.code 0} true;
  $i331 := $srem.bv64($i330, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1321, 7} true;
  assume {:verifier.code 0} true;
  $i332 := $trunc.bv64.bv32($i331);
  call {:cexpr "b"} boogie_si_record_bv32($i332);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1323, 5} true;
  assume {:verifier.code 0} true;
  $i333 := $shl.bv32($i315, 2bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1323, 5} true;
  assume {:verifier.code 0} true;
  $i334 := $lshr.bv64($i324, 30bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1323, 5} true;
  assume {:verifier.code 0} true;
  $i335 := $trunc.bv64.bv32($i334);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1323, 5} true;
  assume {:verifier.code 0} true;
  $i336 := $and.bv32($i335, 2bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1323, 5} true;
  assume {:verifier.code 0} true;
  $i337 := $or.bv32($i336, $i333);
  call {:cexpr "c"} boogie_si_record_bv32($i337);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1324, 7} true;
  assume {:verifier.code 0} true;
  $i338 := $or.bv64($i331, $i327);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1324, 7} true;
  assume {:verifier.code 0} true;
  $i339 := $lshr.bv64($i338, 31bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1324, 7} true;
  assume {:verifier.code 0} true;
  $i340 := $trunc.bv64.bv32($i339);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1324, 7} true;
  assume {:verifier.code 0} true;
  $i341 := $and.bv32($i340, 1bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1324, 7} true;
  assume {:verifier.code 0} true;
  $i342 := $or.bv32($i337, $i341);
  call {:cexpr "c"} boogie_si_record_bv32($i342);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1329, 5} true;
  assume {:verifier.code 0} true;
  $i343 := $shl.bv32($i328, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i343);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1330, 7} true;
  assume {:verifier.code 0} true;
  $i344 := $sext.bv32.bv64($i343);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1330, 9} true;
  assume {:verifier.code 0} true;
  $i345 := $srem.bv64($i344, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1330, 7} true;
  assume {:verifier.code 0} true;
  $i346 := $trunc.bv64.bv32($i345);
  call {:cexpr "a"} boogie_si_record_bv32($i346);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1331, 5} true;
  assume {:verifier.code 0} true;
  $i347 := $shl.bv32($i332, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i347);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1332, 7} true;
  assume {:verifier.code 0} true;
  $i348 := $sext.bv32.bv64($i347);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1332, 9} true;
  assume {:verifier.code 0} true;
  $i349 := $srem.bv64($i348, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1332, 7} true;
  assume {:verifier.code 0} true;
  $i350 := $trunc.bv64.bv32($i349);
  call {:cexpr "b"} boogie_si_record_bv32($i350);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1335, 7} true;
  assume {:verifier.code 0} true;
  $i351 := $or.bv64($i349, $i345);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1340, 5} true;
  assume {:verifier.code 0} true;
  $i352 := $shl.bv32($i346, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i352);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1341, 7} true;
  assume {:verifier.code 0} true;
  $i353 := $sext.bv32.bv64($i352);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1341, 9} true;
  assume {:verifier.code 0} true;
  $i354 := $srem.bv64($i353, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1341, 7} true;
  assume {:verifier.code 0} true;
  $i355 := $trunc.bv64.bv32($i354);
  call {:cexpr "a"} boogie_si_record_bv32($i355);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1342, 5} true;
  assume {:verifier.code 0} true;
  $i356 := $shl.bv32($i350, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i356);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1343, 7} true;
  assume {:verifier.code 0} true;
  $i357 := $sext.bv32.bv64($i356);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1343, 9} true;
  assume {:verifier.code 0} true;
  $i358 := $srem.bv64($i357, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1343, 7} true;
  assume {:verifier.code 0} true;
  $i359 := $trunc.bv64.bv32($i358);
  call {:cexpr "b"} boogie_si_record_bv32($i359);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1345, 5} true;
  assume {:verifier.code 0} true;
  $i360 := $shl.bv32($i342, 2bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1345, 5} true;
  assume {:verifier.code 0} true;
  $i361 := $lshr.bv64($i351, 30bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1345, 5} true;
  assume {:verifier.code 0} true;
  $i362 := $trunc.bv64.bv32($i361);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1345, 5} true;
  assume {:verifier.code 0} true;
  $i363 := $and.bv32($i362, 2bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1345, 5} true;
  assume {:verifier.code 0} true;
  $i364 := $or.bv32($i363, $i360);
  call {:cexpr "c"} boogie_si_record_bv32($i364);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1346, 7} true;
  assume {:verifier.code 0} true;
  $i365 := $or.bv64($i358, $i354);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1346, 7} true;
  assume {:verifier.code 0} true;
  $i366 := $lshr.bv64($i365, 31bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1346, 7} true;
  assume {:verifier.code 0} true;
  $i367 := $trunc.bv64.bv32($i366);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1346, 7} true;
  assume {:verifier.code 0} true;
  $i368 := $and.bv32($i367, 1bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1346, 7} true;
  assume {:verifier.code 0} true;
  $i369 := $or.bv32($i364, $i368);
  call {:cexpr "c"} boogie_si_record_bv32($i369);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1351, 5} true;
  assume {:verifier.code 0} true;
  $i370 := $shl.bv32($i355, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i370);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1352, 7} true;
  assume {:verifier.code 0} true;
  $i371 := $sext.bv32.bv64($i370);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1352, 9} true;
  assume {:verifier.code 0} true;
  $i372 := $srem.bv64($i371, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1352, 7} true;
  assume {:verifier.code 0} true;
  $i373 := $trunc.bv64.bv32($i372);
  call {:cexpr "a"} boogie_si_record_bv32($i373);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1353, 5} true;
  assume {:verifier.code 0} true;
  $i374 := $shl.bv32($i359, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i374);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1354, 7} true;
  assume {:verifier.code 0} true;
  $i375 := $sext.bv32.bv64($i374);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1354, 9} true;
  assume {:verifier.code 0} true;
  $i376 := $srem.bv64($i375, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1354, 7} true;
  assume {:verifier.code 0} true;
  $i377 := $trunc.bv64.bv32($i376);
  call {:cexpr "b"} boogie_si_record_bv32($i377);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1357, 7} true;
  assume {:verifier.code 0} true;
  $i378 := $or.bv64($i376, $i372);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1362, 5} true;
  assume {:verifier.code 0} true;
  $i379 := $shl.bv32($i373, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i379);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1363, 7} true;
  assume {:verifier.code 0} true;
  $i380 := $sext.bv32.bv64($i379);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1363, 9} true;
  assume {:verifier.code 0} true;
  $i381 := $srem.bv64($i380, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1363, 7} true;
  assume {:verifier.code 0} true;
  $i382 := $trunc.bv64.bv32($i381);
  call {:cexpr "a"} boogie_si_record_bv32($i382);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1364, 5} true;
  assume {:verifier.code 0} true;
  $i383 := $shl.bv32($i377, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i383);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1365, 7} true;
  assume {:verifier.code 0} true;
  $i384 := $sext.bv32.bv64($i383);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1365, 9} true;
  assume {:verifier.code 0} true;
  $i385 := $srem.bv64($i384, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1365, 7} true;
  assume {:verifier.code 0} true;
  $i386 := $trunc.bv64.bv32($i385);
  call {:cexpr "b"} boogie_si_record_bv32($i386);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1367, 5} true;
  assume {:verifier.code 0} true;
  $i387 := $shl.bv32($i369, 2bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1367, 5} true;
  assume {:verifier.code 0} true;
  $i388 := $lshr.bv64($i378, 30bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1367, 5} true;
  assume {:verifier.code 0} true;
  $i389 := $trunc.bv64.bv32($i388);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1367, 5} true;
  assume {:verifier.code 0} true;
  $i390 := $and.bv32($i389, 2bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1367, 5} true;
  assume {:verifier.code 0} true;
  $i391 := $or.bv32($i390, $i387);
  call {:cexpr "c"} boogie_si_record_bv32($i391);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1368, 7} true;
  assume {:verifier.code 0} true;
  $i392 := $or.bv64($i385, $i381);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1368, 7} true;
  assume {:verifier.code 0} true;
  $i393 := $lshr.bv64($i392, 31bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1368, 7} true;
  assume {:verifier.code 0} true;
  $i394 := $trunc.bv64.bv32($i393);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1368, 7} true;
  assume {:verifier.code 0} true;
  $i395 := $and.bv32($i394, 1bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1368, 7} true;
  assume {:verifier.code 0} true;
  $i396 := $or.bv32($i391, $i395);
  call {:cexpr "c"} boogie_si_record_bv32($i396);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1373, 5} true;
  assume {:verifier.code 0} true;
  $i397 := $shl.bv32($i382, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i397);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1374, 7} true;
  assume {:verifier.code 0} true;
  $i398 := $sext.bv32.bv64($i397);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1374, 9} true;
  assume {:verifier.code 0} true;
  $i399 := $srem.bv64($i398, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1374, 7} true;
  assume {:verifier.code 0} true;
  $i400 := $trunc.bv64.bv32($i399);
  call {:cexpr "a"} boogie_si_record_bv32($i400);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1375, 5} true;
  assume {:verifier.code 0} true;
  $i401 := $shl.bv32($i386, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i401);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1376, 7} true;
  assume {:verifier.code 0} true;
  $i402 := $sext.bv32.bv64($i401);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1376, 9} true;
  assume {:verifier.code 0} true;
  $i403 := $srem.bv64($i402, 2147483648bv64);
  call {:cexpr "b"} boogie_si_record_bv64($i403);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1379, 7} true;
  assume {:verifier.code 0} true;
  $i404 := $or.bv64($i403, $i399);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1384, 5} true;
  assume {:verifier.code 0} true;
  $i405 := $shl.bv32($i400, 1bv32);
  call {:cexpr "a"} boogie_si_record_bv32($i405);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1385, 7} true;
  assume {:verifier.code 0} true;
  $i406 := $sext.bv32.bv64($i405);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1385, 9} true;
  assume {:verifier.code 0} true;
  $i407 := $srem.bv64($i406, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1385, 7} true;
  assume {:verifier.code 0} true;
  $i408 := $trunc.bv64.bv32($i407);
  call {:cexpr "a"} boogie_si_record_bv32($i408);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1389, 5} true;
  assume {:verifier.code 0} true;
  $i409 := $shl.bv32($i396, 2bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1389, 5} true;
  assume {:verifier.code 0} true;
  $i410 := $lshr.bv64($i404, 30bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1389, 5} true;
  assume {:verifier.code 0} true;
  $i411 := $trunc.bv64.bv32($i410);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1389, 5} true;
  assume {:verifier.code 0} true;
  $i412 := $and.bv32($i411, 2bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1389, 5} true;
  assume {:verifier.code 0} true;
  $i413 := $or.bv32($i412, $i409);
  call {:cexpr "c"} boogie_si_record_bv32($i413);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1390, 9} true;
  assume {:verifier.code 0} true;
  $i414 := $slt.bv32($i408, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1390, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i414} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i414 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1391, 7} true;
  assume {:verifier.code 0} true;
  $i415 := $or.bv32($i413, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i415);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1400, 3} true;
  assume {:verifier.code 0} true;
  $r := $i415;
  $exn := false;
  return;
$bb2:
  assume !(($i414 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1376, 7} true;
  assume {:verifier.code 0} true;
  $i416 := $trunc.bv64.bv32($i403);
  call {:cexpr "b"} boogie_si_record_bv32($i416);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1386, 5} true;
  assume {:verifier.code 0} true;
  $i417 := $shl.bv32($i416, 1bv32);
  call {:cexpr "b"} boogie_si_record_bv32($i417);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1387, 7} true;
  assume {:verifier.code 0} true;
  $i418 := $sext.bv32.bv64($i417);
  call {:cexpr "b"} boogie_si_record_bv64($i418);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1387, 9} true;
  assume {:verifier.code 0} true;
  $i419 := $srem.bv64($i418, 2147483648bv64);
  call {:cexpr "b"} boogie_si_record_bv64($i419);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1392, 14} true;
  assume {:verifier.code 0} true;
  $i420 := $lshr.bv64($i419, 31bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1392, 14} true;
  assume {:verifier.code 0} true;
  $i421 := $trunc.bv64.bv32($i420);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1392, 14} true;
  assume {:verifier.code 0} true;
  $i422 := $and.bv32($i421, 1bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1392, 14} true;
  assume {:verifier.code 0} true;
  $i423 := $or.bv32($i422, $i413);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1392, 14} true;
  assume {:verifier.code 0} true;
  $r := $i423;
  $exn := false;
  return;
}
const __SMACK_or64: ref;
axiom (__SMACK_or64 == $sub.ref(0, 20712));
procedure  __SMACK_or64($i0: bv64, $i1: bv64)
  returns ($r: bv64)
{
  var $i2: bv32;
  var $i3: bv32;
  var $i4: bv32;
  var $i5: bv64;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1403, 63} true;
  assume {:verifier.code 1} true;
  call {:cexpr "__SMACK_or64:arg:a"} boogie_si_record_bv64($i0);
  call {:cexpr "__SMACK_or64:arg:b"} boogie_si_record_bv64($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1403, 63} true;
  assume {:verifier.code 1} true;
  $i2 := $trunc.bv64.bv32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1403, 66} true;
  assume {:verifier.code 1} true;
  $i3 := $trunc.bv64.bv32($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1403, 50} true;
  assume {:verifier.code 1} true;
  call $i4 := __SMACK_or32($i2, $i3);
  call {:cexpr "smack:ext:__SMACK_or32"} boogie_si_record_bv32($i4);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1403, 44} true;
  assume {:verifier.code 0} true;
  $i5 := $sext.bv32.bv64($i4);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1403, 37} true;
  assume {:verifier.code 0} true;
  $r := $i5;
  $exn := false;
  return;
}
const __SMACK_or16: ref;
axiom (__SMACK_or16 == $sub.ref(0, 21744));
procedure  __SMACK_or16($i0: bv16, $i1: bv16)
  returns ($r: bv16)
{
  var $i2: bv32;
  var $i3: bv32;
  var $i4: bv32;
  var $i5: bv16;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1404, 67} true;
  assume {:verifier.code 1} true;
  call {:cexpr "__SMACK_or16:arg:a"} boogie_si_record_bv16($i0);
  call {:cexpr "__SMACK_or16:arg:b"} boogie_si_record_bv16($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1404, 67} true;
  assume {:verifier.code 1} true;
  $i2 := $sext.bv16.bv32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1404, 70} true;
  assume {:verifier.code 1} true;
  $i3 := $sext.bv16.bv32($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1404, 54} true;
  assume {:verifier.code 1} true;
  call $i4 := __SMACK_or32($i2, $i3);
  call {:cexpr "smack:ext:__SMACK_or32"} boogie_si_record_bv32($i4);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1404, 47} true;
  assume {:verifier.code 0} true;
  $i5 := $trunc.bv32.bv16($i4);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1404, 40} true;
  assume {:verifier.code 0} true;
  $r := $i5;
  $exn := false;
  return;
}
const __SMACK_or8: ref;
axiom (__SMACK_or8 == $sub.ref(0, 22776));
procedure  __SMACK_or8($i0: bv8, $i1: bv8)
  returns ($r: bv8)
{
  var $i2: bv32;
  var $i3: bv32;
  var $i4: bv32;
  var $i5: bv8;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1405, 62} true;
  assume {:verifier.code 1} true;
  call {:cexpr "__SMACK_or8:arg:a"} boogie_si_record_bv8($i0);
  call {:cexpr "__SMACK_or8:arg:b"} boogie_si_record_bv8($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1405, 62} true;
  assume {:verifier.code 1} true;
  $i2 := $sext.bv8.bv32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1405, 65} true;
  assume {:verifier.code 1} true;
  $i3 := $sext.bv8.bv32($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1405, 49} true;
  assume {:verifier.code 1} true;
  call $i4 := __SMACK_or32($i2, $i3);
  call {:cexpr "smack:ext:__SMACK_or32"} boogie_si_record_bv32($i4);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1405, 43} true;
  assume {:verifier.code 0} true;
  $i5 := $trunc.bv32.bv8($i4);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1405, 36} true;
  assume {:verifier.code 0} true;
  $r := $i5;
  $exn := false;
  return;
}
const __SMACK_check_overflow: ref;
axiom (__SMACK_check_overflow == $sub.ref(0, 23808));
procedure  __SMACK_check_overflow($i0: bv32)
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1604, 29} true;
  assume {:verifier.code 1} true;
  call {:cexpr "__SMACK_check_overflow:arg:flag"} boogie_si_record_bv32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1604, 29} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1409, 3} true;
  assume {:verifier.code 1} true;
  assert {:overflow} $i0 == $0;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1410, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __VERIFIER_nondet_int: ref;
axiom (__VERIFIER_nondet_int == $sub.ref(0, 24840));
procedure  __VERIFIER_nondet_int()
  returns ($r: bv32)
{
  var $i0: bv32;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1461, 11} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1461, 11} true;
  assume {:verifier.code 1} true;
  call $i0 := __SMACK_nondet_int();
  call {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_bv32($i0);
  call {:cexpr "x"} boogie_si_record_bv32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1604, 29} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 45, 3} true;
  assume {:verifier.code 1} true;
  assume 1bv32 != $0;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1463, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const __SMACK_nondet_int: ref;
axiom (__SMACK_nondet_int == $sub.ref(0, 25872));
procedure  __SMACK_nondet_int()
  returns ($r: bv32);
const __VERIFIER_nondet_long: ref;
axiom (__VERIFIER_nondet_long == $sub.ref(0, 26904));
procedure  __VERIFIER_nondet_long()
  returns ($r: bv64)
{
  var $i0: bv64;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1491, 12} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1491, 12} true;
  assume {:verifier.code 1} true;
  call $i0 := __SMACK_nondet_long();
  call {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_bv64($i0);
  call {:cexpr "x"} boogie_si_record_bv64($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1604, 29} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 45, 3} true;
  assume {:verifier.code 1} true;
  assume 1bv32 != $0;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1493, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const __SMACK_nondet_long: ref;
axiom (__SMACK_nondet_long == $sub.ref(0, 27936));
procedure  __SMACK_nondet_long()
  returns ($r: bv64);
const __SMACK_decls: ref;
axiom (__SMACK_decls == $sub.ref(0, 28968));
type $mop;
procedure  boogie_si_record_mop(m: $mop);
const $MOP: $mop;
var $exn: bool;
var $exnv: int;
procedure  corral_atomic_begin();
procedure  corral_atomic_end();
procedure  $alloc(n: ref) returns (p: ref)
{
  call corral_atomic_begin();
  call p := $$alloc(n);
  call corral_atomic_end();
}

procedure  $malloc(n: ref) returns (p: ref)
{
  call corral_atomic_begin();
  call p := $$alloc(n);
  call corral_atomic_end();
}

var $CurrAddr:ref;

procedure {:inline 1} $$alloc(n: ref) returns (p: ref)
modifies $CurrAddr;
{
  assume $sge.ref.bool(n, $0.ref);
  if ($sgt.ref.bool(n, $0.ref)) {
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
  }
}

procedure  $free(p: ref);

const __SMACK_top_decl: ref;
axiom (__SMACK_top_decl == $sub.ref(0, 30000));
procedure  __SMACK_top_decl.ref($p0: ref);
const __SMACK_init_func_memory_model: ref;
axiom (__SMACK_init_func_memory_model == $sub.ref(0, 31032));
procedure  __SMACK_init_func_memory_model()
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1883, 3} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1883, 3} true;
  assume {:verifier.code 1} true;
  $CurrAddr := $1024.ref;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1888, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 32064));
procedure  __SMACK_static_init()
{
$bb0:
  $M.0 := $store.bv32($M.0, switch.table.ssl3_accept, 11bv32);
  $M.0 := $store.bv32($M.0, $add.ref($add.ref(switch.table.ssl3_accept, $mul.ref(0, 40)), $mul.ref(1, 4)), 11bv32);
  $M.0 := $store.bv32($M.0, $add.ref($add.ref(switch.table.ssl3_accept, $mul.ref(0, 40)), $mul.ref(2, 4)), 11bv32);
  $M.0 := $store.bv32($M.0, $add.ref($add.ref(switch.table.ssl3_accept, $mul.ref(0, 40)), $mul.ref(3, 4)), 14bv32);
  $M.0 := $store.bv32($M.0, $add.ref($add.ref(switch.table.ssl3_accept, $mul.ref(0, 40)), $mul.ref(4, 4)), 11bv32);
  $M.0 := $store.bv32($M.0, $add.ref($add.ref(switch.table.ssl3_accept, $mul.ref(0, 40)), $mul.ref(5, 4)), 11bv32);
  $M.0 := $store.bv32($M.0, $add.ref($add.ref(switch.table.ssl3_accept, $mul.ref(0, 40)), $mul.ref(6, 4)), 17bv32);
  $M.0 := $store.bv32($M.0, $add.ref($add.ref(switch.table.ssl3_accept, $mul.ref(0, 40)), $mul.ref(7, 4)), 11bv32);
  $M.0 := $store.bv32($M.0, $add.ref($add.ref(switch.table.ssl3_accept, $mul.ref(0, 40)), $mul.ref(8, 4)), 11bv32);
  $M.0 := $store.bv32($M.0, $add.ref($add.ref(switch.table.ssl3_accept, $mul.ref(0, 40)), $mul.ref(9, 4)), 20bv32);
  $M.0 := $store.bv32($M.0, switch.table.ssl3_accept.3, 12bv32);
  $M.0 := $store.bv32($M.0, $add.ref($add.ref(switch.table.ssl3_accept.3, $mul.ref(0, 40)), $mul.ref(1, 4)), 12bv32);
  $M.0 := $store.bv32($M.0, $add.ref($add.ref(switch.table.ssl3_accept.3, $mul.ref(0, 40)), $mul.ref(2, 4)), 12bv32);
  $M.0 := $store.bv32($M.0, $add.ref($add.ref(switch.table.ssl3_accept.3, $mul.ref(0, 40)), $mul.ref(3, 4)), 15bv32);
  $M.0 := $store.bv32($M.0, $add.ref($add.ref(switch.table.ssl3_accept.3, $mul.ref(0, 40)), $mul.ref(4, 4)), 12bv32);
  $M.0 := $store.bv32($M.0, $add.ref($add.ref(switch.table.ssl3_accept.3, $mul.ref(0, 40)), $mul.ref(5, 4)), 12bv32);
  $M.0 := $store.bv32($M.0, $add.ref($add.ref(switch.table.ssl3_accept.3, $mul.ref(0, 40)), $mul.ref(6, 4)), 18bv32);
  $M.0 := $store.bv32($M.0, $add.ref($add.ref(switch.table.ssl3_accept.3, $mul.ref(0, 40)), $mul.ref(7, 4)), 12bv32);
  $M.0 := $store.bv32($M.0, $add.ref($add.ref(switch.table.ssl3_accept.3, $mul.ref(0, 40)), $mul.ref(8, 4)), 12bv32);
  $M.0 := $store.bv32($M.0, $add.ref($add.ref(switch.table.ssl3_accept.3, $mul.ref(0, 40)), $mul.ref(9, 4)), 21bv32);
  $exn := false;
  return;
}
const $u0: bv32;
procedure  boogie_si_record_bv16(x: bv16);
procedure  boogie_si_record_bv32(x: bv32);
procedure  boogie_si_record_bv64(x: bv64);
procedure  boogie_si_record_bv8(x: bv8);
procedure  boogie_si_record_ref(x: ref);
procedure  $initialize()
{
  call __SMACK_static_init();
  call __SMACK_init_func_memory_model();
  return;
}
