// generated by SMACK version 2.5.0 for corral
// via /usr/local/bin/smack -q -t --no-memory-splitting --integer-encoding unbounded-integer --clang-options=-DCUSTOM_VERIFIER_ASSERT -O0 -fno-vectorize -fno-slp-vectorize -I/Users/ponce/git/Dat3M/include/ -bpl /Users/ponce/git/Dat3M/output/rfi000_tso.opt-O0.bpl /Users/ponce/git/Dat3M/output/rfi000_tso.opt_tmp.c

// Basic types
type i1 = int;
type i5 = int;
type i6 = int;
type i8 = int;
type i16 = int;
type i24 = int;
type i32 = int;
type i40 = int;
type i48 = int;
type i56 = int;
type i64 = int;
type i80 = int;
type i88 = int;
type i96 = int;
type i128 = int;
type i160 = int;
type i256 = int;
type ref = i64;
type float;

// Basic constants
const $0: i32;
axiom ($0 == 0);
const $1: i32;
axiom ($1 == 1);
const $0.ref: ref;
axiom ($0.ref == 0);
const $1.ref: ref;
axiom ($1.ref == 1);
const $1024.ref: ref;
axiom ($1024.ref == 1024);
// Memory model constants
const $GLOBALS_BOTTOM: ref;
const $EXTERNS_BOTTOM: ref;
const $MALLOC_TOP: ref;

// Memory maps (1 regions)
var $M.0: [ref] i8;

// Memory address bounds
axiom ($GLOBALS_BOTTOM == $sub.ref(0, 79339));
axiom ($EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32768)));
axiom ($MALLOC_TOP == 9223372036854775807);
function {:inline} $isExternal(p: ref) returns (bool) { $slt.ref.bool(p, $EXTERNS_BOTTOM) }

// SMT bit-vector/integer conversion
function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) returns (bv64);
function {:builtin "bv2nat"} $bv2int.64(i: bv64) returns (i64);

// Integer arithmetic operations
function {:inline} $add.i1(i1: i1, i2: i1) returns (i1) { (i1 + i2) }
function {:inline} $add.i5(i1: i5, i2: i5) returns (i5) { (i1 + i2) }
function {:inline} $add.i6(i1: i6, i2: i6) returns (i6) { (i1 + i2) }
function {:inline} $add.i8(i1: i8, i2: i8) returns (i8) { (i1 + i2) }
function {:inline} $add.i16(i1: i16, i2: i16) returns (i16) { (i1 + i2) }
function {:inline} $add.i24(i1: i24, i2: i24) returns (i24) { (i1 + i2) }
function {:inline} $add.i32(i1: i32, i2: i32) returns (i32) { (i1 + i2) }
function {:inline} $add.i40(i1: i40, i2: i40) returns (i40) { (i1 + i2) }
function {:inline} $add.i48(i1: i48, i2: i48) returns (i48) { (i1 + i2) }
function {:inline} $add.i56(i1: i56, i2: i56) returns (i56) { (i1 + i2) }
function {:inline} $add.i64(i1: i64, i2: i64) returns (i64) { (i1 + i2) }
function {:inline} $add.i80(i1: i80, i2: i80) returns (i80) { (i1 + i2) }
function {:inline} $add.i88(i1: i88, i2: i88) returns (i88) { (i1 + i2) }
function {:inline} $add.i96(i1: i96, i2: i96) returns (i96) { (i1 + i2) }
function {:inline} $add.i128(i1: i128, i2: i128) returns (i128) { (i1 + i2) }
function {:inline} $add.i160(i1: i160, i2: i160) returns (i160) { (i1 + i2) }
function {:inline} $add.i256(i1: i256, i2: i256) returns (i256) { (i1 + i2) }
function {:inline} $sub.i1(i1: i1, i2: i1) returns (i1) { (i1 - i2) }
function {:inline} $sub.i5(i1: i5, i2: i5) returns (i5) { (i1 - i2) }
function {:inline} $sub.i6(i1: i6, i2: i6) returns (i6) { (i1 - i2) }
function {:inline} $sub.i8(i1: i8, i2: i8) returns (i8) { (i1 - i2) }
function {:inline} $sub.i16(i1: i16, i2: i16) returns (i16) { (i1 - i2) }
function {:inline} $sub.i24(i1: i24, i2: i24) returns (i24) { (i1 - i2) }
function {:inline} $sub.i32(i1: i32, i2: i32) returns (i32) { (i1 - i2) }
function {:inline} $sub.i40(i1: i40, i2: i40) returns (i40) { (i1 - i2) }
function {:inline} $sub.i48(i1: i48, i2: i48) returns (i48) { (i1 - i2) }
function {:inline} $sub.i56(i1: i56, i2: i56) returns (i56) { (i1 - i2) }
function {:inline} $sub.i64(i1: i64, i2: i64) returns (i64) { (i1 - i2) }
function {:inline} $sub.i80(i1: i80, i2: i80) returns (i80) { (i1 - i2) }
function {:inline} $sub.i88(i1: i88, i2: i88) returns (i88) { (i1 - i2) }
function {:inline} $sub.i96(i1: i96, i2: i96) returns (i96) { (i1 - i2) }
function {:inline} $sub.i128(i1: i128, i2: i128) returns (i128) { (i1 - i2) }
function {:inline} $sub.i160(i1: i160, i2: i160) returns (i160) { (i1 - i2) }
function {:inline} $sub.i256(i1: i256, i2: i256) returns (i256) { (i1 - i2) }
function {:inline} $mul.i1(i1: i1, i2: i1) returns (i1) { (i1 * i2) }
function {:inline} $mul.i5(i1: i5, i2: i5) returns (i5) { (i1 * i2) }
function {:inline} $mul.i6(i1: i6, i2: i6) returns (i6) { (i1 * i2) }
function {:inline} $mul.i8(i1: i8, i2: i8) returns (i8) { (i1 * i2) }
function {:inline} $mul.i16(i1: i16, i2: i16) returns (i16) { (i1 * i2) }
function {:inline} $mul.i24(i1: i24, i2: i24) returns (i24) { (i1 * i2) }
function {:inline} $mul.i32(i1: i32, i2: i32) returns (i32) { (i1 * i2) }
function {:inline} $mul.i40(i1: i40, i2: i40) returns (i40) { (i1 * i2) }
function {:inline} $mul.i48(i1: i48, i2: i48) returns (i48) { (i1 * i2) }
function {:inline} $mul.i56(i1: i56, i2: i56) returns (i56) { (i1 * i2) }
function {:inline} $mul.i64(i1: i64, i2: i64) returns (i64) { (i1 * i2) }
function {:inline} $mul.i80(i1: i80, i2: i80) returns (i80) { (i1 * i2) }
function {:inline} $mul.i88(i1: i88, i2: i88) returns (i88) { (i1 * i2) }
function {:inline} $mul.i96(i1: i96, i2: i96) returns (i96) { (i1 * i2) }
function {:inline} $mul.i128(i1: i128, i2: i128) returns (i128) { (i1 * i2) }
function {:inline} $mul.i160(i1: i160, i2: i160) returns (i160) { (i1 * i2) }
function {:inline} $mul.i256(i1: i256, i2: i256) returns (i256) { (i1 * i2) }
function {:builtin "div"} $idiv.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "div"} $idiv.i5(i1: i5, i2: i5) returns (i5);
function {:builtin "div"} $idiv.i6(i1: i6, i2: i6) returns (i6);
function {:builtin "div"} $idiv.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "div"} $idiv.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "div"} $idiv.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "div"} $idiv.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "div"} $idiv.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "div"} $idiv.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "div"} $idiv.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "div"} $idiv.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "div"} $idiv.i80(i1: i80, i2: i80) returns (i80);
function {:builtin "div"} $idiv.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "div"} $idiv.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "div"} $idiv.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "div"} $idiv.i160(i1: i160, i2: i160) returns (i160);
function {:builtin "div"} $idiv.i256(i1: i256, i2: i256) returns (i256);
function {:inline} $sdiv.i1(i1: i1, i2: i1) returns (i1) { $idiv.i1(i1, i2) }
function {:inline} $sdiv.i5(i1: i5, i2: i5) returns (i5) { $idiv.i5(i1, i2) }
function {:inline} $sdiv.i6(i1: i6, i2: i6) returns (i6) { $idiv.i6(i1, i2) }
function {:inline} $sdiv.i8(i1: i8, i2: i8) returns (i8) { $idiv.i8(i1, i2) }
function {:inline} $sdiv.i16(i1: i16, i2: i16) returns (i16) { $idiv.i16(i1, i2) }
function {:inline} $sdiv.i24(i1: i24, i2: i24) returns (i24) { $idiv.i24(i1, i2) }
function {:inline} $sdiv.i32(i1: i32, i2: i32) returns (i32) { $idiv.i32(i1, i2) }
function {:inline} $sdiv.i40(i1: i40, i2: i40) returns (i40) { $idiv.i40(i1, i2) }
function {:inline} $sdiv.i48(i1: i48, i2: i48) returns (i48) { $idiv.i48(i1, i2) }
function {:inline} $sdiv.i56(i1: i56, i2: i56) returns (i56) { $idiv.i56(i1, i2) }
function {:inline} $sdiv.i64(i1: i64, i2: i64) returns (i64) { $idiv.i64(i1, i2) }
function {:inline} $sdiv.i80(i1: i80, i2: i80) returns (i80) { $idiv.i80(i1, i2) }
function {:inline} $sdiv.i88(i1: i88, i2: i88) returns (i88) { $idiv.i88(i1, i2) }
function {:inline} $sdiv.i96(i1: i96, i2: i96) returns (i96) { $idiv.i96(i1, i2) }
function {:inline} $sdiv.i128(i1: i128, i2: i128) returns (i128) { $idiv.i128(i1, i2) }
function {:inline} $sdiv.i160(i1: i160, i2: i160) returns (i160) { $idiv.i160(i1, i2) }
function {:inline} $sdiv.i256(i1: i256, i2: i256) returns (i256) { $idiv.i256(i1, i2) }
function {:inline} $udiv.i1(i1: i1, i2: i1) returns (i1) { $idiv.i1(i1, i2) }
function {:inline} $udiv.i5(i1: i5, i2: i5) returns (i5) { $idiv.i5(i1, i2) }
function {:inline} $udiv.i6(i1: i6, i2: i6) returns (i6) { $idiv.i6(i1, i2) }
function {:inline} $udiv.i8(i1: i8, i2: i8) returns (i8) { $idiv.i8(i1, i2) }
function {:inline} $udiv.i16(i1: i16, i2: i16) returns (i16) { $idiv.i16(i1, i2) }
function {:inline} $udiv.i24(i1: i24, i2: i24) returns (i24) { $idiv.i24(i1, i2) }
function {:inline} $udiv.i32(i1: i32, i2: i32) returns (i32) { $idiv.i32(i1, i2) }
function {:inline} $udiv.i40(i1: i40, i2: i40) returns (i40) { $idiv.i40(i1, i2) }
function {:inline} $udiv.i48(i1: i48, i2: i48) returns (i48) { $idiv.i48(i1, i2) }
function {:inline} $udiv.i56(i1: i56, i2: i56) returns (i56) { $idiv.i56(i1, i2) }
function {:inline} $udiv.i64(i1: i64, i2: i64) returns (i64) { $idiv.i64(i1, i2) }
function {:inline} $udiv.i80(i1: i80, i2: i80) returns (i80) { $idiv.i80(i1, i2) }
function {:inline} $udiv.i88(i1: i88, i2: i88) returns (i88) { $idiv.i88(i1, i2) }
function {:inline} $udiv.i96(i1: i96, i2: i96) returns (i96) { $idiv.i96(i1, i2) }
function {:inline} $udiv.i128(i1: i128, i2: i128) returns (i128) { $idiv.i128(i1, i2) }
function {:inline} $udiv.i160(i1: i160, i2: i160) returns (i160) { $idiv.i160(i1, i2) }
function {:inline} $udiv.i256(i1: i256, i2: i256) returns (i256) { $idiv.i256(i1, i2) }
function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) returns (i5);
function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) returns (i6);
function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) returns (i80);
function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) returns (i160);
function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) returns (i256);
function {:inline} $srem.i1(i1: i1, i2: i1) returns (i1) { (if ($ne.i1.bool($smod.i1(i1, i2), 0) && $slt.i1.bool(i1, 0)) then $sub.i1($smod.i1(i1, i2), $smax.i1(i2, $sub.i1(0, i2))) else $smod.i1(i1, i2)) }
function {:inline} $srem.i5(i1: i5, i2: i5) returns (i5) { (if ($ne.i5.bool($smod.i5(i1, i2), 0) && $slt.i5.bool(i1, 0)) then $sub.i5($smod.i5(i1, i2), $smax.i5(i2, $sub.i5(0, i2))) else $smod.i5(i1, i2)) }
function {:inline} $srem.i6(i1: i6, i2: i6) returns (i6) { (if ($ne.i6.bool($smod.i6(i1, i2), 0) && $slt.i6.bool(i1, 0)) then $sub.i6($smod.i6(i1, i2), $smax.i6(i2, $sub.i6(0, i2))) else $smod.i6(i1, i2)) }
function {:inline} $srem.i8(i1: i8, i2: i8) returns (i8) { (if ($ne.i8.bool($smod.i8(i1, i2), 0) && $slt.i8.bool(i1, 0)) then $sub.i8($smod.i8(i1, i2), $smax.i8(i2, $sub.i8(0, i2))) else $smod.i8(i1, i2)) }
function {:inline} $srem.i16(i1: i16, i2: i16) returns (i16) { (if ($ne.i16.bool($smod.i16(i1, i2), 0) && $slt.i16.bool(i1, 0)) then $sub.i16($smod.i16(i1, i2), $smax.i16(i2, $sub.i16(0, i2))) else $smod.i16(i1, i2)) }
function {:inline} $srem.i24(i1: i24, i2: i24) returns (i24) { (if ($ne.i24.bool($smod.i24(i1, i2), 0) && $slt.i24.bool(i1, 0)) then $sub.i24($smod.i24(i1, i2), $smax.i24(i2, $sub.i24(0, i2))) else $smod.i24(i1, i2)) }
function {:inline} $srem.i32(i1: i32, i2: i32) returns (i32) { (if ($ne.i32.bool($smod.i32(i1, i2), 0) && $slt.i32.bool(i1, 0)) then $sub.i32($smod.i32(i1, i2), $smax.i32(i2, $sub.i32(0, i2))) else $smod.i32(i1, i2)) }
function {:inline} $srem.i40(i1: i40, i2: i40) returns (i40) { (if ($ne.i40.bool($smod.i40(i1, i2), 0) && $slt.i40.bool(i1, 0)) then $sub.i40($smod.i40(i1, i2), $smax.i40(i2, $sub.i40(0, i2))) else $smod.i40(i1, i2)) }
function {:inline} $srem.i48(i1: i48, i2: i48) returns (i48) { (if ($ne.i48.bool($smod.i48(i1, i2), 0) && $slt.i48.bool(i1, 0)) then $sub.i48($smod.i48(i1, i2), $smax.i48(i2, $sub.i48(0, i2))) else $smod.i48(i1, i2)) }
function {:inline} $srem.i56(i1: i56, i2: i56) returns (i56) { (if ($ne.i56.bool($smod.i56(i1, i2), 0) && $slt.i56.bool(i1, 0)) then $sub.i56($smod.i56(i1, i2), $smax.i56(i2, $sub.i56(0, i2))) else $smod.i56(i1, i2)) }
function {:inline} $srem.i64(i1: i64, i2: i64) returns (i64) { (if ($ne.i64.bool($smod.i64(i1, i2), 0) && $slt.i64.bool(i1, 0)) then $sub.i64($smod.i64(i1, i2), $smax.i64(i2, $sub.i64(0, i2))) else $smod.i64(i1, i2)) }
function {:inline} $srem.i80(i1: i80, i2: i80) returns (i80) { (if ($ne.i80.bool($smod.i80(i1, i2), 0) && $slt.i80.bool(i1, 0)) then $sub.i80($smod.i80(i1, i2), $smax.i80(i2, $sub.i80(0, i2))) else $smod.i80(i1, i2)) }
function {:inline} $srem.i88(i1: i88, i2: i88) returns (i88) { (if ($ne.i88.bool($smod.i88(i1, i2), 0) && $slt.i88.bool(i1, 0)) then $sub.i88($smod.i88(i1, i2), $smax.i88(i2, $sub.i88(0, i2))) else $smod.i88(i1, i2)) }
function {:inline} $srem.i96(i1: i96, i2: i96) returns (i96) { (if ($ne.i96.bool($smod.i96(i1, i2), 0) && $slt.i96.bool(i1, 0)) then $sub.i96($smod.i96(i1, i2), $smax.i96(i2, $sub.i96(0, i2))) else $smod.i96(i1, i2)) }
function {:inline} $srem.i128(i1: i128, i2: i128) returns (i128) { (if ($ne.i128.bool($smod.i128(i1, i2), 0) && $slt.i128.bool(i1, 0)) then $sub.i128($smod.i128(i1, i2), $smax.i128(i2, $sub.i128(0, i2))) else $smod.i128(i1, i2)) }
function {:inline} $srem.i160(i1: i160, i2: i160) returns (i160) { (if ($ne.i160.bool($smod.i160(i1, i2), 0) && $slt.i160.bool(i1, 0)) then $sub.i160($smod.i160(i1, i2), $smax.i160(i2, $sub.i160(0, i2))) else $smod.i160(i1, i2)) }
function {:inline} $srem.i256(i1: i256, i2: i256) returns (i256) { (if ($ne.i256.bool($smod.i256(i1, i2), 0) && $slt.i256.bool(i1, 0)) then $sub.i256($smod.i256(i1, i2), $smax.i256(i2, $sub.i256(0, i2))) else $smod.i256(i1, i2)) }
function {:inline} $urem.i1(i1: i1, i2: i1) returns (i1) { $smod.i1(i1, i2) }
function {:inline} $urem.i5(i1: i5, i2: i5) returns (i5) { $smod.i5(i1, i2) }
function {:inline} $urem.i6(i1: i6, i2: i6) returns (i6) { $smod.i6(i1, i2) }
function {:inline} $urem.i8(i1: i8, i2: i8) returns (i8) { $smod.i8(i1, i2) }
function {:inline} $urem.i16(i1: i16, i2: i16) returns (i16) { $smod.i16(i1, i2) }
function {:inline} $urem.i24(i1: i24, i2: i24) returns (i24) { $smod.i24(i1, i2) }
function {:inline} $urem.i32(i1: i32, i2: i32) returns (i32) { $smod.i32(i1, i2) }
function {:inline} $urem.i40(i1: i40, i2: i40) returns (i40) { $smod.i40(i1, i2) }
function {:inline} $urem.i48(i1: i48, i2: i48) returns (i48) { $smod.i48(i1, i2) }
function {:inline} $urem.i56(i1: i56, i2: i56) returns (i56) { $smod.i56(i1, i2) }
function {:inline} $urem.i64(i1: i64, i2: i64) returns (i64) { $smod.i64(i1, i2) }
function {:inline} $urem.i80(i1: i80, i2: i80) returns (i80) { $smod.i80(i1, i2) }
function {:inline} $urem.i88(i1: i88, i2: i88) returns (i88) { $smod.i88(i1, i2) }
function {:inline} $urem.i96(i1: i96, i2: i96) returns (i96) { $smod.i96(i1, i2) }
function {:inline} $urem.i128(i1: i128, i2: i128) returns (i128) { $smod.i128(i1, i2) }
function {:inline} $urem.i160(i1: i160, i2: i160) returns (i160) { $smod.i160(i1, i2) }
function {:inline} $urem.i256(i1: i256, i2: i256) returns (i256) { $smod.i256(i1, i2) }
function $shl.i1(i1: i1, i2: i1) returns (i1);
function $shl.i5(i1: i5, i2: i5) returns (i5);
function $shl.i6(i1: i6, i2: i6) returns (i6);
function $shl.i8(i1: i8, i2: i8) returns (i8);
function $shl.i16(i1: i16, i2: i16) returns (i16);
function $shl.i24(i1: i24, i2: i24) returns (i24);
function $shl.i32(i1: i32, i2: i32) returns (i32);
function $shl.i40(i1: i40, i2: i40) returns (i40);
function $shl.i48(i1: i48, i2: i48) returns (i48);
function $shl.i56(i1: i56, i2: i56) returns (i56);
function $shl.i64(i1: i64, i2: i64) returns (i64);
function $shl.i80(i1: i80, i2: i80) returns (i80);
function $shl.i88(i1: i88, i2: i88) returns (i88);
function $shl.i96(i1: i96, i2: i96) returns (i96);
function $shl.i128(i1: i128, i2: i128) returns (i128);
function $shl.i160(i1: i160, i2: i160) returns (i160);
function $shl.i256(i1: i256, i2: i256) returns (i256);
function $lshr.i1(i1: i1, i2: i1) returns (i1);
function $lshr.i5(i1: i5, i2: i5) returns (i5);
function $lshr.i6(i1: i6, i2: i6) returns (i6);
function $lshr.i8(i1: i8, i2: i8) returns (i8);
function $lshr.i16(i1: i16, i2: i16) returns (i16);
function $lshr.i24(i1: i24, i2: i24) returns (i24);
function $lshr.i32(i1: i32, i2: i32) returns (i32);
function $lshr.i40(i1: i40, i2: i40) returns (i40);
function $lshr.i48(i1: i48, i2: i48) returns (i48);
function $lshr.i56(i1: i56, i2: i56) returns (i56);
function $lshr.i64(i1: i64, i2: i64) returns (i64);
function $lshr.i80(i1: i80, i2: i80) returns (i80);
function $lshr.i88(i1: i88, i2: i88) returns (i88);
function $lshr.i96(i1: i96, i2: i96) returns (i96);
function $lshr.i128(i1: i128, i2: i128) returns (i128);
function $lshr.i160(i1: i160, i2: i160) returns (i160);
function $lshr.i256(i1: i256, i2: i256) returns (i256);
function $ashr.i1(i1: i1, i2: i1) returns (i1);
function $ashr.i5(i1: i5, i2: i5) returns (i5);
function $ashr.i6(i1: i6, i2: i6) returns (i6);
function $ashr.i8(i1: i8, i2: i8) returns (i8);
function $ashr.i16(i1: i16, i2: i16) returns (i16);
function $ashr.i24(i1: i24, i2: i24) returns (i24);
function $ashr.i32(i1: i32, i2: i32) returns (i32);
function $ashr.i40(i1: i40, i2: i40) returns (i40);
function $ashr.i48(i1: i48, i2: i48) returns (i48);
function $ashr.i56(i1: i56, i2: i56) returns (i56);
function $ashr.i64(i1: i64, i2: i64) returns (i64);
function $ashr.i80(i1: i80, i2: i80) returns (i80);
function $ashr.i88(i1: i88, i2: i88) returns (i88);
function $ashr.i96(i1: i96, i2: i96) returns (i96);
function $ashr.i128(i1: i128, i2: i128) returns (i128);
function $ashr.i160(i1: i160, i2: i160) returns (i160);
function $ashr.i256(i1: i256, i2: i256) returns (i256);
function $and.i1(i1: i1, i2: i1) returns (i1);
function $and.i5(i1: i5, i2: i5) returns (i5);
function $and.i6(i1: i6, i2: i6) returns (i6);
function $and.i8(i1: i8, i2: i8) returns (i8);
function $and.i16(i1: i16, i2: i16) returns (i16);
function $and.i24(i1: i24, i2: i24) returns (i24);
function $and.i32(i1: i32, i2: i32) returns (i32);
function $and.i40(i1: i40, i2: i40) returns (i40);
function $and.i48(i1: i48, i2: i48) returns (i48);
function $and.i56(i1: i56, i2: i56) returns (i56);
function $and.i64(i1: i64, i2: i64) returns (i64);
function $and.i80(i1: i80, i2: i80) returns (i80);
function $and.i88(i1: i88, i2: i88) returns (i88);
function $and.i96(i1: i96, i2: i96) returns (i96);
function $and.i128(i1: i128, i2: i128) returns (i128);
function $and.i160(i1: i160, i2: i160) returns (i160);
function $and.i256(i1: i256, i2: i256) returns (i256);
function $or.i1(i1: i1, i2: i1) returns (i1);
function $or.i5(i1: i5, i2: i5) returns (i5);
function $or.i6(i1: i6, i2: i6) returns (i6);
function $or.i8(i1: i8, i2: i8) returns (i8);
function $or.i16(i1: i16, i2: i16) returns (i16);
function $or.i24(i1: i24, i2: i24) returns (i24);
function $or.i32(i1: i32, i2: i32) returns (i32);
function $or.i40(i1: i40, i2: i40) returns (i40);
function $or.i48(i1: i48, i2: i48) returns (i48);
function $or.i56(i1: i56, i2: i56) returns (i56);
function $or.i64(i1: i64, i2: i64) returns (i64);
function $or.i80(i1: i80, i2: i80) returns (i80);
function $or.i88(i1: i88, i2: i88) returns (i88);
function $or.i96(i1: i96, i2: i96) returns (i96);
function $or.i128(i1: i128, i2: i128) returns (i128);
function $or.i160(i1: i160, i2: i160) returns (i160);
function $or.i256(i1: i256, i2: i256) returns (i256);
function $xor.i1(i1: i1, i2: i1) returns (i1);
function $xor.i5(i1: i5, i2: i5) returns (i5);
function $xor.i6(i1: i6, i2: i6) returns (i6);
function $xor.i8(i1: i8, i2: i8) returns (i8);
function $xor.i16(i1: i16, i2: i16) returns (i16);
function $xor.i24(i1: i24, i2: i24) returns (i24);
function $xor.i32(i1: i32, i2: i32) returns (i32);
function $xor.i40(i1: i40, i2: i40) returns (i40);
function $xor.i48(i1: i48, i2: i48) returns (i48);
function $xor.i56(i1: i56, i2: i56) returns (i56);
function $xor.i64(i1: i64, i2: i64) returns (i64);
function $xor.i80(i1: i80, i2: i80) returns (i80);
function $xor.i88(i1: i88, i2: i88) returns (i88);
function $xor.i96(i1: i96, i2: i96) returns (i96);
function $xor.i128(i1: i128, i2: i128) returns (i128);
function $xor.i160(i1: i160, i2: i160) returns (i160);
function $xor.i256(i1: i256, i2: i256) returns (i256);
function $nand.i1(i1: i1, i2: i1) returns (i1);
function $nand.i5(i1: i5, i2: i5) returns (i5);
function $nand.i6(i1: i6, i2: i6) returns (i6);
function $nand.i8(i1: i8, i2: i8) returns (i8);
function $nand.i16(i1: i16, i2: i16) returns (i16);
function $nand.i24(i1: i24, i2: i24) returns (i24);
function $nand.i32(i1: i32, i2: i32) returns (i32);
function $nand.i40(i1: i40, i2: i40) returns (i40);
function $nand.i48(i1: i48, i2: i48) returns (i48);
function $nand.i56(i1: i56, i2: i56) returns (i56);
function $nand.i64(i1: i64, i2: i64) returns (i64);
function $nand.i80(i1: i80, i2: i80) returns (i80);
function $nand.i88(i1: i88, i2: i88) returns (i88);
function $nand.i96(i1: i96, i2: i96) returns (i96);
function $nand.i128(i1: i128, i2: i128) returns (i128);
function $nand.i160(i1: i160, i2: i160) returns (i160);
function $nand.i256(i1: i256, i2: i256) returns (i256);
function $not.i1(i: i1) returns (i1);
function $not.i5(i: i5) returns (i5);
function $not.i6(i: i6) returns (i6);
function $not.i8(i: i8) returns (i8);
function $not.i16(i: i16) returns (i16);
function $not.i24(i: i24) returns (i24);
function $not.i32(i: i32) returns (i32);
function $not.i40(i: i40) returns (i40);
function $not.i48(i: i48) returns (i48);
function $not.i56(i: i56) returns (i56);
function $not.i64(i: i64) returns (i64);
function $not.i80(i: i80) returns (i80);
function $not.i88(i: i88) returns (i88);
function $not.i96(i: i96) returns (i96);
function $not.i128(i: i128) returns (i128);
function $not.i160(i: i160) returns (i160);
function $not.i256(i: i256) returns (i256);
function {:inline} $smin.i1(i1: i1, i2: i1) returns (i1) { (if $slt.i1.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.i5(i1: i5, i2: i5) returns (i5) { (if $slt.i5.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.i6(i1: i6, i2: i6) returns (i6) { (if $slt.i6.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.i8(i1: i8, i2: i8) returns (i8) { (if $slt.i8.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.i16(i1: i16, i2: i16) returns (i16) { (if $slt.i16.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.i24(i1: i24, i2: i24) returns (i24) { (if $slt.i24.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.i32(i1: i32, i2: i32) returns (i32) { (if $slt.i32.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.i40(i1: i40, i2: i40) returns (i40) { (if $slt.i40.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.i48(i1: i48, i2: i48) returns (i48) { (if $slt.i48.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.i56(i1: i56, i2: i56) returns (i56) { (if $slt.i56.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.i64(i1: i64, i2: i64) returns (i64) { (if $slt.i64.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.i80(i1: i80, i2: i80) returns (i80) { (if $slt.i80.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.i88(i1: i88, i2: i88) returns (i88) { (if $slt.i88.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.i96(i1: i96, i2: i96) returns (i96) { (if $slt.i96.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.i128(i1: i128, i2: i128) returns (i128) { (if $slt.i128.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.i160(i1: i160, i2: i160) returns (i160) { (if $slt.i160.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.i256(i1: i256, i2: i256) returns (i256) { (if $slt.i256.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.i1(i1: i1, i2: i1) returns (i1) { (if $sgt.i1.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.i5(i1: i5, i2: i5) returns (i5) { (if $sgt.i5.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.i6(i1: i6, i2: i6) returns (i6) { (if $sgt.i6.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.i8(i1: i8, i2: i8) returns (i8) { (if $sgt.i8.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.i16(i1: i16, i2: i16) returns (i16) { (if $sgt.i16.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.i24(i1: i24, i2: i24) returns (i24) { (if $sgt.i24.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.i32(i1: i32, i2: i32) returns (i32) { (if $sgt.i32.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.i40(i1: i40, i2: i40) returns (i40) { (if $sgt.i40.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.i48(i1: i48, i2: i48) returns (i48) { (if $sgt.i48.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.i56(i1: i56, i2: i56) returns (i56) { (if $sgt.i56.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.i64(i1: i64, i2: i64) returns (i64) { (if $sgt.i64.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.i80(i1: i80, i2: i80) returns (i80) { (if $sgt.i80.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.i88(i1: i88, i2: i88) returns (i88) { (if $sgt.i88.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.i96(i1: i96, i2: i96) returns (i96) { (if $sgt.i96.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.i128(i1: i128, i2: i128) returns (i128) { (if $sgt.i128.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.i160(i1: i160, i2: i160) returns (i160) { (if $sgt.i160.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.i256(i1: i256, i2: i256) returns (i256) { (if $sgt.i256.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.i1(i1: i1, i2: i1) returns (i1) { (if $ult.i1.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.i5(i1: i5, i2: i5) returns (i5) { (if $ult.i5.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.i6(i1: i6, i2: i6) returns (i6) { (if $ult.i6.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.i8(i1: i8, i2: i8) returns (i8) { (if $ult.i8.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.i16(i1: i16, i2: i16) returns (i16) { (if $ult.i16.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.i24(i1: i24, i2: i24) returns (i24) { (if $ult.i24.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.i32(i1: i32, i2: i32) returns (i32) { (if $ult.i32.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.i40(i1: i40, i2: i40) returns (i40) { (if $ult.i40.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.i48(i1: i48, i2: i48) returns (i48) { (if $ult.i48.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.i56(i1: i56, i2: i56) returns (i56) { (if $ult.i56.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.i64(i1: i64, i2: i64) returns (i64) { (if $ult.i64.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.i80(i1: i80, i2: i80) returns (i80) { (if $ult.i80.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.i88(i1: i88, i2: i88) returns (i88) { (if $ult.i88.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.i96(i1: i96, i2: i96) returns (i96) { (if $ult.i96.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.i128(i1: i128, i2: i128) returns (i128) { (if $ult.i128.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.i160(i1: i160, i2: i160) returns (i160) { (if $ult.i160.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.i256(i1: i256, i2: i256) returns (i256) { (if $ult.i256.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.i1(i1: i1, i2: i1) returns (i1) { (if $ugt.i1.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.i5(i1: i5, i2: i5) returns (i5) { (if $ugt.i5.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.i6(i1: i6, i2: i6) returns (i6) { (if $ugt.i6.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.i8(i1: i8, i2: i8) returns (i8) { (if $ugt.i8.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.i16(i1: i16, i2: i16) returns (i16) { (if $ugt.i16.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.i24(i1: i24, i2: i24) returns (i24) { (if $ugt.i24.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.i32(i1: i32, i2: i32) returns (i32) { (if $ugt.i32.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.i40(i1: i40, i2: i40) returns (i40) { (if $ugt.i40.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.i48(i1: i48, i2: i48) returns (i48) { (if $ugt.i48.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.i56(i1: i56, i2: i56) returns (i56) { (if $ugt.i56.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.i64(i1: i64, i2: i64) returns (i64) { (if $ugt.i64.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.i80(i1: i80, i2: i80) returns (i80) { (if $ugt.i80.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.i88(i1: i88, i2: i88) returns (i88) { (if $ugt.i88.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.i96(i1: i96, i2: i96) returns (i96) { (if $ugt.i96.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.i128(i1: i128, i2: i128) returns (i128) { (if $ugt.i128.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.i160(i1: i160, i2: i160) returns (i160) { (if $ugt.i160.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.i256(i1: i256, i2: i256) returns (i256) { (if $ugt.i256.bool(i1, i2) then i1 else i2) }
axiom ($and.i1(0, 0) == 0);
axiom ($or.i1(0, 0) == 0);
axiom ($xor.i1(0, 0) == 0);
axiom ($and.i1(0, 1) == 0);
axiom ($or.i1(0, 1) == 1);
axiom ($xor.i1(0, 1) == 1);
axiom ($and.i1(1, 0) == 0);
axiom ($or.i1(1, 0) == 1);
axiom ($xor.i1(1, 0) == 1);
axiom ($and.i1(1, 1) == 1);
axiom ($or.i1(1, 1) == 1);
axiom ($xor.i1(1, 1) == 0);
axiom ($and.i32(32, 16) == 0);
// Integer predicates
function {:inline} $ule.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i1(i1: i1, i2: i1) returns (i1) { (if $ule.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i5(i1: i5, i2: i5) returns (i1) { (if $ule.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i6(i1: i6, i2: i6) returns (i1) { (if $ule.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i8(i1: i8, i2: i8) returns (i1) { (if $ule.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i16(i1: i16, i2: i16) returns (i1) { (if $ule.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i24(i1: i24, i2: i24) returns (i1) { (if $ule.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i32(i1: i32, i2: i32) returns (i1) { (if $ule.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i40(i1: i40, i2: i40) returns (i1) { (if $ule.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i48(i1: i48, i2: i48) returns (i1) { (if $ule.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i56(i1: i56, i2: i56) returns (i1) { (if $ule.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i64(i1: i64, i2: i64) returns (i1) { (if $ule.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i80(i1: i80, i2: i80) returns (i1) { (if $ule.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i88(i1: i88, i2: i88) returns (i1) { (if $ule.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i96(i1: i96, i2: i96) returns (i1) { (if $ule.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i128(i1: i128, i2: i128) returns (i1) { (if $ule.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i160(i1: i160, i2: i160) returns (i1) { (if $ule.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i256(i1: i256, i2: i256) returns (i1) { (if $ule.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 < i2) }
function {:inline} $ult.i1(i1: i1, i2: i1) returns (i1) { (if $ult.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 < i2) }
function {:inline} $ult.i5(i1: i5, i2: i5) returns (i1) { (if $ult.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 < i2) }
function {:inline} $ult.i6(i1: i6, i2: i6) returns (i1) { (if $ult.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 < i2) }
function {:inline} $ult.i8(i1: i8, i2: i8) returns (i1) { (if $ult.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 < i2) }
function {:inline} $ult.i16(i1: i16, i2: i16) returns (i1) { (if $ult.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 < i2) }
function {:inline} $ult.i24(i1: i24, i2: i24) returns (i1) { (if $ult.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 < i2) }
function {:inline} $ult.i32(i1: i32, i2: i32) returns (i1) { (if $ult.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 < i2) }
function {:inline} $ult.i40(i1: i40, i2: i40) returns (i1) { (if $ult.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 < i2) }
function {:inline} $ult.i48(i1: i48, i2: i48) returns (i1) { (if $ult.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 < i2) }
function {:inline} $ult.i56(i1: i56, i2: i56) returns (i1) { (if $ult.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 < i2) }
function {:inline} $ult.i64(i1: i64, i2: i64) returns (i1) { (if $ult.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 < i2) }
function {:inline} $ult.i80(i1: i80, i2: i80) returns (i1) { (if $ult.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 < i2) }
function {:inline} $ult.i88(i1: i88, i2: i88) returns (i1) { (if $ult.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 < i2) }
function {:inline} $ult.i96(i1: i96, i2: i96) returns (i1) { (if $ult.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 < i2) }
function {:inline} $ult.i128(i1: i128, i2: i128) returns (i1) { (if $ult.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 < i2) }
function {:inline} $ult.i160(i1: i160, i2: i160) returns (i1) { (if $ult.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 < i2) }
function {:inline} $ult.i256(i1: i256, i2: i256) returns (i1) { (if $ult.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i1(i1: i1, i2: i1) returns (i1) { (if $uge.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i5(i1: i5, i2: i5) returns (i1) { (if $uge.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i6(i1: i6, i2: i6) returns (i1) { (if $uge.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i8(i1: i8, i2: i8) returns (i1) { (if $uge.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i16(i1: i16, i2: i16) returns (i1) { (if $uge.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i24(i1: i24, i2: i24) returns (i1) { (if $uge.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i32(i1: i32, i2: i32) returns (i1) { (if $uge.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i40(i1: i40, i2: i40) returns (i1) { (if $uge.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i48(i1: i48, i2: i48) returns (i1) { (if $uge.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i56(i1: i56, i2: i56) returns (i1) { (if $uge.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i64(i1: i64, i2: i64) returns (i1) { (if $uge.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i80(i1: i80, i2: i80) returns (i1) { (if $uge.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i88(i1: i88, i2: i88) returns (i1) { (if $uge.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i96(i1: i96, i2: i96) returns (i1) { (if $uge.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i128(i1: i128, i2: i128) returns (i1) { (if $uge.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i160(i1: i160, i2: i160) returns (i1) { (if $uge.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i256(i1: i256, i2: i256) returns (i1) { (if $uge.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i1(i1: i1, i2: i1) returns (i1) { (if $ugt.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i5(i1: i5, i2: i5) returns (i1) { (if $ugt.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i6(i1: i6, i2: i6) returns (i1) { (if $ugt.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i8(i1: i8, i2: i8) returns (i1) { (if $ugt.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i16(i1: i16, i2: i16) returns (i1) { (if $ugt.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i24(i1: i24, i2: i24) returns (i1) { (if $ugt.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i32(i1: i32, i2: i32) returns (i1) { (if $ugt.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i40(i1: i40, i2: i40) returns (i1) { (if $ugt.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i48(i1: i48, i2: i48) returns (i1) { (if $ugt.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i56(i1: i56, i2: i56) returns (i1) { (if $ugt.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i64(i1: i64, i2: i64) returns (i1) { (if $ugt.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i80(i1: i80, i2: i80) returns (i1) { (if $ugt.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i88(i1: i88, i2: i88) returns (i1) { (if $ugt.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i96(i1: i96, i2: i96) returns (i1) { (if $ugt.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i128(i1: i128, i2: i128) returns (i1) { (if $ugt.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i160(i1: i160, i2: i160) returns (i1) { (if $ugt.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i256(i1: i256, i2: i256) returns (i1) { (if $ugt.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i1(i1: i1, i2: i1) returns (i1) { (if $sle.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i5(i1: i5, i2: i5) returns (i1) { (if $sle.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i6(i1: i6, i2: i6) returns (i1) { (if $sle.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i8(i1: i8, i2: i8) returns (i1) { (if $sle.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i16(i1: i16, i2: i16) returns (i1) { (if $sle.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i24(i1: i24, i2: i24) returns (i1) { (if $sle.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i32(i1: i32, i2: i32) returns (i1) { (if $sle.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i40(i1: i40, i2: i40) returns (i1) { (if $sle.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i48(i1: i48, i2: i48) returns (i1) { (if $sle.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i56(i1: i56, i2: i56) returns (i1) { (if $sle.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i64(i1: i64, i2: i64) returns (i1) { (if $sle.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i80(i1: i80, i2: i80) returns (i1) { (if $sle.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i88(i1: i88, i2: i88) returns (i1) { (if $sle.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i96(i1: i96, i2: i96) returns (i1) { (if $sle.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i128(i1: i128, i2: i128) returns (i1) { (if $sle.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i160(i1: i160, i2: i160) returns (i1) { (if $sle.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i256(i1: i256, i2: i256) returns (i1) { (if $sle.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 < i2) }
function {:inline} $slt.i1(i1: i1, i2: i1) returns (i1) { (if $slt.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 < i2) }
function {:inline} $slt.i5(i1: i5, i2: i5) returns (i1) { (if $slt.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 < i2) }
function {:inline} $slt.i6(i1: i6, i2: i6) returns (i1) { (if $slt.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 < i2) }
function {:inline} $slt.i8(i1: i8, i2: i8) returns (i1) { (if $slt.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 < i2) }
function {:inline} $slt.i16(i1: i16, i2: i16) returns (i1) { (if $slt.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 < i2) }
function {:inline} $slt.i24(i1: i24, i2: i24) returns (i1) { (if $slt.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 < i2) }
function {:inline} $slt.i32(i1: i32, i2: i32) returns (i1) { (if $slt.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 < i2) }
function {:inline} $slt.i40(i1: i40, i2: i40) returns (i1) { (if $slt.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 < i2) }
function {:inline} $slt.i48(i1: i48, i2: i48) returns (i1) { (if $slt.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 < i2) }
function {:inline} $slt.i56(i1: i56, i2: i56) returns (i1) { (if $slt.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 < i2) }
function {:inline} $slt.i64(i1: i64, i2: i64) returns (i1) { (if $slt.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 < i2) }
function {:inline} $slt.i80(i1: i80, i2: i80) returns (i1) { (if $slt.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 < i2) }
function {:inline} $slt.i88(i1: i88, i2: i88) returns (i1) { (if $slt.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 < i2) }
function {:inline} $slt.i96(i1: i96, i2: i96) returns (i1) { (if $slt.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 < i2) }
function {:inline} $slt.i128(i1: i128, i2: i128) returns (i1) { (if $slt.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 < i2) }
function {:inline} $slt.i160(i1: i160, i2: i160) returns (i1) { (if $slt.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 < i2) }
function {:inline} $slt.i256(i1: i256, i2: i256) returns (i1) { (if $slt.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i1(i1: i1, i2: i1) returns (i1) { (if $sge.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i5(i1: i5, i2: i5) returns (i1) { (if $sge.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i6(i1: i6, i2: i6) returns (i1) { (if $sge.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i8(i1: i8, i2: i8) returns (i1) { (if $sge.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i16(i1: i16, i2: i16) returns (i1) { (if $sge.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i24(i1: i24, i2: i24) returns (i1) { (if $sge.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i32(i1: i32, i2: i32) returns (i1) { (if $sge.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i40(i1: i40, i2: i40) returns (i1) { (if $sge.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i48(i1: i48, i2: i48) returns (i1) { (if $sge.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i56(i1: i56, i2: i56) returns (i1) { (if $sge.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i64(i1: i64, i2: i64) returns (i1) { (if $sge.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i80(i1: i80, i2: i80) returns (i1) { (if $sge.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i88(i1: i88, i2: i88) returns (i1) { (if $sge.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i96(i1: i96, i2: i96) returns (i1) { (if $sge.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i128(i1: i128, i2: i128) returns (i1) { (if $sge.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i160(i1: i160, i2: i160) returns (i1) { (if $sge.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i256(i1: i256, i2: i256) returns (i1) { (if $sge.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i1(i1: i1, i2: i1) returns (i1) { (if $sgt.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i5(i1: i5, i2: i5) returns (i1) { (if $sgt.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i6(i1: i6, i2: i6) returns (i1) { (if $sgt.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i8(i1: i8, i2: i8) returns (i1) { (if $sgt.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i16(i1: i16, i2: i16) returns (i1) { (if $sgt.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i24(i1: i24, i2: i24) returns (i1) { (if $sgt.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i32(i1: i32, i2: i32) returns (i1) { (if $sgt.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i40(i1: i40, i2: i40) returns (i1) { (if $sgt.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i48(i1: i48, i2: i48) returns (i1) { (if $sgt.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i56(i1: i56, i2: i56) returns (i1) { (if $sgt.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i64(i1: i64, i2: i64) returns (i1) { (if $sgt.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i80(i1: i80, i2: i80) returns (i1) { (if $sgt.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i88(i1: i88, i2: i88) returns (i1) { (if $sgt.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i96(i1: i96, i2: i96) returns (i1) { (if $sgt.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i128(i1: i128, i2: i128) returns (i1) { (if $sgt.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i160(i1: i160, i2: i160) returns (i1) { (if $sgt.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i256(i1: i256, i2: i256) returns (i1) { (if $sgt.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 == i2) }
function {:inline} $eq.i1(i1: i1, i2: i1) returns (i1) { (if $eq.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 == i2) }
function {:inline} $eq.i5(i1: i5, i2: i5) returns (i1) { (if $eq.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 == i2) }
function {:inline} $eq.i6(i1: i6, i2: i6) returns (i1) { (if $eq.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 == i2) }
function {:inline} $eq.i8(i1: i8, i2: i8) returns (i1) { (if $eq.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 == i2) }
function {:inline} $eq.i16(i1: i16, i2: i16) returns (i1) { (if $eq.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 == i2) }
function {:inline} $eq.i24(i1: i24, i2: i24) returns (i1) { (if $eq.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 == i2) }
function {:inline} $eq.i32(i1: i32, i2: i32) returns (i1) { (if $eq.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 == i2) }
function {:inline} $eq.i40(i1: i40, i2: i40) returns (i1) { (if $eq.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 == i2) }
function {:inline} $eq.i48(i1: i48, i2: i48) returns (i1) { (if $eq.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 == i2) }
function {:inline} $eq.i56(i1: i56, i2: i56) returns (i1) { (if $eq.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 == i2) }
function {:inline} $eq.i64(i1: i64, i2: i64) returns (i1) { (if $eq.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 == i2) }
function {:inline} $eq.i80(i1: i80, i2: i80) returns (i1) { (if $eq.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 == i2) }
function {:inline} $eq.i88(i1: i88, i2: i88) returns (i1) { (if $eq.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 == i2) }
function {:inline} $eq.i96(i1: i96, i2: i96) returns (i1) { (if $eq.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 == i2) }
function {:inline} $eq.i128(i1: i128, i2: i128) returns (i1) { (if $eq.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 == i2) }
function {:inline} $eq.i160(i1: i160, i2: i160) returns (i1) { (if $eq.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 == i2) }
function {:inline} $eq.i256(i1: i256, i2: i256) returns (i1) { (if $eq.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 != i2) }
function {:inline} $ne.i1(i1: i1, i2: i1) returns (i1) { (if $ne.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 != i2) }
function {:inline} $ne.i5(i1: i5, i2: i5) returns (i1) { (if $ne.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 != i2) }
function {:inline} $ne.i6(i1: i6, i2: i6) returns (i1) { (if $ne.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 != i2) }
function {:inline} $ne.i8(i1: i8, i2: i8) returns (i1) { (if $ne.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 != i2) }
function {:inline} $ne.i16(i1: i16, i2: i16) returns (i1) { (if $ne.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 != i2) }
function {:inline} $ne.i24(i1: i24, i2: i24) returns (i1) { (if $ne.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 != i2) }
function {:inline} $ne.i32(i1: i32, i2: i32) returns (i1) { (if $ne.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 != i2) }
function {:inline} $ne.i40(i1: i40, i2: i40) returns (i1) { (if $ne.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 != i2) }
function {:inline} $ne.i48(i1: i48, i2: i48) returns (i1) { (if $ne.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 != i2) }
function {:inline} $ne.i56(i1: i56, i2: i56) returns (i1) { (if $ne.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 != i2) }
function {:inline} $ne.i64(i1: i64, i2: i64) returns (i1) { (if $ne.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 != i2) }
function {:inline} $ne.i80(i1: i80, i2: i80) returns (i1) { (if $ne.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 != i2) }
function {:inline} $ne.i88(i1: i88, i2: i88) returns (i1) { (if $ne.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 != i2) }
function {:inline} $ne.i96(i1: i96, i2: i96) returns (i1) { (if $ne.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 != i2) }
function {:inline} $ne.i128(i1: i128, i2: i128) returns (i1) { (if $ne.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 != i2) }
function {:inline} $ne.i160(i1: i160, i2: i160) returns (i1) { (if $ne.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 != i2) }
function {:inline} $ne.i256(i1: i256, i2: i256) returns (i1) { (if $ne.i256.bool(i1, i2) then 1 else 0) }
// Integer load/store operations
function {:inline} $load.i1(M: [ref] i1, p: ref) returns (i1) { M[p] }
function {:inline} $store.i1(M: [ref] i1, p: ref, i: i1) returns ([ref] i1) { M[p := i] }
function {:inline} $load.i5(M: [ref] i5, p: ref) returns (i5) { M[p] }
function {:inline} $store.i5(M: [ref] i5, p: ref, i: i5) returns ([ref] i5) { M[p := i] }
function {:inline} $load.i6(M: [ref] i6, p: ref) returns (i6) { M[p] }
function {:inline} $store.i6(M: [ref] i6, p: ref, i: i6) returns ([ref] i6) { M[p := i] }
function {:inline} $load.i8(M: [ref] i8, p: ref) returns (i8) { M[p] }
function {:inline} $store.i8(M: [ref] i8, p: ref, i: i8) returns ([ref] i8) { M[p := i] }
function {:inline} $load.i16(M: [ref] i16, p: ref) returns (i16) { M[p] }
function {:inline} $store.i16(M: [ref] i16, p: ref, i: i16) returns ([ref] i16) { M[p := i] }
function {:inline} $load.i24(M: [ref] i24, p: ref) returns (i24) { M[p] }
function {:inline} $store.i24(M: [ref] i24, p: ref, i: i24) returns ([ref] i24) { M[p := i] }
function {:inline} $load.i32(M: [ref] i32, p: ref) returns (i32) { M[p] }
function {:inline} $store.i32(M: [ref] i32, p: ref, i: i32) returns ([ref] i32) { M[p := i] }
function {:inline} $load.i40(M: [ref] i40, p: ref) returns (i40) { M[p] }
function {:inline} $store.i40(M: [ref] i40, p: ref, i: i40) returns ([ref] i40) { M[p := i] }
function {:inline} $load.i48(M: [ref] i48, p: ref) returns (i48) { M[p] }
function {:inline} $store.i48(M: [ref] i48, p: ref, i: i48) returns ([ref] i48) { M[p := i] }
function {:inline} $load.i56(M: [ref] i56, p: ref) returns (i56) { M[p] }
function {:inline} $store.i56(M: [ref] i56, p: ref, i: i56) returns ([ref] i56) { M[p := i] }
function {:inline} $load.i64(M: [ref] i64, p: ref) returns (i64) { M[p] }
function {:inline} $store.i64(M: [ref] i64, p: ref, i: i64) returns ([ref] i64) { M[p := i] }
function {:inline} $load.i80(M: [ref] i80, p: ref) returns (i80) { M[p] }
function {:inline} $store.i80(M: [ref] i80, p: ref, i: i80) returns ([ref] i80) { M[p := i] }
function {:inline} $load.i88(M: [ref] i88, p: ref) returns (i88) { M[p] }
function {:inline} $store.i88(M: [ref] i88, p: ref, i: i88) returns ([ref] i88) { M[p := i] }
function {:inline} $load.i96(M: [ref] i96, p: ref) returns (i96) { M[p] }
function {:inline} $store.i96(M: [ref] i96, p: ref, i: i96) returns ([ref] i96) { M[p := i] }
function {:inline} $load.i128(M: [ref] i128, p: ref) returns (i128) { M[p] }
function {:inline} $store.i128(M: [ref] i128, p: ref, i: i128) returns ([ref] i128) { M[p := i] }
function {:inline} $load.i160(M: [ref] i160, p: ref) returns (i160) { M[p] }
function {:inline} $store.i160(M: [ref] i160, p: ref, i: i160) returns ([ref] i160) { M[p := i] }
function {:inline} $load.i256(M: [ref] i256, p: ref) returns (i256) { M[p] }
function {:inline} $store.i256(M: [ref] i256, p: ref, i: i256) returns ([ref] i256) { M[p := i] }
// Conversion between integer types
function {:inline} $trunc.i5.i1(i: i5) returns (i1) { i }
function {:inline} $trunc.i6.i1(i: i6) returns (i1) { i }
function {:inline} $trunc.i8.i1(i: i8) returns (i1) { i }
function {:inline} $trunc.i16.i1(i: i16) returns (i1) { i }
function {:inline} $trunc.i24.i1(i: i24) returns (i1) { i }
function {:inline} $trunc.i32.i1(i: i32) returns (i1) { i }
function {:inline} $trunc.i40.i1(i: i40) returns (i1) { i }
function {:inline} $trunc.i48.i1(i: i48) returns (i1) { i }
function {:inline} $trunc.i56.i1(i: i56) returns (i1) { i }
function {:inline} $trunc.i64.i1(i: i64) returns (i1) { i }
function {:inline} $trunc.i80.i1(i: i80) returns (i1) { i }
function {:inline} $trunc.i88.i1(i: i88) returns (i1) { i }
function {:inline} $trunc.i96.i1(i: i96) returns (i1) { i }
function {:inline} $trunc.i128.i1(i: i128) returns (i1) { i }
function {:inline} $trunc.i160.i1(i: i160) returns (i1) { i }
function {:inline} $trunc.i256.i1(i: i256) returns (i1) { i }
function {:inline} $trunc.i6.i5(i: i6) returns (i5) { i }
function {:inline} $trunc.i8.i5(i: i8) returns (i5) { i }
function {:inline} $trunc.i16.i5(i: i16) returns (i5) { i }
function {:inline} $trunc.i24.i5(i: i24) returns (i5) { i }
function {:inline} $trunc.i32.i5(i: i32) returns (i5) { i }
function {:inline} $trunc.i40.i5(i: i40) returns (i5) { i }
function {:inline} $trunc.i48.i5(i: i48) returns (i5) { i }
function {:inline} $trunc.i56.i5(i: i56) returns (i5) { i }
function {:inline} $trunc.i64.i5(i: i64) returns (i5) { i }
function {:inline} $trunc.i80.i5(i: i80) returns (i5) { i }
function {:inline} $trunc.i88.i5(i: i88) returns (i5) { i }
function {:inline} $trunc.i96.i5(i: i96) returns (i5) { i }
function {:inline} $trunc.i128.i5(i: i128) returns (i5) { i }
function {:inline} $trunc.i160.i5(i: i160) returns (i5) { i }
function {:inline} $trunc.i256.i5(i: i256) returns (i5) { i }
function {:inline} $trunc.i8.i6(i: i8) returns (i6) { i }
function {:inline} $trunc.i16.i6(i: i16) returns (i6) { i }
function {:inline} $trunc.i24.i6(i: i24) returns (i6) { i }
function {:inline} $trunc.i32.i6(i: i32) returns (i6) { i }
function {:inline} $trunc.i40.i6(i: i40) returns (i6) { i }
function {:inline} $trunc.i48.i6(i: i48) returns (i6) { i }
function {:inline} $trunc.i56.i6(i: i56) returns (i6) { i }
function {:inline} $trunc.i64.i6(i: i64) returns (i6) { i }
function {:inline} $trunc.i80.i6(i: i80) returns (i6) { i }
function {:inline} $trunc.i88.i6(i: i88) returns (i6) { i }
function {:inline} $trunc.i96.i6(i: i96) returns (i6) { i }
function {:inline} $trunc.i128.i6(i: i128) returns (i6) { i }
function {:inline} $trunc.i160.i6(i: i160) returns (i6) { i }
function {:inline} $trunc.i256.i6(i: i256) returns (i6) { i }
function {:inline} $trunc.i16.i8(i: i16) returns (i8) { i }
function {:inline} $trunc.i24.i8(i: i24) returns (i8) { i }
function {:inline} $trunc.i32.i8(i: i32) returns (i8) { i }
function {:inline} $trunc.i40.i8(i: i40) returns (i8) { i }
function {:inline} $trunc.i48.i8(i: i48) returns (i8) { i }
function {:inline} $trunc.i56.i8(i: i56) returns (i8) { i }
function {:inline} $trunc.i64.i8(i: i64) returns (i8) { i }
function {:inline} $trunc.i80.i8(i: i80) returns (i8) { i }
function {:inline} $trunc.i88.i8(i: i88) returns (i8) { i }
function {:inline} $trunc.i96.i8(i: i96) returns (i8) { i }
function {:inline} $trunc.i128.i8(i: i128) returns (i8) { i }
function {:inline} $trunc.i160.i8(i: i160) returns (i8) { i }
function {:inline} $trunc.i256.i8(i: i256) returns (i8) { i }
function {:inline} $trunc.i24.i16(i: i24) returns (i16) { i }
function {:inline} $trunc.i32.i16(i: i32) returns (i16) { i }
function {:inline} $trunc.i40.i16(i: i40) returns (i16) { i }
function {:inline} $trunc.i48.i16(i: i48) returns (i16) { i }
function {:inline} $trunc.i56.i16(i: i56) returns (i16) { i }
function {:inline} $trunc.i64.i16(i: i64) returns (i16) { i }
function {:inline} $trunc.i80.i16(i: i80) returns (i16) { i }
function {:inline} $trunc.i88.i16(i: i88) returns (i16) { i }
function {:inline} $trunc.i96.i16(i: i96) returns (i16) { i }
function {:inline} $trunc.i128.i16(i: i128) returns (i16) { i }
function {:inline} $trunc.i160.i16(i: i160) returns (i16) { i }
function {:inline} $trunc.i256.i16(i: i256) returns (i16) { i }
function {:inline} $trunc.i32.i24(i: i32) returns (i24) { i }
function {:inline} $trunc.i40.i24(i: i40) returns (i24) { i }
function {:inline} $trunc.i48.i24(i: i48) returns (i24) { i }
function {:inline} $trunc.i56.i24(i: i56) returns (i24) { i }
function {:inline} $trunc.i64.i24(i: i64) returns (i24) { i }
function {:inline} $trunc.i80.i24(i: i80) returns (i24) { i }
function {:inline} $trunc.i88.i24(i: i88) returns (i24) { i }
function {:inline} $trunc.i96.i24(i: i96) returns (i24) { i }
function {:inline} $trunc.i128.i24(i: i128) returns (i24) { i }
function {:inline} $trunc.i160.i24(i: i160) returns (i24) { i }
function {:inline} $trunc.i256.i24(i: i256) returns (i24) { i }
function {:inline} $trunc.i40.i32(i: i40) returns (i32) { i }
function {:inline} $trunc.i48.i32(i: i48) returns (i32) { i }
function {:inline} $trunc.i56.i32(i: i56) returns (i32) { i }
function {:inline} $trunc.i64.i32(i: i64) returns (i32) { i }
function {:inline} $trunc.i80.i32(i: i80) returns (i32) { i }
function {:inline} $trunc.i88.i32(i: i88) returns (i32) { i }
function {:inline} $trunc.i96.i32(i: i96) returns (i32) { i }
function {:inline} $trunc.i128.i32(i: i128) returns (i32) { i }
function {:inline} $trunc.i160.i32(i: i160) returns (i32) { i }
function {:inline} $trunc.i256.i32(i: i256) returns (i32) { i }
function {:inline} $trunc.i48.i40(i: i48) returns (i40) { i }
function {:inline} $trunc.i56.i40(i: i56) returns (i40) { i }
function {:inline} $trunc.i64.i40(i: i64) returns (i40) { i }
function {:inline} $trunc.i80.i40(i: i80) returns (i40) { i }
function {:inline} $trunc.i88.i40(i: i88) returns (i40) { i }
function {:inline} $trunc.i96.i40(i: i96) returns (i40) { i }
function {:inline} $trunc.i128.i40(i: i128) returns (i40) { i }
function {:inline} $trunc.i160.i40(i: i160) returns (i40) { i }
function {:inline} $trunc.i256.i40(i: i256) returns (i40) { i }
function {:inline} $trunc.i56.i48(i: i56) returns (i48) { i }
function {:inline} $trunc.i64.i48(i: i64) returns (i48) { i }
function {:inline} $trunc.i80.i48(i: i80) returns (i48) { i }
function {:inline} $trunc.i88.i48(i: i88) returns (i48) { i }
function {:inline} $trunc.i96.i48(i: i96) returns (i48) { i }
function {:inline} $trunc.i128.i48(i: i128) returns (i48) { i }
function {:inline} $trunc.i160.i48(i: i160) returns (i48) { i }
function {:inline} $trunc.i256.i48(i: i256) returns (i48) { i }
function {:inline} $trunc.i64.i56(i: i64) returns (i56) { i }
function {:inline} $trunc.i80.i56(i: i80) returns (i56) { i }
function {:inline} $trunc.i88.i56(i: i88) returns (i56) { i }
function {:inline} $trunc.i96.i56(i: i96) returns (i56) { i }
function {:inline} $trunc.i128.i56(i: i128) returns (i56) { i }
function {:inline} $trunc.i160.i56(i: i160) returns (i56) { i }
function {:inline} $trunc.i256.i56(i: i256) returns (i56) { i }
function {:inline} $trunc.i80.i64(i: i80) returns (i64) { i }
function {:inline} $trunc.i88.i64(i: i88) returns (i64) { i }
function {:inline} $trunc.i96.i64(i: i96) returns (i64) { i }
function {:inline} $trunc.i128.i64(i: i128) returns (i64) { i }
function {:inline} $trunc.i160.i64(i: i160) returns (i64) { i }
function {:inline} $trunc.i256.i64(i: i256) returns (i64) { i }
function {:inline} $trunc.i88.i80(i: i88) returns (i80) { i }
function {:inline} $trunc.i96.i80(i: i96) returns (i80) { i }
function {:inline} $trunc.i128.i80(i: i128) returns (i80) { i }
function {:inline} $trunc.i160.i80(i: i160) returns (i80) { i }
function {:inline} $trunc.i256.i80(i: i256) returns (i80) { i }
function {:inline} $trunc.i96.i88(i: i96) returns (i88) { i }
function {:inline} $trunc.i128.i88(i: i128) returns (i88) { i }
function {:inline} $trunc.i160.i88(i: i160) returns (i88) { i }
function {:inline} $trunc.i256.i88(i: i256) returns (i88) { i }
function {:inline} $trunc.i128.i96(i: i128) returns (i96) { i }
function {:inline} $trunc.i160.i96(i: i160) returns (i96) { i }
function {:inline} $trunc.i256.i96(i: i256) returns (i96) { i }
function {:inline} $trunc.i160.i128(i: i160) returns (i128) { i }
function {:inline} $trunc.i256.i128(i: i256) returns (i128) { i }
function {:inline} $trunc.i256.i160(i: i256) returns (i160) { i }
function {:inline} $sext.i1.i5(i: i1) returns (i5) { i }
function {:inline} $sext.i1.i6(i: i1) returns (i6) { i }
function {:inline} $sext.i1.i8(i: i1) returns (i8) { i }
function {:inline} $sext.i1.i16(i: i1) returns (i16) { i }
function {:inline} $sext.i1.i24(i: i1) returns (i24) { i }
function {:inline} $sext.i1.i32(i: i1) returns (i32) { i }
function {:inline} $sext.i1.i40(i: i1) returns (i40) { i }
function {:inline} $sext.i1.i48(i: i1) returns (i48) { i }
function {:inline} $sext.i1.i56(i: i1) returns (i56) { i }
function {:inline} $sext.i1.i64(i: i1) returns (i64) { i }
function {:inline} $sext.i1.i80(i: i1) returns (i80) { i }
function {:inline} $sext.i1.i88(i: i1) returns (i88) { i }
function {:inline} $sext.i1.i96(i: i1) returns (i96) { i }
function {:inline} $sext.i1.i128(i: i1) returns (i128) { i }
function {:inline} $sext.i1.i160(i: i1) returns (i160) { i }
function {:inline} $sext.i1.i256(i: i1) returns (i256) { i }
function {:inline} $sext.i5.i6(i: i5) returns (i6) { i }
function {:inline} $sext.i5.i8(i: i5) returns (i8) { i }
function {:inline} $sext.i5.i16(i: i5) returns (i16) { i }
function {:inline} $sext.i5.i24(i: i5) returns (i24) { i }
function {:inline} $sext.i5.i32(i: i5) returns (i32) { i }
function {:inline} $sext.i5.i40(i: i5) returns (i40) { i }
function {:inline} $sext.i5.i48(i: i5) returns (i48) { i }
function {:inline} $sext.i5.i56(i: i5) returns (i56) { i }
function {:inline} $sext.i5.i64(i: i5) returns (i64) { i }
function {:inline} $sext.i5.i80(i: i5) returns (i80) { i }
function {:inline} $sext.i5.i88(i: i5) returns (i88) { i }
function {:inline} $sext.i5.i96(i: i5) returns (i96) { i }
function {:inline} $sext.i5.i128(i: i5) returns (i128) { i }
function {:inline} $sext.i5.i160(i: i5) returns (i160) { i }
function {:inline} $sext.i5.i256(i: i5) returns (i256) { i }
function {:inline} $sext.i6.i8(i: i6) returns (i8) { i }
function {:inline} $sext.i6.i16(i: i6) returns (i16) { i }
function {:inline} $sext.i6.i24(i: i6) returns (i24) { i }
function {:inline} $sext.i6.i32(i: i6) returns (i32) { i }
function {:inline} $sext.i6.i40(i: i6) returns (i40) { i }
function {:inline} $sext.i6.i48(i: i6) returns (i48) { i }
function {:inline} $sext.i6.i56(i: i6) returns (i56) { i }
function {:inline} $sext.i6.i64(i: i6) returns (i64) { i }
function {:inline} $sext.i6.i80(i: i6) returns (i80) { i }
function {:inline} $sext.i6.i88(i: i6) returns (i88) { i }
function {:inline} $sext.i6.i96(i: i6) returns (i96) { i }
function {:inline} $sext.i6.i128(i: i6) returns (i128) { i }
function {:inline} $sext.i6.i160(i: i6) returns (i160) { i }
function {:inline} $sext.i6.i256(i: i6) returns (i256) { i }
function {:inline} $sext.i8.i16(i: i8) returns (i16) { i }
function {:inline} $sext.i8.i24(i: i8) returns (i24) { i }
function {:inline} $sext.i8.i32(i: i8) returns (i32) { i }
function {:inline} $sext.i8.i40(i: i8) returns (i40) { i }
function {:inline} $sext.i8.i48(i: i8) returns (i48) { i }
function {:inline} $sext.i8.i56(i: i8) returns (i56) { i }
function {:inline} $sext.i8.i64(i: i8) returns (i64) { i }
function {:inline} $sext.i8.i80(i: i8) returns (i80) { i }
function {:inline} $sext.i8.i88(i: i8) returns (i88) { i }
function {:inline} $sext.i8.i96(i: i8) returns (i96) { i }
function {:inline} $sext.i8.i128(i: i8) returns (i128) { i }
function {:inline} $sext.i8.i160(i: i8) returns (i160) { i }
function {:inline} $sext.i8.i256(i: i8) returns (i256) { i }
function {:inline} $sext.i16.i24(i: i16) returns (i24) { i }
function {:inline} $sext.i16.i32(i: i16) returns (i32) { i }
function {:inline} $sext.i16.i40(i: i16) returns (i40) { i }
function {:inline} $sext.i16.i48(i: i16) returns (i48) { i }
function {:inline} $sext.i16.i56(i: i16) returns (i56) { i }
function {:inline} $sext.i16.i64(i: i16) returns (i64) { i }
function {:inline} $sext.i16.i80(i: i16) returns (i80) { i }
function {:inline} $sext.i16.i88(i: i16) returns (i88) { i }
function {:inline} $sext.i16.i96(i: i16) returns (i96) { i }
function {:inline} $sext.i16.i128(i: i16) returns (i128) { i }
function {:inline} $sext.i16.i160(i: i16) returns (i160) { i }
function {:inline} $sext.i16.i256(i: i16) returns (i256) { i }
function {:inline} $sext.i24.i32(i: i24) returns (i32) { i }
function {:inline} $sext.i24.i40(i: i24) returns (i40) { i }
function {:inline} $sext.i24.i48(i: i24) returns (i48) { i }
function {:inline} $sext.i24.i56(i: i24) returns (i56) { i }
function {:inline} $sext.i24.i64(i: i24) returns (i64) { i }
function {:inline} $sext.i24.i80(i: i24) returns (i80) { i }
function {:inline} $sext.i24.i88(i: i24) returns (i88) { i }
function {:inline} $sext.i24.i96(i: i24) returns (i96) { i }
function {:inline} $sext.i24.i128(i: i24) returns (i128) { i }
function {:inline} $sext.i24.i160(i: i24) returns (i160) { i }
function {:inline} $sext.i24.i256(i: i24) returns (i256) { i }
function {:inline} $sext.i32.i40(i: i32) returns (i40) { i }
function {:inline} $sext.i32.i48(i: i32) returns (i48) { i }
function {:inline} $sext.i32.i56(i: i32) returns (i56) { i }
function {:inline} $sext.i32.i64(i: i32) returns (i64) { i }
function {:inline} $sext.i32.i80(i: i32) returns (i80) { i }
function {:inline} $sext.i32.i88(i: i32) returns (i88) { i }
function {:inline} $sext.i32.i96(i: i32) returns (i96) { i }
function {:inline} $sext.i32.i128(i: i32) returns (i128) { i }
function {:inline} $sext.i32.i160(i: i32) returns (i160) { i }
function {:inline} $sext.i32.i256(i: i32) returns (i256) { i }
function {:inline} $sext.i40.i48(i: i40) returns (i48) { i }
function {:inline} $sext.i40.i56(i: i40) returns (i56) { i }
function {:inline} $sext.i40.i64(i: i40) returns (i64) { i }
function {:inline} $sext.i40.i80(i: i40) returns (i80) { i }
function {:inline} $sext.i40.i88(i: i40) returns (i88) { i }
function {:inline} $sext.i40.i96(i: i40) returns (i96) { i }
function {:inline} $sext.i40.i128(i: i40) returns (i128) { i }
function {:inline} $sext.i40.i160(i: i40) returns (i160) { i }
function {:inline} $sext.i40.i256(i: i40) returns (i256) { i }
function {:inline} $sext.i48.i56(i: i48) returns (i56) { i }
function {:inline} $sext.i48.i64(i: i48) returns (i64) { i }
function {:inline} $sext.i48.i80(i: i48) returns (i80) { i }
function {:inline} $sext.i48.i88(i: i48) returns (i88) { i }
function {:inline} $sext.i48.i96(i: i48) returns (i96) { i }
function {:inline} $sext.i48.i128(i: i48) returns (i128) { i }
function {:inline} $sext.i48.i160(i: i48) returns (i160) { i }
function {:inline} $sext.i48.i256(i: i48) returns (i256) { i }
function {:inline} $sext.i56.i64(i: i56) returns (i64) { i }
function {:inline} $sext.i56.i80(i: i56) returns (i80) { i }
function {:inline} $sext.i56.i88(i: i56) returns (i88) { i }
function {:inline} $sext.i56.i96(i: i56) returns (i96) { i }
function {:inline} $sext.i56.i128(i: i56) returns (i128) { i }
function {:inline} $sext.i56.i160(i: i56) returns (i160) { i }
function {:inline} $sext.i56.i256(i: i56) returns (i256) { i }
function {:inline} $sext.i64.i80(i: i64) returns (i80) { i }
function {:inline} $sext.i64.i88(i: i64) returns (i88) { i }
function {:inline} $sext.i64.i96(i: i64) returns (i96) { i }
function {:inline} $sext.i64.i128(i: i64) returns (i128) { i }
function {:inline} $sext.i64.i160(i: i64) returns (i160) { i }
function {:inline} $sext.i64.i256(i: i64) returns (i256) { i }
function {:inline} $sext.i80.i88(i: i80) returns (i88) { i }
function {:inline} $sext.i80.i96(i: i80) returns (i96) { i }
function {:inline} $sext.i80.i128(i: i80) returns (i128) { i }
function {:inline} $sext.i80.i160(i: i80) returns (i160) { i }
function {:inline} $sext.i80.i256(i: i80) returns (i256) { i }
function {:inline} $sext.i88.i96(i: i88) returns (i96) { i }
function {:inline} $sext.i88.i128(i: i88) returns (i128) { i }
function {:inline} $sext.i88.i160(i: i88) returns (i160) { i }
function {:inline} $sext.i88.i256(i: i88) returns (i256) { i }
function {:inline} $sext.i96.i128(i: i96) returns (i128) { i }
function {:inline} $sext.i96.i160(i: i96) returns (i160) { i }
function {:inline} $sext.i96.i256(i: i96) returns (i256) { i }
function {:inline} $sext.i128.i160(i: i128) returns (i160) { i }
function {:inline} $sext.i128.i256(i: i128) returns (i256) { i }
function {:inline} $sext.i160.i256(i: i160) returns (i256) { i }
function {:inline} $zext.i1.i5(i: i1) returns (i5) { i }
function {:inline} $zext.i1.i6(i: i1) returns (i6) { i }
function {:inline} $zext.i1.i8(i: i1) returns (i8) { i }
function {:inline} $zext.i1.i16(i: i1) returns (i16) { i }
function {:inline} $zext.i1.i24(i: i1) returns (i24) { i }
function {:inline} $zext.i1.i32(i: i1) returns (i32) { i }
function {:inline} $zext.i1.i40(i: i1) returns (i40) { i }
function {:inline} $zext.i1.i48(i: i1) returns (i48) { i }
function {:inline} $zext.i1.i56(i: i1) returns (i56) { i }
function {:inline} $zext.i1.i64(i: i1) returns (i64) { i }
function {:inline} $zext.i1.i80(i: i1) returns (i80) { i }
function {:inline} $zext.i1.i88(i: i1) returns (i88) { i }
function {:inline} $zext.i1.i96(i: i1) returns (i96) { i }
function {:inline} $zext.i1.i128(i: i1) returns (i128) { i }
function {:inline} $zext.i1.i160(i: i1) returns (i160) { i }
function {:inline} $zext.i1.i256(i: i1) returns (i256) { i }
function {:inline} $zext.i5.i6(i: i5) returns (i6) { i }
function {:inline} $zext.i5.i8(i: i5) returns (i8) { i }
function {:inline} $zext.i5.i16(i: i5) returns (i16) { i }
function {:inline} $zext.i5.i24(i: i5) returns (i24) { i }
function {:inline} $zext.i5.i32(i: i5) returns (i32) { i }
function {:inline} $zext.i5.i40(i: i5) returns (i40) { i }
function {:inline} $zext.i5.i48(i: i5) returns (i48) { i }
function {:inline} $zext.i5.i56(i: i5) returns (i56) { i }
function {:inline} $zext.i5.i64(i: i5) returns (i64) { i }
function {:inline} $zext.i5.i80(i: i5) returns (i80) { i }
function {:inline} $zext.i5.i88(i: i5) returns (i88) { i }
function {:inline} $zext.i5.i96(i: i5) returns (i96) { i }
function {:inline} $zext.i5.i128(i: i5) returns (i128) { i }
function {:inline} $zext.i5.i160(i: i5) returns (i160) { i }
function {:inline} $zext.i5.i256(i: i5) returns (i256) { i }
function {:inline} $zext.i6.i8(i: i6) returns (i8) { i }
function {:inline} $zext.i6.i16(i: i6) returns (i16) { i }
function {:inline} $zext.i6.i24(i: i6) returns (i24) { i }
function {:inline} $zext.i6.i32(i: i6) returns (i32) { i }
function {:inline} $zext.i6.i40(i: i6) returns (i40) { i }
function {:inline} $zext.i6.i48(i: i6) returns (i48) { i }
function {:inline} $zext.i6.i56(i: i6) returns (i56) { i }
function {:inline} $zext.i6.i64(i: i6) returns (i64) { i }
function {:inline} $zext.i6.i80(i: i6) returns (i80) { i }
function {:inline} $zext.i6.i88(i: i6) returns (i88) { i }
function {:inline} $zext.i6.i96(i: i6) returns (i96) { i }
function {:inline} $zext.i6.i128(i: i6) returns (i128) { i }
function {:inline} $zext.i6.i160(i: i6) returns (i160) { i }
function {:inline} $zext.i6.i256(i: i6) returns (i256) { i }
function {:inline} $zext.i8.i16(i: i8) returns (i16) { i }
function {:inline} $zext.i8.i24(i: i8) returns (i24) { i }
function {:inline} $zext.i8.i32(i: i8) returns (i32) { i }
function {:inline} $zext.i8.i40(i: i8) returns (i40) { i }
function {:inline} $zext.i8.i48(i: i8) returns (i48) { i }
function {:inline} $zext.i8.i56(i: i8) returns (i56) { i }
function {:inline} $zext.i8.i64(i: i8) returns (i64) { i }
function {:inline} $zext.i8.i80(i: i8) returns (i80) { i }
function {:inline} $zext.i8.i88(i: i8) returns (i88) { i }
function {:inline} $zext.i8.i96(i: i8) returns (i96) { i }
function {:inline} $zext.i8.i128(i: i8) returns (i128) { i }
function {:inline} $zext.i8.i160(i: i8) returns (i160) { i }
function {:inline} $zext.i8.i256(i: i8) returns (i256) { i }
function {:inline} $zext.i16.i24(i: i16) returns (i24) { i }
function {:inline} $zext.i16.i32(i: i16) returns (i32) { i }
function {:inline} $zext.i16.i40(i: i16) returns (i40) { i }
function {:inline} $zext.i16.i48(i: i16) returns (i48) { i }
function {:inline} $zext.i16.i56(i: i16) returns (i56) { i }
function {:inline} $zext.i16.i64(i: i16) returns (i64) { i }
function {:inline} $zext.i16.i80(i: i16) returns (i80) { i }
function {:inline} $zext.i16.i88(i: i16) returns (i88) { i }
function {:inline} $zext.i16.i96(i: i16) returns (i96) { i }
function {:inline} $zext.i16.i128(i: i16) returns (i128) { i }
function {:inline} $zext.i16.i160(i: i16) returns (i160) { i }
function {:inline} $zext.i16.i256(i: i16) returns (i256) { i }
function {:inline} $zext.i24.i32(i: i24) returns (i32) { i }
function {:inline} $zext.i24.i40(i: i24) returns (i40) { i }
function {:inline} $zext.i24.i48(i: i24) returns (i48) { i }
function {:inline} $zext.i24.i56(i: i24) returns (i56) { i }
function {:inline} $zext.i24.i64(i: i24) returns (i64) { i }
function {:inline} $zext.i24.i80(i: i24) returns (i80) { i }
function {:inline} $zext.i24.i88(i: i24) returns (i88) { i }
function {:inline} $zext.i24.i96(i: i24) returns (i96) { i }
function {:inline} $zext.i24.i128(i: i24) returns (i128) { i }
function {:inline} $zext.i24.i160(i: i24) returns (i160) { i }
function {:inline} $zext.i24.i256(i: i24) returns (i256) { i }
function {:inline} $zext.i32.i40(i: i32) returns (i40) { i }
function {:inline} $zext.i32.i48(i: i32) returns (i48) { i }
function {:inline} $zext.i32.i56(i: i32) returns (i56) { i }
function {:inline} $zext.i32.i64(i: i32) returns (i64) { i }
function {:inline} $zext.i32.i80(i: i32) returns (i80) { i }
function {:inline} $zext.i32.i88(i: i32) returns (i88) { i }
function {:inline} $zext.i32.i96(i: i32) returns (i96) { i }
function {:inline} $zext.i32.i128(i: i32) returns (i128) { i }
function {:inline} $zext.i32.i160(i: i32) returns (i160) { i }
function {:inline} $zext.i32.i256(i: i32) returns (i256) { i }
function {:inline} $zext.i40.i48(i: i40) returns (i48) { i }
function {:inline} $zext.i40.i56(i: i40) returns (i56) { i }
function {:inline} $zext.i40.i64(i: i40) returns (i64) { i }
function {:inline} $zext.i40.i80(i: i40) returns (i80) { i }
function {:inline} $zext.i40.i88(i: i40) returns (i88) { i }
function {:inline} $zext.i40.i96(i: i40) returns (i96) { i }
function {:inline} $zext.i40.i128(i: i40) returns (i128) { i }
function {:inline} $zext.i40.i160(i: i40) returns (i160) { i }
function {:inline} $zext.i40.i256(i: i40) returns (i256) { i }
function {:inline} $zext.i48.i56(i: i48) returns (i56) { i }
function {:inline} $zext.i48.i64(i: i48) returns (i64) { i }
function {:inline} $zext.i48.i80(i: i48) returns (i80) { i }
function {:inline} $zext.i48.i88(i: i48) returns (i88) { i }
function {:inline} $zext.i48.i96(i: i48) returns (i96) { i }
function {:inline} $zext.i48.i128(i: i48) returns (i128) { i }
function {:inline} $zext.i48.i160(i: i48) returns (i160) { i }
function {:inline} $zext.i48.i256(i: i48) returns (i256) { i }
function {:inline} $zext.i56.i64(i: i56) returns (i64) { i }
function {:inline} $zext.i56.i80(i: i56) returns (i80) { i }
function {:inline} $zext.i56.i88(i: i56) returns (i88) { i }
function {:inline} $zext.i56.i96(i: i56) returns (i96) { i }
function {:inline} $zext.i56.i128(i: i56) returns (i128) { i }
function {:inline} $zext.i56.i160(i: i56) returns (i160) { i }
function {:inline} $zext.i56.i256(i: i56) returns (i256) { i }
function {:inline} $zext.i64.i80(i: i64) returns (i80) { i }
function {:inline} $zext.i64.i88(i: i64) returns (i88) { i }
function {:inline} $zext.i64.i96(i: i64) returns (i96) { i }
function {:inline} $zext.i64.i128(i: i64) returns (i128) { i }
function {:inline} $zext.i64.i160(i: i64) returns (i160) { i }
function {:inline} $zext.i64.i256(i: i64) returns (i256) { i }
function {:inline} $zext.i80.i88(i: i80) returns (i88) { i }
function {:inline} $zext.i80.i96(i: i80) returns (i96) { i }
function {:inline} $zext.i80.i128(i: i80) returns (i128) { i }
function {:inline} $zext.i80.i160(i: i80) returns (i160) { i }
function {:inline} $zext.i80.i256(i: i80) returns (i256) { i }
function {:inline} $zext.i88.i96(i: i88) returns (i96) { i }
function {:inline} $zext.i88.i128(i: i88) returns (i128) { i }
function {:inline} $zext.i88.i160(i: i88) returns (i160) { i }
function {:inline} $zext.i88.i256(i: i88) returns (i256) { i }
function {:inline} $zext.i96.i128(i: i96) returns (i128) { i }
function {:inline} $zext.i96.i160(i: i96) returns (i160) { i }
function {:inline} $zext.i96.i256(i: i96) returns (i256) { i }
function {:inline} $zext.i128.i160(i: i128) returns (i160) { i }
function {:inline} $zext.i128.i256(i: i128) returns (i256) { i }
function {:inline} $zext.i160.i256(i: i160) returns (i256) { i }
function $extractvalue.i1(p: ref, i: int) returns (i1);
function $extractvalue.i5(p: ref, i: int) returns (i5);
function $extractvalue.i6(p: ref, i: int) returns (i6);
function $extractvalue.i8(p: ref, i: int) returns (i8);
function $extractvalue.i16(p: ref, i: int) returns (i16);
function $extractvalue.i24(p: ref, i: int) returns (i24);
function $extractvalue.i32(p: ref, i: int) returns (i32);
function $extractvalue.i40(p: ref, i: int) returns (i40);
function $extractvalue.i48(p: ref, i: int) returns (i48);
function $extractvalue.i56(p: ref, i: int) returns (i56);
function $extractvalue.i64(p: ref, i: int) returns (i64);
function $extractvalue.i80(p: ref, i: int) returns (i80);
function $extractvalue.i88(p: ref, i: int) returns (i88);
function $extractvalue.i96(p: ref, i: int) returns (i96);
function $extractvalue.i128(p: ref, i: int) returns (i128);
function $extractvalue.i160(p: ref, i: int) returns (i160);
function $extractvalue.i256(p: ref, i: int) returns (i256);
// Pointer arithmetic operations
function {:inline} $add.ref(p1: ref, p2: ref) returns (ref) { $add.i64(p1, p2) }
function {:inline} $sub.ref(p1: ref, p2: ref) returns (ref) { $sub.i64(p1, p2) }
function {:inline} $mul.ref(p1: ref, p2: ref) returns (ref) { $mul.i64(p1, p2) }

// Pointer predicates
function {:inline} $eq.ref.bool(p1: ref, p2: ref) returns (bool) { (p1 == p2) }
function {:inline} $eq.ref(p1: ref, p2: ref) returns (i1) { (if $eq.ref.bool(p1, p2) then 1 else 0) }
function {:inline} $ne.ref.bool(p1: ref, p2: ref) returns (bool) { (p1 != p2) }
function {:inline} $ne.ref(p1: ref, p2: ref) returns (i1) { (if $ne.ref.bool(p1, p2) then 1 else 0) }
function {:inline} $ugt.ref.bool(p1: ref, p2: ref) returns (bool) { (p1 > p2) }
function {:inline} $ugt.ref(p1: ref, p2: ref) returns (i1) { (if $ugt.ref.bool(p1, p2) then 1 else 0) }
function {:inline} $uge.ref.bool(p1: ref, p2: ref) returns (bool) { (p1 >= p2) }
function {:inline} $uge.ref(p1: ref, p2: ref) returns (i1) { (if $uge.ref.bool(p1, p2) then 1 else 0) }
function {:inline} $ult.ref.bool(p1: ref, p2: ref) returns (bool) { (p1 < p2) }
function {:inline} $ult.ref(p1: ref, p2: ref) returns (i1) { (if $ult.ref.bool(p1, p2) then 1 else 0) }
function {:inline} $ule.ref.bool(p1: ref, p2: ref) returns (bool) { (p1 <= p2) }
function {:inline} $ule.ref(p1: ref, p2: ref) returns (i1) { (if $ule.ref.bool(p1, p2) then 1 else 0) }
function {:inline} $sgt.ref.bool(p1: ref, p2: ref) returns (bool) { (p1 > p2) }
function {:inline} $sgt.ref(p1: ref, p2: ref) returns (i1) { (if $sgt.ref.bool(p1, p2) then 1 else 0) }
function {:inline} $sge.ref.bool(p1: ref, p2: ref) returns (bool) { (p1 >= p2) }
function {:inline} $sge.ref(p1: ref, p2: ref) returns (i1) { (if $sge.ref.bool(p1, p2) then 1 else 0) }
function {:inline} $slt.ref.bool(p1: ref, p2: ref) returns (bool) { (p1 < p2) }
function {:inline} $slt.ref(p1: ref, p2: ref) returns (i1) { (if $slt.ref.bool(p1, p2) then 1 else 0) }
function {:inline} $sle.ref.bool(p1: ref, p2: ref) returns (bool) { (p1 <= p2) }
function {:inline} $sle.ref(p1: ref, p2: ref) returns (i1) { (if $sle.ref.bool(p1, p2) then 1 else 0) }

// Pointer load/store operations
function {:inline} $load.ref(M: [ref] ref, p: ref) returns (ref) { M[p] }
function {:inline} $store.ref(M: [ref] ref, p: ref, i: ref) returns ([ref] ref) { M[p := i] }

// Pointer conversion
function {:inline} $bitcast.ref.ref(p: ref) returns (ref) { p }
function $extractvalue.ref(p: ref, i: int) returns (ref);
// Pointer-number conversion
function {:inline} $p2i.ref.i8(p: ref) returns (i8) { $trunc.i64.i8(p) }
function {:inline} $i2p.i8.ref(i: i8) returns (ref) { $zext.i8.i64(i) }
function {:inline} $p2i.ref.i16(p: ref) returns (i16) { $trunc.i64.i16(p) }
function {:inline} $i2p.i16.ref(i: i16) returns (ref) { $zext.i16.i64(i) }
function {:inline} $p2i.ref.i32(p: ref) returns (i32) { $trunc.i64.i32(p) }
function {:inline} $i2p.i32.ref(i: i32) returns (ref) { $zext.i32.i64(i) }
function {:inline} $p2i.ref.i64(p: ref) returns (i64) { p }
function {:inline} $i2p.i64.ref(i: i64) returns (ref) { i }

function $fp(ipart: int, fpart: int, epart: int) returns (float);
// Floating-point arithmetic operations
function $abs.float(f: float) returns (float);
function $round.float(f: float) returns (float);
function $sqrt.float(f: float) returns (float);
function $fadd.float(f1: float, f2: float) returns (float);
function $fsub.float(f1: float, f2: float) returns (float);
function $fmul.float(f1: float, f2: float) returns (float);
function $fdiv.float(f1: float, f2: float) returns (float);
function $frem.float(f1: float, f2: float) returns (float);
function $min.float(f1: float, f2: float) returns (float);
function $max.float(f1: float, f2: float) returns (float);
function $fma.float(f1: float, f2: float, f3: float) returns (float);
// Floating-point predicates
function $foeq.float.bool(f1: float, f2: float) returns (bool);
function $fole.float.bool(f1: float, f2: float) returns (bool);
function $folt.float.bool(f1: float, f2: float) returns (bool);
function $foge.float.bool(f1: float, f2: float) returns (bool);
function $fogt.float.bool(f1: float, f2: float) returns (bool);
function $fone.float.bool(f1: float, f2: float) returns (bool);
function $ford.float.bool(f1: float, f2: float) returns (bool);
function $fueq.float.bool(f1: float, f2: float) returns (bool);
function $fugt.float.bool(f1: float, f2: float) returns (bool);
function $fuge.float.bool(f1: float, f2: float) returns (bool);
function $fult.float.bool(f1: float, f2: float) returns (bool);
function $fule.float.bool(f1: float, f2: float) returns (bool);
function $fune.float.bool(f1: float, f2: float) returns (bool);
function $funo.float.bool(f1: float, f2: float) returns (bool);
function $ffalse.float.bool(f1: float, f2: float) returns (bool);
function $ftrue.float.bool(f1: float, f2: float) returns (bool);
// Floating-point/integer conversion
function $bitcast.float.i8(f: float) returns (i8);
function $bitcast.float.i16(f: float) returns (i16);
function $bitcast.float.i32(f: float) returns (i32);
function $bitcast.float.i64(f: float) returns (i64);
function $bitcast.float.i80(f: float) returns (i80);
function $bitcast.i8.float(i: i8) returns (float);
function $bitcast.i16.float(i: i16) returns (float);
function $bitcast.i32.float(i: i32) returns (float);
function $bitcast.i64.float(i: i64) returns (float);
function $bitcast.i80.float(i: i80) returns (float);
function $fp2si.float.i1(f: float) returns (i1);
function $fp2si.float.i5(f: float) returns (i5);
function $fp2si.float.i6(f: float) returns (i6);
function $fp2si.float.i8(f: float) returns (i8);
function $fp2si.float.i16(f: float) returns (i16);
function $fp2si.float.i24(f: float) returns (i24);
function $fp2si.float.i32(f: float) returns (i32);
function $fp2si.float.i40(f: float) returns (i40);
function $fp2si.float.i48(f: float) returns (i48);
function $fp2si.float.i56(f: float) returns (i56);
function $fp2si.float.i64(f: float) returns (i64);
function $fp2si.float.i80(f: float) returns (i80);
function $fp2si.float.i88(f: float) returns (i88);
function $fp2si.float.i96(f: float) returns (i96);
function $fp2si.float.i128(f: float) returns (i128);
function $fp2si.float.i160(f: float) returns (i160);
function $fp2si.float.i256(f: float) returns (i256);
function $fp2ui.float.i1(f: float) returns (i1);
function $fp2ui.float.i5(f: float) returns (i5);
function $fp2ui.float.i6(f: float) returns (i6);
function $fp2ui.float.i8(f: float) returns (i8);
function $fp2ui.float.i16(f: float) returns (i16);
function $fp2ui.float.i24(f: float) returns (i24);
function $fp2ui.float.i32(f: float) returns (i32);
function $fp2ui.float.i40(f: float) returns (i40);
function $fp2ui.float.i48(f: float) returns (i48);
function $fp2ui.float.i56(f: float) returns (i56);
function $fp2ui.float.i64(f: float) returns (i64);
function $fp2ui.float.i80(f: float) returns (i80);
function $fp2ui.float.i88(f: float) returns (i88);
function $fp2ui.float.i96(f: float) returns (i96);
function $fp2ui.float.i128(f: float) returns (i128);
function $fp2ui.float.i160(f: float) returns (i160);
function $fp2ui.float.i256(f: float) returns (i256);
function $si2fp.i1.float(i: i1) returns (float);
function $si2fp.i5.float(i: i5) returns (float);
function $si2fp.i6.float(i: i6) returns (float);
function $si2fp.i8.float(i: i8) returns (float);
function $si2fp.i16.float(i: i16) returns (float);
function $si2fp.i24.float(i: i24) returns (float);
function $si2fp.i32.float(i: i32) returns (float);
function $si2fp.i40.float(i: i40) returns (float);
function $si2fp.i48.float(i: i48) returns (float);
function $si2fp.i56.float(i: i56) returns (float);
function $si2fp.i64.float(i: i64) returns (float);
function $si2fp.i80.float(i: i80) returns (float);
function $si2fp.i88.float(i: i88) returns (float);
function $si2fp.i96.float(i: i96) returns (float);
function $si2fp.i128.float(i: i128) returns (float);
function $si2fp.i160.float(i: i160) returns (float);
function $si2fp.i256.float(i: i256) returns (float);
function $ui2fp.i1.float(i: i1) returns (float);
function $ui2fp.i5.float(i: i5) returns (float);
function $ui2fp.i6.float(i: i6) returns (float);
function $ui2fp.i8.float(i: i8) returns (float);
function $ui2fp.i16.float(i: i16) returns (float);
function $ui2fp.i24.float(i: i24) returns (float);
function $ui2fp.i32.float(i: i32) returns (float);
function $ui2fp.i40.float(i: i40) returns (float);
function $ui2fp.i48.float(i: i48) returns (float);
function $ui2fp.i56.float(i: i56) returns (float);
function $ui2fp.i64.float(i: i64) returns (float);
function $ui2fp.i80.float(i: i80) returns (float);
function $ui2fp.i88.float(i: i88) returns (float);
function $ui2fp.i96.float(i: i96) returns (float);
function $ui2fp.i128.float(i: i128) returns (float);
function $ui2fp.i160.float(i: i160) returns (float);
function $ui2fp.i256.float(i: i256) returns (float);
// Floating-point conversion
function $fpext.float.float(f: float) returns (float);
function $fptrunc.float.float(f: float) returns (float);
// Floating-point load/store operations
function {:inline} $load.float(M: [ref] float, p: ref) returns (float) { M[p] }
function {:inline} $store.float(M: [ref] float, p: ref, f: float) returns ([ref] float) { M[p := f] }
function {:inline} $load.unsafe.float(M: [ref] i8, p: ref) returns (float) { $bitcast.i8.float(M[p]) }
function {:inline} $store.unsafe.float(M: [ref] i8, p: ref, f: float) returns ([ref] i8) { M[p := $bitcast.float.i8(f)] }
function $extractvalue.float(p: ref, i: int) returns (float);
const __unbuffered_cnt: ref;
axiom (__unbuffered_cnt == $sub.ref(0, 1028));
const __unbuffered_p1_EAX: ref;
axiom (__unbuffered_p1_EAX == $sub.ref(0, 2056));
const __unbuffered_p1_EBX: ref;
axiom (__unbuffered_p1_EBX == $sub.ref(0, 3084));
const x: ref;
axiom (x == $sub.ref(0, 4112));
const y: ref;
axiom (y == $sub.ref(0, 5140));
const y$w_buff0_used: ref;
axiom (y$w_buff0_used == $sub.ref(0, 6165));
const y$r_buff0_thd1: ref;
axiom (y$r_buff0_thd1 == $sub.ref(0, 7190));
const y$w_buff0: ref;
axiom (y$w_buff0 == $sub.ref(0, 8218));
const y$w_buff1_used: ref;
axiom (y$w_buff1_used == $sub.ref(0, 9243));
const y$r_buff1_thd1: ref;
axiom (y$r_buff1_thd1 == $sub.ref(0, 10268));
const y$w_buff1: ref;
axiom (y$w_buff1 == $sub.ref(0, 11296));
const y$r_buff0_thd0: ref;
axiom (y$r_buff0_thd0 == $sub.ref(0, 12321));
const y$r_buff1_thd0: ref;
axiom (y$r_buff1_thd0 == $sub.ref(0, 13346));
const y$r_buff0_thd2: ref;
axiom (y$r_buff0_thd2 == $sub.ref(0, 14371));
const y$r_buff1_thd2: ref;
axiom (y$r_buff1_thd2 == $sub.ref(0, 15396));
const weak$$choice0: ref;
axiom (weak$$choice0 == $sub.ref(0, 16421));
const weak$$choice2: ref;
axiom (weak$$choice2 == $sub.ref(0, 17446));
const y$flush_delayed: ref;
axiom (y$flush_delayed == $sub.ref(0, 18471));
const y$mem_tmp: ref;
axiom (y$mem_tmp == $sub.ref(0, 19499));
const main$tmp_guard0: ref;
axiom (main$tmp_guard0 == $sub.ref(0, 20524));
const main$tmp_guard1: ref;
axiom (main$tmp_guard1 == $sub.ref(0, 21549));
const y$read_delayed: ref;
axiom (y$read_delayed == $sub.ref(0, 22574));
const y$read_delayed_var: ref;
axiom (y$read_delayed_var == $sub.ref(0, 23606));
const .str: ref;
axiom (.str == $sub.ref(0, 24632));
const {:count 17} .str.1: ref;
axiom (.str.1 == $sub.ref(0, 25673));
const {:count 19} __PRETTY_FUNCTION__.reach_error: ref;
axiom (__PRETTY_FUNCTION__.reach_error == $sub.ref(0, 26716));
const env_value_str: ref;
axiom (env_value_str == $sub.ref(0, 27748));
const {:count 3} .str.1.12: ref;
axiom (.str.1.12 == $sub.ref(0, 28775));
const errno_global: ref;
axiom (errno_global == $sub.ref(0, 29803));
const assume_abort_if_not: ref;
axiom (assume_abort_if_not == $sub.ref(0, 30835));
procedure  assume_abort_if_not($i0: i32)
{
  var $i1: i1;
$bb0:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 3, 7} true;
  assume {:verifier.code 0} true;
  call {:cexpr "assume_abort_if_not:arg:cond"} boogie_si_record_i32($i0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 3, 7} true;
  assume {:verifier.code 0} true;
  $i1 := $ne.i32($i0, 0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 3, 6} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 4, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb2:
  assume !(($i1 == 1));
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 3, 14} true;
  assume {:verifier.code 0} true;
  call abort();
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 3, 14} true;
  assume {:verifier.code 0} true;
  assume false;
}
const llvm.dbg.declare: ref;
axiom (llvm.dbg.declare == $sub.ref(0, 31867));
procedure  llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);
const reach_error: ref;
axiom (reach_error == $sub.ref(0, 32899));
procedure  reach_error()
{
$bb0:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 17, 83} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 17, 83} true;
  assume {:verifier.code 0} true;
  call __assert_fail(.str, .str.1, 8, __PRETTY_FUNCTION__.reach_error);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 17, 83} true;
  assume {:verifier.code 0} true;
  assume false;
}
const __assert_fail: ref;
axiom (__assert_fail == $sub.ref(0, 33931));
procedure  __assert_fail($p0: ref, $p1: ref, $i2: i32, $p3: ref);
const __VERIFIER_assert: ref;
axiom (__VERIFIER_assert == $sub.ref(0, 34963));
procedure  __VERIFIER_assert($i0: i32)
{
  var $i1: i1;
$bb0:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 18, 47} true;
  assume {:verifier.code 0} true;
  call {:cexpr "__VERIFIER_assert:arg:expression"} boogie_si_record_i32($i0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 18, 47} true;
  assume {:verifier.code 0} true;
  $i1 := $ne.i32($i0, 0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 18, 46} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 18, 96} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb2:
  assume !(($i1 == 1));
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 18, 59} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 18, 69} true;
  assume {:verifier.code 0} true;
  call reach_error();
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 18, 83} true;
  assume {:verifier.code 0} true;
  call abort();
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 18, 83} true;
  assume {:verifier.code 0} true;
  assume false;
}
const llvm.dbg.label: ref;
axiom (llvm.dbg.label == $sub.ref(0, 35995));
procedure  llvm.dbg.label($p0: ref);
const P0: ref;
axiom (P0 == $sub.ref(0, 37027));
procedure  P0($p0: ref)
  returns ($r: ref)
{
  var $i1: i8;
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;
  var $i5: i32;
  var $i7: i8;
  var $i8: i1;
  var $i9: i8;
  var $i10: i1;
  var $i11: i32;
  var $i13: i32;
  var $i12: i32;
  var $i6: i32;
  var $i14: i8;
  var $i15: i1;
  var $i16: i8;
  var $i17: i1;
  var $i19: i8;
  var $i20: i1;
  var $i21: i32;
  var $i18: i32;
  var $i22: i1;
  var $i23: i8;
  var $i24: i8;
  var $i25: i1;
  var $i26: i8;
  var $i27: i1;
  var $i28: i8;
  var $i29: i1;
  var $i30: i8;
  var $i31: i1;
  var $i33: i8;
  var $i34: i1;
  var $i35: i32;
  var $i32: i32;
  var $i36: i1;
  var $i37: i8;
  var $i38: i8;
  var $i39: i1;
  var $i40: i8;
  var $i41: i1;
  var $i43: i8;
  var $i44: i1;
  var $i45: i32;
  var $i42: i32;
  var $i46: i1;
  var $i47: i8;
  var $i48: i8;
  var $i49: i1;
  var $i50: i8;
  var $i51: i1;
  var $i52: i8;
  var $i53: i1;
  var $i54: i8;
  var $i55: i1;
  var $i57: i8;
  var $i58: i1;
  var $i59: i32;
  var $i56: i32;
  var $i60: i1;
  var $i61: i8;
  var $i62: i32;
  var $i63: i32;
$bb0:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 737, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 737, 3} true;
  assume {:verifier.code 0} true;
  call __VERIFIER_atomic_begin();
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 738, 5} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, y, 2);
  call {:cexpr "y"} boogie_si_record_i32(2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 739, 3} true;
  assume {:verifier.code 0} true;
  call __VERIFIER_atomic_end();
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 740, 3} true;
  assume {:verifier.code 0} true;
  call __VERIFIER_atomic_begin();
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 741, 5} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, x, 1);
  call {:cexpr "x"} boogie_si_record_i32(1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 742, 3} true;
  assume {:verifier.code 0} true;
  call __VERIFIER_atomic_end();
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 743, 3} true;
  assume {:verifier.code 0} true;
  call __VERIFIER_atomic_begin();
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 744, 7} true;
  assume {:verifier.code 0} true;
  $i1 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 744, 7} true;
  assume {:verifier.code 0} true;
  $i2 := $trunc.i8.i1($i1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 744, 22} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i2} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i2 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 744, 25} true;
  assume {:verifier.code 0} true;
  $i3 := $load.i8($M.0, y$r_buff0_thd1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 744, 25} true;
  assume {:verifier.code 0} true;
  $i4 := $trunc.i8.i1($i3);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 744, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i4} true;
  goto $bb4, $bb5;
$bb2:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 744, 22} true;
  assume {:verifier.code 0} true;
  assume !(($i2 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 744, 55} true;
  assume {:verifier.code 0} true;
  $i7 := $load.i8($M.0, y$w_buff1_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 744, 55} true;
  assume {:verifier.code 0} true;
  $i8 := $trunc.i8.i1($i7);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 744, 70} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i8} true;
  goto $bb7, $bb8;
$bb4:
  assume ($i4 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 744, 42} true;
  assume {:verifier.code 0} true;
  $i5 := $load.i32($M.0, y$w_buff0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 744, 7} true;
  assume {:verifier.code 0} true;
  $i6 := $i5;
  goto $bb6;
$bb5:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 744, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i4 == 1));
  goto $bb3;
$bb6:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 744, 7} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 744, 5} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, y, $i6);
  call {:cexpr "y"} boogie_si_record_i32($i6);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 745, 20} true;
  assume {:verifier.code 0} true;
  $i14 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 745, 20} true;
  assume {:verifier.code 0} true;
  $i15 := $trunc.i8.i1($i14);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 745, 35} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i15} true;
  goto $bb13, $bb14;
$bb7:
  assume ($i8 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 744, 73} true;
  assume {:verifier.code 0} true;
  $i9 := $load.i8($M.0, y$r_buff1_thd1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 744, 73} true;
  assume {:verifier.code 0} true;
  $i10 := $trunc.i8.i1($i9);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 744, 55} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i10} true;
  goto $bb10, $bb11;
$bb8:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 744, 70} true;
  assume {:verifier.code 0} true;
  assume !(($i8 == 1));
  goto $bb9;
$bb9:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 744, 102} true;
  assume {:verifier.code 0} true;
  $i13 := $load.i32($M.0, y);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 744, 55} true;
  assume {:verifier.code 0} true;
  $i12 := $i13;
  goto $bb12;
$bb10:
  assume ($i10 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 744, 90} true;
  assume {:verifier.code 0} true;
  $i11 := $load.i32($M.0, y$w_buff1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 744, 55} true;
  assume {:verifier.code 0} true;
  $i12 := $i11;
  goto $bb12;
$bb11:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 744, 55} true;
  assume {:verifier.code 0} true;
  assume !(($i10 == 1));
  goto $bb9;
$bb12:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 744, 55} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 744, 7} true;
  assume {:verifier.code 0} true;
  $i6 := $i12;
  goto $bb6;
$bb13:
  assume ($i15 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 745, 38} true;
  assume {:verifier.code 0} true;
  $i16 := $load.i8($M.0, y$r_buff0_thd1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 745, 38} true;
  assume {:verifier.code 0} true;
  $i17 := $trunc.i8.i1($i16);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 745, 20} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i17} true;
  goto $bb16, $bb17;
$bb14:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 745, 35} true;
  assume {:verifier.code 0} true;
  assume !(($i15 == 1));
  goto $bb15;
$bb15:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 745, 66} true;
  assume {:verifier.code 0} true;
  $i19 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 745, 66} true;
  assume {:verifier.code 0} true;
  $i20 := $trunc.i8.i1($i19);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 745, 66} true;
  assume {:verifier.code 0} true;
  $i21 := $zext.i1.i32($i20);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 745, 20} true;
  assume {:verifier.code 0} true;
  $i18 := $i21;
  goto $bb18;
$bb16:
  assume ($i17 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 745, 20} true;
  assume {:verifier.code 0} true;
  $i18 := 0;
  goto $bb18;
$bb17:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 745, 20} true;
  assume {:verifier.code 0} true;
  assume !(($i17 == 1));
  goto $bb15;
$bb18:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 745, 20} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 745, 20} true;
  assume {:verifier.code 0} true;
  $i22 := $ne.i32($i18, 0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 745, 18} true;
  assume {:verifier.code 0} true;
  $i23 := $zext.i1.i8($i22);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 745, 18} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, y$w_buff0_used, $i23);
  call {:cexpr "y$w_buff0_used"} boogie_si_record_i8($i23);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 746, 20} true;
  assume {:verifier.code 0} true;
  $i24 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 746, 20} true;
  assume {:verifier.code 0} true;
  $i25 := $trunc.i8.i1($i24);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 746, 35} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i25} true;
  goto $bb19, $bb20;
$bb19:
  assume ($i25 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 746, 38} true;
  assume {:verifier.code 0} true;
  $i26 := $load.i8($M.0, y$r_buff0_thd1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 746, 38} true;
  assume {:verifier.code 0} true;
  $i27 := $trunc.i8.i1($i26);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 746, 53} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i27} true;
  goto $bb22, $bb24;
$bb20:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 746, 35} true;
  assume {:verifier.code 0} true;
  assume !(($i25 == 1));
  goto $bb21;
$bb21:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 746, 56} true;
  assume {:verifier.code 0} true;
  $i28 := $load.i8($M.0, y$w_buff1_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 746, 56} true;
  assume {:verifier.code 0} true;
  $i29 := $trunc.i8.i1($i28);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 746, 71} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i29} true;
  goto $bb25, $bb26;
$bb22:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 746, 53} true;
  assume {:verifier.code 0} true;
  assume ($i27 == 1);
  goto $bb23;
$bb23:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 746, 20} true;
  assume {:verifier.code 0} true;
  $i32 := 0;
  goto $bb30;
$bb24:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 746, 53} true;
  assume {:verifier.code 0} true;
  assume !(($i27 == 1));
  goto $bb21;
$bb25:
  assume ($i29 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 746, 74} true;
  assume {:verifier.code 0} true;
  $i30 := $load.i8($M.0, y$r_buff1_thd1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 746, 74} true;
  assume {:verifier.code 0} true;
  $i31 := $trunc.i8.i1($i30);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 746, 20} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i31} true;
  goto $bb28, $bb29;
$bb26:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 746, 71} true;
  assume {:verifier.code 0} true;
  assume !(($i29 == 1));
  goto $bb27;
$bb27:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 746, 102} true;
  assume {:verifier.code 0} true;
  $i33 := $load.i8($M.0, y$w_buff1_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 746, 102} true;
  assume {:verifier.code 0} true;
  $i34 := $trunc.i8.i1($i33);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 746, 102} true;
  assume {:verifier.code 0} true;
  $i35 := $zext.i1.i32($i34);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 746, 20} true;
  assume {:verifier.code 0} true;
  $i32 := $i35;
  goto $bb30;
$bb28:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 746, 20} true;
  assume {:verifier.code 0} true;
  assume ($i31 == 1);
  goto $bb23;
$bb29:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 746, 20} true;
  assume {:verifier.code 0} true;
  assume !(($i31 == 1));
  goto $bb27;
$bb30:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 746, 20} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 746, 20} true;
  assume {:verifier.code 0} true;
  $i36 := $ne.i32($i32, 0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 746, 18} true;
  assume {:verifier.code 0} true;
  $i37 := $zext.i1.i8($i36);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 746, 18} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, y$w_buff1_used, $i37);
  call {:cexpr "y$w_buff1_used"} boogie_si_record_i8($i37);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 747, 20} true;
  assume {:verifier.code 0} true;
  $i38 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 747, 20} true;
  assume {:verifier.code 0} true;
  $i39 := $trunc.i8.i1($i38);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 747, 35} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i39} true;
  goto $bb31, $bb32;
$bb31:
  assume ($i39 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 747, 38} true;
  assume {:verifier.code 0} true;
  $i40 := $load.i8($M.0, y$r_buff0_thd1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 747, 38} true;
  assume {:verifier.code 0} true;
  $i41 := $trunc.i8.i1($i40);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 747, 20} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i41} true;
  goto $bb34, $bb35;
$bb32:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 747, 35} true;
  assume {:verifier.code 0} true;
  assume !(($i39 == 1));
  goto $bb33;
$bb33:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 747, 66} true;
  assume {:verifier.code 0} true;
  $i43 := $load.i8($M.0, y$r_buff0_thd1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 747, 66} true;
  assume {:verifier.code 0} true;
  $i44 := $trunc.i8.i1($i43);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 747, 66} true;
  assume {:verifier.code 0} true;
  $i45 := $zext.i1.i32($i44);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 747, 20} true;
  assume {:verifier.code 0} true;
  $i42 := $i45;
  goto $bb36;
$bb34:
  assume ($i41 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 747, 20} true;
  assume {:verifier.code 0} true;
  $i42 := 0;
  goto $bb36;
$bb35:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 747, 20} true;
  assume {:verifier.code 0} true;
  assume !(($i41 == 1));
  goto $bb33;
$bb36:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 747, 20} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 747, 20} true;
  assume {:verifier.code 0} true;
  $i46 := $ne.i32($i42, 0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 747, 18} true;
  assume {:verifier.code 0} true;
  $i47 := $zext.i1.i8($i46);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 747, 18} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, y$r_buff0_thd1, $i47);
  call {:cexpr "y$r_buff0_thd1"} boogie_si_record_i8($i47);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 748, 20} true;
  assume {:verifier.code 0} true;
  $i48 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 748, 20} true;
  assume {:verifier.code 0} true;
  $i49 := $trunc.i8.i1($i48);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 748, 35} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i49} true;
  goto $bb37, $bb38;
$bb37:
  assume ($i49 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 748, 38} true;
  assume {:verifier.code 0} true;
  $i50 := $load.i8($M.0, y$r_buff0_thd1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 748, 38} true;
  assume {:verifier.code 0} true;
  $i51 := $trunc.i8.i1($i50);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 748, 53} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i51} true;
  goto $bb40, $bb42;
$bb38:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 748, 35} true;
  assume {:verifier.code 0} true;
  assume !(($i49 == 1));
  goto $bb39;
$bb39:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 748, 56} true;
  assume {:verifier.code 0} true;
  $i52 := $load.i8($M.0, y$w_buff1_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 748, 56} true;
  assume {:verifier.code 0} true;
  $i53 := $trunc.i8.i1($i52);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 748, 71} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i53} true;
  goto $bb43, $bb44;
$bb40:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 748, 53} true;
  assume {:verifier.code 0} true;
  assume ($i51 == 1);
  goto $bb41;
$bb41:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 748, 20} true;
  assume {:verifier.code 0} true;
  $i56 := 0;
  goto $bb48;
$bb42:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 748, 53} true;
  assume {:verifier.code 0} true;
  assume !(($i51 == 1));
  goto $bb39;
$bb43:
  assume ($i53 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 748, 74} true;
  assume {:verifier.code 0} true;
  $i54 := $load.i8($M.0, y$r_buff1_thd1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 748, 74} true;
  assume {:verifier.code 0} true;
  $i55 := $trunc.i8.i1($i54);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 748, 20} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i55} true;
  goto $bb46, $bb47;
$bb44:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 748, 71} true;
  assume {:verifier.code 0} true;
  assume !(($i53 == 1));
  goto $bb45;
$bb45:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 748, 102} true;
  assume {:verifier.code 0} true;
  $i57 := $load.i8($M.0, y$r_buff1_thd1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 748, 102} true;
  assume {:verifier.code 0} true;
  $i58 := $trunc.i8.i1($i57);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 748, 102} true;
  assume {:verifier.code 0} true;
  $i59 := $zext.i1.i32($i58);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 748, 20} true;
  assume {:verifier.code 0} true;
  $i56 := $i59;
  goto $bb48;
$bb46:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 748, 20} true;
  assume {:verifier.code 0} true;
  assume ($i55 == 1);
  goto $bb41;
$bb47:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 748, 20} true;
  assume {:verifier.code 0} true;
  assume !(($i55 == 1));
  goto $bb45;
$bb48:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 748, 20} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 748, 20} true;
  assume {:verifier.code 0} true;
  $i60 := $ne.i32($i56, 0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 748, 18} true;
  assume {:verifier.code 0} true;
  $i61 := $zext.i1.i8($i60);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 748, 18} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, y$r_buff1_thd1, $i61);
  call {:cexpr "y$r_buff1_thd1"} boogie_si_record_i8($i61);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 749, 3} true;
  assume {:verifier.code 0} true;
  call __VERIFIER_atomic_end();
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 750, 3} true;
  assume {:verifier.code 0} true;
  call __VERIFIER_atomic_begin();
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 751, 22} true;
  assume {:verifier.code 0} true;
  $i62 := $load.i32($M.0, __unbuffered_cnt);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 751, 39} true;
  assume {:verifier.code 0} true;
  $i63 := $add.i32($i62, 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 751, 20} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, __unbuffered_cnt, $i63);
  call {:cexpr "__unbuffered_cnt"} boogie_si_record_i32($i63);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 752, 3} true;
  assume {:verifier.code 0} true;
  call __VERIFIER_atomic_end();
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 753, 3} true;
  assume {:verifier.code 0} true;
  $r := $0.ref;
  $exn := false;
  return;
}
const P1: ref;
axiom (P1 == $sub.ref(0, 38059));
procedure  P1($p0: ref)
  returns ($r: ref)
{
  var $i1: i32;
  var $i2: i8;
  var $i3: i1;
  var $i4: i8;
  var $i5: i8;
  var $i6: i1;
  var $i8: i8;
  var $i9: i1;
  var $i7: i1;
  var $i10: i1;
  var $i11: i32;
  var $i12: i8;
  var $i13: i1;
  var $i14: i8;
  var $i15: i8;
  var $i16: i1;
  var $i17: i8;
  var $i18: i8;
  var $i19: i1;
  var $i20: i8;
  var $i21: i1;
  var $i22: i8;
  var $i23: i1;
  var $i24: i8;
  var $i25: i8;
  var $i26: i1;
  var $i27: i8;
  var $i28: i32;
  var $i29: i8;
  var $i30: i1;
  var $i31: i8;
  var $i32: i1;
  var $i33: i8;
  var $i34: i1;
  var $i35: i8;
  var $i36: i1;
  var $i37: i8;
  var $i38: i1;
  var $i39: i32;
  var $i41: i8;
  var $i42: i1;
  var $i43: i8;
  var $i44: i1;
  var $i45: i32;
  var $i47: i32;
  var $i46: i32;
  var $i40: i32;
  var $i48: i8;
  var $i49: i1;
  var $i50: i32;
  var $i52: i8;
  var $i53: i1;
  var $i54: i8;
  var $i55: i1;
  var $i56: i8;
  var $i57: i1;
  var $i58: i8;
  var $i59: i1;
  var $i60: i8;
  var $i61: i1;
  var $i62: i32;
  var $i64: i8;
  var $i65: i1;
  var $i66: i8;
  var $i67: i1;
  var $i68: i32;
  var $i70: i32;
  var $i69: i32;
  var $i63: i32;
  var $i51: i32;
  var $i71: i8;
  var $i72: i1;
  var $i73: i32;
  var $i75: i8;
  var $i76: i1;
  var $i77: i8;
  var $i78: i1;
  var $i79: i8;
  var $i80: i1;
  var $i81: i8;
  var $i82: i1;
  var $i83: i8;
  var $i84: i1;
  var $i85: i32;
  var $i87: i8;
  var $i88: i1;
  var $i89: i8;
  var $i90: i1;
  var $i91: i32;
  var $i93: i32;
  var $i92: i32;
  var $i86: i32;
  var $i74: i32;
  var $i94: i8;
  var $i95: i1;
  var $i96: i8;
  var $i97: i1;
  var $i98: i32;
  var $i100: i8;
  var $i101: i1;
  var $i102: i8;
  var $i103: i1;
  var $i104: i8;
  var $i105: i1;
  var $i106: i8;
  var $i107: i1;
  var $i108: i8;
  var $i109: i1;
  var $i110: i8;
  var $i111: i1;
  var $i112: i32;
  var $i114: i8;
  var $i115: i1;
  var $i116: i8;
  var $i117: i1;
  var $i119: i8;
  var $i120: i1;
  var $i121: i32;
  var $i118: i32;
  var $i113: i32;
  var $i99: i32;
  var $i122: i1;
  var $i123: i8;
  var $i124: i8;
  var $i125: i1;
  var $i126: i8;
  var $i127: i1;
  var $i128: i32;
  var $i130: i8;
  var $i131: i1;
  var $i132: i8;
  var $i133: i1;
  var $i134: i8;
  var $i135: i1;
  var $i136: i8;
  var $i137: i1;
  var $i138: i8;
  var $i139: i1;
  var $i140: i8;
  var $i141: i1;
  var $i142: i32;
  var $i144: i8;
  var $i145: i1;
  var $i147: i8;
  var $i148: i1;
  var $i146: i1;
  var $i149: i32;
  var $i143: i32;
  var $i129: i32;
  var $i150: i1;
  var $i151: i8;
  var $i152: i8;
  var $i153: i1;
  var $i154: i8;
  var $i155: i1;
  var $i156: i32;
  var $i158: i8;
  var $i159: i1;
  var $i160: i8;
  var $i161: i1;
  var $i162: i8;
  var $i163: i1;
  var $i164: i8;
  var $i165: i1;
  var $i166: i8;
  var $i167: i1;
  var $i168: i8;
  var $i169: i1;
  var $i170: i32;
  var $i172: i8;
  var $i173: i1;
  var $i174: i8;
  var $i175: i1;
  var $i177: i8;
  var $i178: i1;
  var $i179: i32;
  var $i176: i32;
  var $i171: i32;
  var $i157: i32;
  var $i180: i1;
  var $i181: i8;
  var $i182: i8;
  var $i183: i1;
  var $i184: i8;
  var $i185: i1;
  var $i186: i32;
  var $i188: i8;
  var $i189: i1;
  var $i190: i8;
  var $i191: i1;
  var $i192: i8;
  var $i193: i1;
  var $i194: i8;
  var $i195: i1;
  var $i196: i8;
  var $i197: i1;
  var $i198: i8;
  var $i199: i1;
  var $i200: i32;
  var $i202: i8;
  var $i203: i1;
  var $i205: i8;
  var $i206: i1;
  var $i204: i1;
  var $i207: i32;
  var $i201: i32;
  var $i187: i32;
  var $i208: i1;
  var $i209: i8;
  var $i210: i32;
  var $i211: i8;
  var $i212: i1;
  var $i213: i32;
  var $i215: i32;
  var $i214: i32;
  var $i216: i1;
  var $i217: i8;
  var $i218: i1;
  var $i219: i8;
  var $i220: i8;
  var $i221: i1;
  var $i222: i8;
  var $i223: i32;
  var $i224: i8;
  var $i225: i1;
  var $i226: i8;
  var $i227: i1;
  var $i228: i8;
  var $i229: i1;
  var $i230: i8;
  var $i231: i1;
  var $i232: i8;
  var $i233: i1;
  var $i234: i32;
  var $i236: i8;
  var $i237: i1;
  var $i238: i8;
  var $i239: i1;
  var $i240: i32;
  var $i242: i32;
  var $i241: i32;
  var $i235: i32;
  var $i243: i8;
  var $i244: i1;
  var $i245: i32;
  var $i247: i8;
  var $i248: i1;
  var $i249: i8;
  var $i250: i1;
  var $i251: i8;
  var $i252: i1;
  var $i253: i8;
  var $i254: i1;
  var $i255: i8;
  var $i256: i1;
  var $i257: i32;
  var $i259: i8;
  var $i260: i1;
  var $i261: i8;
  var $i262: i1;
  var $i263: i32;
  var $i265: i32;
  var $i264: i32;
  var $i258: i32;
  var $i246: i32;
  var $i266: i8;
  var $i267: i1;
  var $i268: i32;
  var $i270: i8;
  var $i271: i1;
  var $i272: i8;
  var $i273: i1;
  var $i274: i8;
  var $i275: i1;
  var $i276: i8;
  var $i277: i1;
  var $i278: i8;
  var $i279: i1;
  var $i280: i32;
  var $i282: i8;
  var $i283: i1;
  var $i284: i8;
  var $i285: i1;
  var $i286: i32;
  var $i288: i32;
  var $i287: i32;
  var $i281: i32;
  var $i269: i32;
  var $i289: i8;
  var $i290: i1;
  var $i291: i8;
  var $i292: i1;
  var $i293: i32;
  var $i295: i8;
  var $i296: i1;
  var $i297: i8;
  var $i298: i1;
  var $i299: i8;
  var $i300: i1;
  var $i301: i8;
  var $i302: i1;
  var $i303: i8;
  var $i304: i1;
  var $i305: i8;
  var $i306: i1;
  var $i307: i32;
  var $i309: i8;
  var $i310: i1;
  var $i311: i8;
  var $i312: i1;
  var $i314: i8;
  var $i315: i1;
  var $i316: i32;
  var $i313: i32;
  var $i308: i32;
  var $i294: i32;
  var $i317: i1;
  var $i318: i8;
  var $i319: i8;
  var $i320: i1;
  var $i321: i8;
  var $i322: i1;
  var $i323: i32;
  var $i325: i8;
  var $i326: i1;
  var $i327: i8;
  var $i328: i1;
  var $i329: i8;
  var $i330: i1;
  var $i331: i8;
  var $i332: i1;
  var $i333: i8;
  var $i334: i1;
  var $i335: i8;
  var $i336: i1;
  var $i337: i32;
  var $i339: i8;
  var $i340: i1;
  var $i342: i8;
  var $i343: i1;
  var $i341: i1;
  var $i344: i32;
  var $i338: i32;
  var $i324: i32;
  var $i345: i1;
  var $i346: i8;
  var $i347: i8;
  var $i348: i1;
  var $i349: i8;
  var $i350: i1;
  var $i351: i32;
  var $i353: i8;
  var $i354: i1;
  var $i355: i8;
  var $i356: i1;
  var $i357: i8;
  var $i358: i1;
  var $i359: i8;
  var $i360: i1;
  var $i361: i8;
  var $i362: i1;
  var $i363: i8;
  var $i364: i1;
  var $i365: i32;
  var $i367: i8;
  var $i368: i1;
  var $i369: i8;
  var $i370: i1;
  var $i372: i8;
  var $i373: i1;
  var $i374: i32;
  var $i371: i32;
  var $i366: i32;
  var $i352: i32;
  var $i375: i1;
  var $i376: i8;
  var $i377: i8;
  var $i378: i1;
  var $i379: i8;
  var $i380: i1;
  var $i381: i32;
  var $i383: i8;
  var $i384: i1;
  var $i385: i8;
  var $i386: i1;
  var $i387: i8;
  var $i388: i1;
  var $i389: i8;
  var $i390: i1;
  var $i391: i8;
  var $i392: i1;
  var $i393: i8;
  var $i394: i1;
  var $i395: i32;
  var $i397: i8;
  var $i398: i1;
  var $i400: i8;
  var $i401: i1;
  var $i399: i1;
  var $i402: i32;
  var $i396: i32;
  var $i382: i32;
  var $i403: i1;
  var $i404: i8;
  var $i405: i32;
  var $i406: i8;
  var $i407: i1;
  var $i408: i32;
  var $i410: i32;
  var $i409: i32;
  var $i411: i8;
  var $i412: i1;
  var $i413: i8;
  var $i414: i1;
  var $i415: i32;
  var $i417: i8;
  var $i418: i1;
  var $i419: i8;
  var $i420: i1;
  var $i421: i32;
  var $i423: i32;
  var $i422: i32;
  var $i416: i32;
  var $i424: i8;
  var $i425: i1;
  var $i426: i8;
  var $i427: i1;
  var $i429: i8;
  var $i430: i1;
  var $i431: i32;
  var $i428: i32;
  var $i432: i1;
  var $i433: i8;
  var $i434: i8;
  var $i435: i1;
  var $i436: i8;
  var $i437: i1;
  var $i438: i8;
  var $i439: i1;
  var $i440: i8;
  var $i441: i1;
  var $i443: i8;
  var $i444: i1;
  var $i445: i32;
  var $i442: i32;
  var $i446: i1;
  var $i447: i8;
  var $i448: i8;
  var $i449: i1;
  var $i450: i8;
  var $i451: i1;
  var $i453: i8;
  var $i454: i1;
  var $i455: i32;
  var $i452: i32;
  var $i456: i1;
  var $i457: i8;
  var $i458: i8;
  var $i459: i1;
  var $i460: i8;
  var $i461: i1;
  var $i462: i8;
  var $i463: i1;
  var $i464: i8;
  var $i465: i1;
  var $i467: i8;
  var $i468: i1;
  var $i469: i32;
  var $i466: i32;
  var $i470: i1;
  var $i471: i8;
  var $i472: i32;
  var $i473: i32;
$bb0:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 757, 3} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 757, 3} true;
  assume {:verifier.code 0} true;
  call __VERIFIER_atomic_begin();
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 758, 5} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, x, 2);
  call {:cexpr "x"} boogie_si_record_i32(2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 759, 3} true;
  assume {:verifier.code 0} true;
  call __VERIFIER_atomic_end();
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 760, 3} true;
  assume {:verifier.code 0} true;
  call __VERIFIER_atomic_begin();
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 761, 15} true;
  assume {:verifier.code 0} true;
  $i1 := $load.i32($M.0, y$w_buff0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 761, 13} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, y$w_buff1, $i1);
  call {:cexpr "y$w_buff1"} boogie_si_record_i32($i1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 762, 13} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, y$w_buff0, 1);
  call {:cexpr "y$w_buff0"} boogie_si_record_i32(1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 763, 20} true;
  assume {:verifier.code 0} true;
  $i2 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 763, 20} true;
  assume {:verifier.code 0} true;
  $i3 := $trunc.i8.i1($i2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 763, 18} true;
  assume {:verifier.code 0} true;
  $i4 := $zext.i1.i8($i3);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 763, 18} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, y$w_buff1_used, $i4);
  call {:cexpr "y$w_buff1_used"} boogie_si_record_i8($i4);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 764, 18} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, y$w_buff0_used, 1);
  call {:cexpr "y$w_buff0_used"} boogie_si_record_i8(1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 765, 23} true;
  assume {:verifier.code 0} true;
  $i5 := $load.i8($M.0, y$w_buff1_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 765, 23} true;
  assume {:verifier.code 0} true;
  $i6 := $trunc.i8.i1($i5);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 765, 38} true;
  assume {:verifier.code 0} true;
  $i7 := 0;
  assume {:branchcond $i6} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i6 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 765, 41} true;
  assume {:verifier.code 1} true;
  $i8 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 765, 41} true;
  assume {:verifier.code 1} true;
  $i9 := $trunc.i8.i1($i8);
  assume {:verifier.code 0} true;
  $i7 := $i9;
  goto $bb3;
$bb2:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 765, 38} true;
  assume {:verifier.code 0} true;
  assume !(($i6 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 0, 0} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 765, 21} true;
  assume {:verifier.code 1} true;
  // llvm2bpl: output/rfi000_tso.opt_tmp.c:765:21: warning: over-approximating bitwise operation xor;
  $i10 := $xor.i1($i7, 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 765, 21} true;
  assume {:verifier.code 1} true;
  $i11 := $zext.i1.i32($i10);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 765, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assert($i11);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 766, 20} true;
  assume {:verifier.code 0} true;
  $i12 := $load.i8($M.0, y$r_buff0_thd0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 766, 20} true;
  assume {:verifier.code 0} true;
  $i13 := $trunc.i8.i1($i12);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 766, 18} true;
  assume {:verifier.code 0} true;
  $i14 := $zext.i1.i8($i13);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 766, 18} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, y$r_buff1_thd0, $i14);
  call {:cexpr "y$r_buff1_thd0"} boogie_si_record_i8($i14);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 767, 20} true;
  assume {:verifier.code 0} true;
  $i15 := $load.i8($M.0, y$r_buff0_thd1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 767, 20} true;
  assume {:verifier.code 0} true;
  $i16 := $trunc.i8.i1($i15);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 767, 18} true;
  assume {:verifier.code 0} true;
  $i17 := $zext.i1.i8($i16);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 767, 18} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, y$r_buff1_thd1, $i17);
  call {:cexpr "y$r_buff1_thd1"} boogie_si_record_i8($i17);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 768, 20} true;
  assume {:verifier.code 0} true;
  $i18 := $load.i8($M.0, y$r_buff0_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 768, 20} true;
  assume {:verifier.code 0} true;
  $i19 := $trunc.i8.i1($i18);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 768, 18} true;
  assume {:verifier.code 0} true;
  $i20 := $zext.i1.i8($i19);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 768, 18} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, y$r_buff1_thd2, $i20);
  call {:cexpr "y$r_buff1_thd2"} boogie_si_record_i8($i20);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 769, 18} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, y$r_buff0_thd2, 1);
  call {:cexpr "y$r_buff0_thd2"} boogie_si_record_i8(1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 770, 3} true;
  assume {:verifier.code 0} true;
  call __VERIFIER_atomic_end();
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 771, 3} true;
  assume {:verifier.code 0} true;
  call __VERIFIER_atomic_begin();
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 772, 19} true;
  assume {:verifier.code 1} true;
  call $i21 := __VERIFIER_nondet_bool();
  call {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i21);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 772, 17} true;
  assume {:verifier.code 0} true;
  $i22 := $zext.i1.i8($i21);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 772, 17} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, weak$$choice0, $i22);
  call {:cexpr "weak$$choice0"} boogie_si_record_i8($i22);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 773, 19} true;
  assume {:verifier.code 1} true;
  call $i23 := __VERIFIER_nondet_bool();
  call {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i23);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 773, 17} true;
  assume {:verifier.code 0} true;
  $i24 := $zext.i1.i8($i23);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 773, 17} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, weak$$choice2, $i24);
  call {:cexpr "weak$$choice2"} boogie_si_record_i8($i24);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 774, 21} true;
  assume {:verifier.code 0} true;
  $i25 := $load.i8($M.0, weak$$choice2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 774, 21} true;
  assume {:verifier.code 0} true;
  $i26 := $trunc.i8.i1($i25);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 774, 19} true;
  assume {:verifier.code 0} true;
  $i27 := $zext.i1.i8($i26);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 774, 19} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, y$flush_delayed, $i27);
  call {:cexpr "y$flush_delayed"} boogie_si_record_i8($i27);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 775, 15} true;
  assume {:verifier.code 0} true;
  $i28 := $load.i32($M.0, y);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 775, 13} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, y$mem_tmp, $i28);
  call {:cexpr "y$mem_tmp"} boogie_si_record_i32($i28);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 776, 8} true;
  assume {:verifier.code 0} true;
  $i29 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 776, 8} true;
  assume {:verifier.code 0} true;
  $i30 := $trunc.i8.i1($i29);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 776, 23} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i30} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i30 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 776, 27} true;
  assume {:verifier.code 0} true;
  $i31 := $load.i8($M.0, y$r_buff0_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 776, 27} true;
  assume {:verifier.code 0} true;
  $i32 := $trunc.i8.i1($i31);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 776, 42} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i32} true;
  goto $bb7, $bb9;
$bb5:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 776, 23} true;
  assume {:verifier.code 0} true;
  assume !(($i30 == 1));
  goto $bb6;
$bb6:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 776, 101} true;
  assume {:verifier.code 0} true;
  $i39 := $load.i32($M.0, y);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 776, 7} true;
  assume {:verifier.code 0} true;
  $i40 := $i39;
  goto $bb17;
$bb7:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 776, 42} true;
  assume {:verifier.code 0} true;
  assume ($i32 == 1);
  goto $bb8;
$bb8:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 776, 65} true;
  assume {:verifier.code 0} true;
  $i35 := $load.i8($M.0, y$r_buff0_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 776, 65} true;
  assume {:verifier.code 0} true;
  $i36 := $trunc.i8.i1($i35);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 776, 80} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i36} true;
  goto $bb12, $bb14;
$bb9:
  assume !(($i32 == 1));
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 776, 46} true;
  assume {:verifier.code 0} true;
  $i33 := $load.i8($M.0, y$w_buff1_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 776, 46} true;
  assume {:verifier.code 0} true;
  $i34 := $trunc.i8.i1($i33);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 776, 61} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i34} true;
  goto $bb10, $bb11;
$bb10:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 776, 61} true;
  assume {:verifier.code 0} true;
  assume ($i34 == 1);
  goto $bb8;
$bb11:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 776, 61} true;
  assume {:verifier.code 0} true;
  assume !(($i34 == 1));
  goto $bb6;
$bb12:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 776, 80} true;
  assume {:verifier.code 0} true;
  assume ($i36 == 1);
  goto $bb13;
$bb13:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 776, 106} true;
  assume {:verifier.code 0} true;
  $i41 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 776, 106} true;
  assume {:verifier.code 0} true;
  $i42 := $trunc.i8.i1($i41);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 776, 121} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i42} true;
  goto $bb18, $bb19;
$bb14:
  assume !(($i36 == 1));
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 776, 84} true;
  assume {:verifier.code 0} true;
  $i37 := $load.i8($M.0, y$r_buff1_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 776, 84} true;
  assume {:verifier.code 0} true;
  $i38 := $trunc.i8.i1($i37);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 776, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i38} true;
  goto $bb15, $bb16;
$bb15:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 776, 7} true;
  assume {:verifier.code 0} true;
  assume ($i38 == 1);
  goto $bb13;
$bb16:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 776, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i38 == 1));
  goto $bb6;
$bb17:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 776, 7} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 776, 5} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, y, $i40);
  call {:cexpr "y"} boogie_si_record_i32($i40);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 777, 15} true;
  assume {:verifier.code 0} true;
  $i48 := $load.i8($M.0, weak$$choice2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 777, 15} true;
  assume {:verifier.code 0} true;
  $i49 := $trunc.i8.i1($i48);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 777, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i49} true;
  goto $bb24, $bb25;
$bb18:
  assume ($i42 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 776, 124} true;
  assume {:verifier.code 0} true;
  $i43 := $load.i8($M.0, y$r_buff0_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 776, 124} true;
  assume {:verifier.code 0} true;
  $i44 := $trunc.i8.i1($i43);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 776, 106} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i44} true;
  goto $bb21, $bb22;
$bb19:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 776, 121} true;
  assume {:verifier.code 0} true;
  assume !(($i42 == 1));
  goto $bb20;
$bb20:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 776, 153} true;
  assume {:verifier.code 0} true;
  $i47 := $load.i32($M.0, y$w_buff1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 776, 106} true;
  assume {:verifier.code 0} true;
  $i46 := $i47;
  goto $bb23;
$bb21:
  assume ($i44 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 776, 141} true;
  assume {:verifier.code 0} true;
  $i45 := $load.i32($M.0, y$w_buff0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 776, 106} true;
  assume {:verifier.code 0} true;
  $i46 := $i45;
  goto $bb23;
$bb22:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 776, 106} true;
  assume {:verifier.code 0} true;
  assume !(($i44 == 1));
  goto $bb20;
$bb23:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 776, 106} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 776, 7} true;
  assume {:verifier.code 0} true;
  $i40 := $i46;
  goto $bb17;
$bb24:
  assume ($i49 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 777, 31} true;
  assume {:verifier.code 0} true;
  $i50 := $load.i32($M.0, y$w_buff0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 777, 15} true;
  assume {:verifier.code 0} true;
  $i51 := $i50;
  goto $bb26;
$bb25:
  assume !(($i49 == 1));
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 777, 45} true;
  assume {:verifier.code 0} true;
  $i52 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 777, 45} true;
  assume {:verifier.code 0} true;
  $i53 := $trunc.i8.i1($i52);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 777, 60} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i53} true;
  goto $bb27, $bb28;
$bb26:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 777, 15} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 777, 13} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, y$w_buff0, $i51);
  call {:cexpr "y$w_buff0"} boogie_si_record_i32($i51);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 778, 15} true;
  assume {:verifier.code 0} true;
  $i71 := $load.i8($M.0, weak$$choice2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 778, 15} true;
  assume {:verifier.code 0} true;
  $i72 := $trunc.i8.i1($i71);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 778, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i72} true;
  goto $bb47, $bb48;
$bb27:
  assume ($i53 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 777, 64} true;
  assume {:verifier.code 0} true;
  $i54 := $load.i8($M.0, y$r_buff0_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 777, 64} true;
  assume {:verifier.code 0} true;
  $i55 := $trunc.i8.i1($i54);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 777, 79} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i55} true;
  goto $bb30, $bb32;
$bb28:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 777, 60} true;
  assume {:verifier.code 0} true;
  assume !(($i53 == 1));
  goto $bb29;
$bb29:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 777, 138} true;
  assume {:verifier.code 0} true;
  $i62 := $load.i32($M.0, y$w_buff0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 777, 44} true;
  assume {:verifier.code 0} true;
  $i63 := $i62;
  goto $bb40;
$bb30:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 777, 79} true;
  assume {:verifier.code 0} true;
  assume ($i55 == 1);
  goto $bb31;
$bb31:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 777, 102} true;
  assume {:verifier.code 0} true;
  $i58 := $load.i8($M.0, y$r_buff0_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 777, 102} true;
  assume {:verifier.code 0} true;
  $i59 := $trunc.i8.i1($i58);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 777, 117} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i59} true;
  goto $bb35, $bb37;
$bb32:
  assume !(($i55 == 1));
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 777, 83} true;
  assume {:verifier.code 0} true;
  $i56 := $load.i8($M.0, y$w_buff1_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 777, 83} true;
  assume {:verifier.code 0} true;
  $i57 := $trunc.i8.i1($i56);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 777, 98} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i57} true;
  goto $bb33, $bb34;
$bb33:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 777, 98} true;
  assume {:verifier.code 0} true;
  assume ($i57 == 1);
  goto $bb31;
$bb34:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 777, 98} true;
  assume {:verifier.code 0} true;
  assume !(($i57 == 1));
  goto $bb29;
$bb35:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 777, 117} true;
  assume {:verifier.code 0} true;
  assume ($i59 == 1);
  goto $bb36;
$bb36:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 777, 151} true;
  assume {:verifier.code 0} true;
  $i64 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 777, 151} true;
  assume {:verifier.code 0} true;
  $i65 := $trunc.i8.i1($i64);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 777, 166} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i65} true;
  goto $bb41, $bb42;
$bb37:
  assume !(($i59 == 1));
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 777, 121} true;
  assume {:verifier.code 0} true;
  $i60 := $load.i8($M.0, y$r_buff1_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 777, 121} true;
  assume {:verifier.code 0} true;
  $i61 := $trunc.i8.i1($i60);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 777, 44} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i61} true;
  goto $bb38, $bb39;
$bb38:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 777, 44} true;
  assume {:verifier.code 0} true;
  assume ($i61 == 1);
  goto $bb36;
$bb39:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 777, 44} true;
  assume {:verifier.code 0} true;
  assume !(($i61 == 1));
  goto $bb29;
$bb40:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 777, 44} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 777, 15} true;
  assume {:verifier.code 0} true;
  $i51 := $i63;
  goto $bb26;
$bb41:
  assume ($i65 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 777, 169} true;
  assume {:verifier.code 0} true;
  $i66 := $load.i8($M.0, y$r_buff0_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 777, 169} true;
  assume {:verifier.code 0} true;
  $i67 := $trunc.i8.i1($i66);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 777, 151} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i67} true;
  goto $bb44, $bb45;
$bb42:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 777, 166} true;
  assume {:verifier.code 0} true;
  assume !(($i65 == 1));
  goto $bb43;
$bb43:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 777, 198} true;
  assume {:verifier.code 0} true;
  $i70 := $load.i32($M.0, y$w_buff0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 777, 151} true;
  assume {:verifier.code 0} true;
  $i69 := $i70;
  goto $bb46;
$bb44:
  assume ($i67 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 777, 186} true;
  assume {:verifier.code 0} true;
  $i68 := $load.i32($M.0, y$w_buff0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 777, 151} true;
  assume {:verifier.code 0} true;
  $i69 := $i68;
  goto $bb46;
$bb45:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 777, 151} true;
  assume {:verifier.code 0} true;
  assume !(($i67 == 1));
  goto $bb43;
$bb46:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 777, 151} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 777, 44} true;
  assume {:verifier.code 0} true;
  $i63 := $i69;
  goto $bb40;
$bb47:
  assume ($i72 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 778, 31} true;
  assume {:verifier.code 0} true;
  $i73 := $load.i32($M.0, y$w_buff1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 778, 15} true;
  assume {:verifier.code 0} true;
  $i74 := $i73;
  goto $bb49;
$bb48:
  assume !(($i72 == 1));
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 778, 45} true;
  assume {:verifier.code 0} true;
  $i75 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 778, 45} true;
  assume {:verifier.code 0} true;
  $i76 := $trunc.i8.i1($i75);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 778, 60} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i76} true;
  goto $bb50, $bb51;
$bb49:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 778, 15} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 778, 13} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, y$w_buff1, $i74);
  call {:cexpr "y$w_buff1"} boogie_si_record_i32($i74);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 779, 20} true;
  assume {:verifier.code 0} true;
  $i94 := $load.i8($M.0, weak$$choice2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 779, 20} true;
  assume {:verifier.code 0} true;
  $i95 := $trunc.i8.i1($i94);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 779, 20} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i95} true;
  goto $bb70, $bb71;
$bb50:
  assume ($i76 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 778, 64} true;
  assume {:verifier.code 0} true;
  $i77 := $load.i8($M.0, y$r_buff0_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 778, 64} true;
  assume {:verifier.code 0} true;
  $i78 := $trunc.i8.i1($i77);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 778, 79} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i78} true;
  goto $bb53, $bb55;
$bb51:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 778, 60} true;
  assume {:verifier.code 0} true;
  assume !(($i76 == 1));
  goto $bb52;
$bb52:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 778, 138} true;
  assume {:verifier.code 0} true;
  $i85 := $load.i32($M.0, y$w_buff1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 778, 44} true;
  assume {:verifier.code 0} true;
  $i86 := $i85;
  goto $bb63;
$bb53:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 778, 79} true;
  assume {:verifier.code 0} true;
  assume ($i78 == 1);
  goto $bb54;
$bb54:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 778, 102} true;
  assume {:verifier.code 0} true;
  $i81 := $load.i8($M.0, y$r_buff0_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 778, 102} true;
  assume {:verifier.code 0} true;
  $i82 := $trunc.i8.i1($i81);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 778, 117} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i82} true;
  goto $bb58, $bb60;
$bb55:
  assume !(($i78 == 1));
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 778, 83} true;
  assume {:verifier.code 0} true;
  $i79 := $load.i8($M.0, y$w_buff1_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 778, 83} true;
  assume {:verifier.code 0} true;
  $i80 := $trunc.i8.i1($i79);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 778, 98} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i80} true;
  goto $bb56, $bb57;
$bb56:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 778, 98} true;
  assume {:verifier.code 0} true;
  assume ($i80 == 1);
  goto $bb54;
$bb57:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 778, 98} true;
  assume {:verifier.code 0} true;
  assume !(($i80 == 1));
  goto $bb52;
$bb58:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 778, 117} true;
  assume {:verifier.code 0} true;
  assume ($i82 == 1);
  goto $bb59;
$bb59:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 778, 151} true;
  assume {:verifier.code 0} true;
  $i87 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 778, 151} true;
  assume {:verifier.code 0} true;
  $i88 := $trunc.i8.i1($i87);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 778, 166} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i88} true;
  goto $bb64, $bb65;
$bb60:
  assume !(($i82 == 1));
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 778, 121} true;
  assume {:verifier.code 0} true;
  $i83 := $load.i8($M.0, y$r_buff1_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 778, 121} true;
  assume {:verifier.code 0} true;
  $i84 := $trunc.i8.i1($i83);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 778, 44} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i84} true;
  goto $bb61, $bb62;
$bb61:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 778, 44} true;
  assume {:verifier.code 0} true;
  assume ($i84 == 1);
  goto $bb59;
$bb62:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 778, 44} true;
  assume {:verifier.code 0} true;
  assume !(($i84 == 1));
  goto $bb52;
$bb63:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 778, 44} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 778, 15} true;
  assume {:verifier.code 0} true;
  $i74 := $i86;
  goto $bb49;
$bb64:
  assume ($i88 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 778, 169} true;
  assume {:verifier.code 0} true;
  $i89 := $load.i8($M.0, y$r_buff0_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 778, 169} true;
  assume {:verifier.code 0} true;
  $i90 := $trunc.i8.i1($i89);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 778, 151} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i90} true;
  goto $bb67, $bb68;
$bb65:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 778, 166} true;
  assume {:verifier.code 0} true;
  assume !(($i88 == 1));
  goto $bb66;
$bb66:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 778, 198} true;
  assume {:verifier.code 0} true;
  $i93 := $load.i32($M.0, y$w_buff1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 778, 151} true;
  assume {:verifier.code 0} true;
  $i92 := $i93;
  goto $bb69;
$bb67:
  assume ($i90 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 778, 186} true;
  assume {:verifier.code 0} true;
  $i91 := $load.i32($M.0, y$w_buff1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 778, 151} true;
  assume {:verifier.code 0} true;
  $i92 := $i91;
  goto $bb69;
$bb68:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 778, 151} true;
  assume {:verifier.code 0} true;
  assume !(($i90 == 1));
  goto $bb66;
$bb69:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 778, 151} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 778, 44} true;
  assume {:verifier.code 0} true;
  $i86 := $i92;
  goto $bb63;
$bb70:
  assume ($i95 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 779, 36} true;
  assume {:verifier.code 0} true;
  $i96 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 779, 36} true;
  assume {:verifier.code 0} true;
  $i97 := $trunc.i8.i1($i96);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 779, 36} true;
  assume {:verifier.code 0} true;
  $i98 := $zext.i1.i32($i97);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 779, 20} true;
  assume {:verifier.code 0} true;
  $i99 := $i98;
  goto $bb72;
$bb71:
  assume !(($i95 == 1));
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 779, 55} true;
  assume {:verifier.code 0} true;
  $i100 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 779, 55} true;
  assume {:verifier.code 0} true;
  $i101 := $trunc.i8.i1($i100);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 779, 70} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i101} true;
  goto $bb73, $bb74;
$bb72:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 779, 20} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 779, 20} true;
  assume {:verifier.code 0} true;
  $i122 := $ne.i32($i99, 0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 779, 18} true;
  assume {:verifier.code 0} true;
  $i123 := $zext.i1.i8($i122);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 779, 18} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, y$w_buff0_used, $i123);
  call {:cexpr "y$w_buff0_used"} boogie_si_record_i8($i123);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 780, 20} true;
  assume {:verifier.code 0} true;
  $i124 := $load.i8($M.0, weak$$choice2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 780, 20} true;
  assume {:verifier.code 0} true;
  $i125 := $trunc.i8.i1($i124);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 780, 20} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i125} true;
  goto $bb93, $bb94;
$bb73:
  assume ($i101 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 779, 74} true;
  assume {:verifier.code 0} true;
  $i102 := $load.i8($M.0, y$r_buff0_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 779, 74} true;
  assume {:verifier.code 0} true;
  $i103 := $trunc.i8.i1($i102);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 779, 89} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i103} true;
  goto $bb76, $bb78;
$bb74:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 779, 70} true;
  assume {:verifier.code 0} true;
  assume !(($i101 == 1));
  goto $bb75;
$bb75:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 779, 148} true;
  assume {:verifier.code 0} true;
  $i110 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 779, 148} true;
  assume {:verifier.code 0} true;
  $i111 := $trunc.i8.i1($i110);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 779, 148} true;
  assume {:verifier.code 0} true;
  $i112 := $zext.i1.i32($i111);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 779, 54} true;
  assume {:verifier.code 0} true;
  $i113 := $i112;
  goto $bb86;
$bb76:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 779, 89} true;
  assume {:verifier.code 0} true;
  assume ($i103 == 1);
  goto $bb77;
$bb77:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 779, 112} true;
  assume {:verifier.code 0} true;
  $i106 := $load.i8($M.0, y$r_buff0_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 779, 112} true;
  assume {:verifier.code 0} true;
  $i107 := $trunc.i8.i1($i106);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 779, 127} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i107} true;
  goto $bb81, $bb83;
$bb78:
  assume !(($i103 == 1));
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 779, 93} true;
  assume {:verifier.code 0} true;
  $i104 := $load.i8($M.0, y$w_buff1_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 779, 93} true;
  assume {:verifier.code 0} true;
  $i105 := $trunc.i8.i1($i104);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 779, 108} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i105} true;
  goto $bb79, $bb80;
$bb79:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 779, 108} true;
  assume {:verifier.code 0} true;
  assume ($i105 == 1);
  goto $bb77;
$bb80:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 779, 108} true;
  assume {:verifier.code 0} true;
  assume !(($i105 == 1));
  goto $bb75;
$bb81:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 779, 127} true;
  assume {:verifier.code 0} true;
  assume ($i107 == 1);
  goto $bb82;
$bb82:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 779, 166} true;
  assume {:verifier.code 0} true;
  $i114 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 779, 166} true;
  assume {:verifier.code 0} true;
  $i115 := $trunc.i8.i1($i114);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 779, 181} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i115} true;
  goto $bb87, $bb88;
$bb83:
  assume !(($i107 == 1));
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 779, 131} true;
  assume {:verifier.code 0} true;
  $i108 := $load.i8($M.0, y$r_buff1_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 779, 131} true;
  assume {:verifier.code 0} true;
  $i109 := $trunc.i8.i1($i108);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 779, 54} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i109} true;
  goto $bb84, $bb85;
$bb84:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 779, 54} true;
  assume {:verifier.code 0} true;
  assume ($i109 == 1);
  goto $bb82;
$bb85:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 779, 54} true;
  assume {:verifier.code 0} true;
  assume !(($i109 == 1));
  goto $bb75;
$bb86:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 779, 54} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 779, 20} true;
  assume {:verifier.code 0} true;
  $i99 := $i113;
  goto $bb72;
$bb87:
  assume ($i115 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 779, 184} true;
  assume {:verifier.code 0} true;
  $i116 := $load.i8($M.0, y$r_buff0_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 779, 184} true;
  assume {:verifier.code 0} true;
  $i117 := $trunc.i8.i1($i116);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 779, 166} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i117} true;
  goto $bb90, $bb91;
$bb88:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 779, 181} true;
  assume {:verifier.code 0} true;
  assume !(($i115 == 1));
  goto $bb89;
$bb89:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 779, 212} true;
  assume {:verifier.code 0} true;
  $i119 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 779, 212} true;
  assume {:verifier.code 0} true;
  $i120 := $trunc.i8.i1($i119);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 779, 212} true;
  assume {:verifier.code 0} true;
  $i121 := $zext.i1.i32($i120);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 779, 166} true;
  assume {:verifier.code 0} true;
  $i118 := $i121;
  goto $bb92;
$bb90:
  assume ($i117 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 779, 166} true;
  assume {:verifier.code 0} true;
  $i118 := 0;
  goto $bb92;
$bb91:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 779, 166} true;
  assume {:verifier.code 0} true;
  assume !(($i117 == 1));
  goto $bb89;
$bb92:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 779, 166} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 779, 54} true;
  assume {:verifier.code 0} true;
  $i113 := $i118;
  goto $bb86;
$bb93:
  assume ($i125 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 780, 36} true;
  assume {:verifier.code 0} true;
  $i126 := $load.i8($M.0, y$w_buff1_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 780, 36} true;
  assume {:verifier.code 0} true;
  $i127 := $trunc.i8.i1($i126);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 780, 36} true;
  assume {:verifier.code 0} true;
  $i128 := $zext.i1.i32($i127);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 780, 20} true;
  assume {:verifier.code 0} true;
  $i129 := $i128;
  goto $bb95;
$bb94:
  assume !(($i125 == 1));
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 780, 55} true;
  assume {:verifier.code 0} true;
  $i130 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 780, 55} true;
  assume {:verifier.code 0} true;
  $i131 := $trunc.i8.i1($i130);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 780, 70} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i131} true;
  goto $bb96, $bb97;
$bb95:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 780, 20} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 780, 20} true;
  assume {:verifier.code 0} true;
  $i150 := $ne.i32($i129, 0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 780, 18} true;
  assume {:verifier.code 0} true;
  $i151 := $zext.i1.i8($i150);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 780, 18} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, y$w_buff1_used, $i151);
  call {:cexpr "y$w_buff1_used"} boogie_si_record_i8($i151);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 781, 20} true;
  assume {:verifier.code 0} true;
  $i152 := $load.i8($M.0, weak$$choice2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 781, 20} true;
  assume {:verifier.code 0} true;
  $i153 := $trunc.i8.i1($i152);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 781, 20} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i153} true;
  goto $bb113, $bb114;
$bb96:
  assume ($i131 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 780, 74} true;
  assume {:verifier.code 0} true;
  $i132 := $load.i8($M.0, y$r_buff0_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 780, 74} true;
  assume {:verifier.code 0} true;
  $i133 := $trunc.i8.i1($i132);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 780, 89} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i133} true;
  goto $bb99, $bb101;
$bb97:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 780, 70} true;
  assume {:verifier.code 0} true;
  assume !(($i131 == 1));
  goto $bb98;
$bb98:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 780, 148} true;
  assume {:verifier.code 0} true;
  $i140 := $load.i8($M.0, y$w_buff1_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 780, 148} true;
  assume {:verifier.code 0} true;
  $i141 := $trunc.i8.i1($i140);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 780, 148} true;
  assume {:verifier.code 0} true;
  $i142 := $zext.i1.i32($i141);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 780, 54} true;
  assume {:verifier.code 0} true;
  $i143 := $i142;
  goto $bb109;
$bb99:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 780, 89} true;
  assume {:verifier.code 0} true;
  assume ($i133 == 1);
  goto $bb100;
$bb100:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 780, 112} true;
  assume {:verifier.code 0} true;
  $i136 := $load.i8($M.0, y$r_buff0_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 780, 112} true;
  assume {:verifier.code 0} true;
  $i137 := $trunc.i8.i1($i136);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 780, 127} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i137} true;
  goto $bb104, $bb106;
$bb101:
  assume !(($i133 == 1));
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 780, 93} true;
  assume {:verifier.code 0} true;
  $i134 := $load.i8($M.0, y$w_buff1_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 780, 93} true;
  assume {:verifier.code 0} true;
  $i135 := $trunc.i8.i1($i134);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 780, 108} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i135} true;
  goto $bb102, $bb103;
$bb102:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 780, 108} true;
  assume {:verifier.code 0} true;
  assume ($i135 == 1);
  goto $bb100;
$bb103:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 780, 108} true;
  assume {:verifier.code 0} true;
  assume !(($i135 == 1));
  goto $bb98;
$bb104:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 780, 127} true;
  assume {:verifier.code 0} true;
  assume ($i137 == 1);
  goto $bb105;
$bb105:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 780, 166} true;
  assume {:verifier.code 0} true;
  $i144 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 780, 166} true;
  assume {:verifier.code 0} true;
  $i145 := $trunc.i8.i1($i144);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 780, 181} true;
  assume {:verifier.code 0} true;
  $i146 := 0;
  assume {:branchcond $i145} true;
  goto $bb110, $bb111;
$bb106:
  assume !(($i137 == 1));
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 780, 131} true;
  assume {:verifier.code 0} true;
  $i138 := $load.i8($M.0, y$r_buff1_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 780, 131} true;
  assume {:verifier.code 0} true;
  $i139 := $trunc.i8.i1($i138);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 780, 54} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i139} true;
  goto $bb107, $bb108;
$bb107:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 780, 54} true;
  assume {:verifier.code 0} true;
  assume ($i139 == 1);
  goto $bb105;
$bb108:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 780, 54} true;
  assume {:verifier.code 0} true;
  assume !(($i139 == 1));
  goto $bb98;
$bb109:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 780, 54} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 780, 20} true;
  assume {:verifier.code 0} true;
  $i129 := $i143;
  goto $bb95;
$bb110:
  assume ($i145 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 780, 184} true;
  assume {:verifier.code 0} true;
  $i147 := $load.i8($M.0, y$r_buff0_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 780, 184} true;
  assume {:verifier.code 0} true;
  $i148 := $trunc.i8.i1($i147);
  assume {:verifier.code 0} true;
  $i146 := $i148;
  goto $bb112;
$bb111:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 780, 181} true;
  assume {:verifier.code 0} true;
  assume !(($i145 == 1));
  goto $bb112;
$bb112:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 780, 166} true;
  assume {:verifier.code 0} true;
  $i149 := (if ($i146 == 1) then 0 else 0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 780, 54} true;
  assume {:verifier.code 0} true;
  $i143 := $i149;
  goto $bb109;
$bb113:
  assume ($i153 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 781, 36} true;
  assume {:verifier.code 0} true;
  $i154 := $load.i8($M.0, y$r_buff0_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 781, 36} true;
  assume {:verifier.code 0} true;
  $i155 := $trunc.i8.i1($i154);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 781, 36} true;
  assume {:verifier.code 0} true;
  $i156 := $zext.i1.i32($i155);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 781, 20} true;
  assume {:verifier.code 0} true;
  $i157 := $i156;
  goto $bb115;
$bb114:
  assume !(($i153 == 1));
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 781, 55} true;
  assume {:verifier.code 0} true;
  $i158 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 781, 55} true;
  assume {:verifier.code 0} true;
  $i159 := $trunc.i8.i1($i158);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 781, 70} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i159} true;
  goto $bb116, $bb117;
$bb115:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 781, 20} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 781, 20} true;
  assume {:verifier.code 0} true;
  $i180 := $ne.i32($i157, 0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 781, 18} true;
  assume {:verifier.code 0} true;
  $i181 := $zext.i1.i8($i180);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 781, 18} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, y$r_buff0_thd2, $i181);
  call {:cexpr "y$r_buff0_thd2"} boogie_si_record_i8($i181);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 782, 20} true;
  assume {:verifier.code 0} true;
  $i182 := $load.i8($M.0, weak$$choice2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 782, 20} true;
  assume {:verifier.code 0} true;
  $i183 := $trunc.i8.i1($i182);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 782, 20} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i183} true;
  goto $bb136, $bb137;
$bb116:
  assume ($i159 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 781, 74} true;
  assume {:verifier.code 0} true;
  $i160 := $load.i8($M.0, y$r_buff0_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 781, 74} true;
  assume {:verifier.code 0} true;
  $i161 := $trunc.i8.i1($i160);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 781, 89} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i161} true;
  goto $bb119, $bb121;
$bb117:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 781, 70} true;
  assume {:verifier.code 0} true;
  assume !(($i159 == 1));
  goto $bb118;
$bb118:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 781, 148} true;
  assume {:verifier.code 0} true;
  $i168 := $load.i8($M.0, y$r_buff0_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 781, 148} true;
  assume {:verifier.code 0} true;
  $i169 := $trunc.i8.i1($i168);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 781, 148} true;
  assume {:verifier.code 0} true;
  $i170 := $zext.i1.i32($i169);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 781, 54} true;
  assume {:verifier.code 0} true;
  $i171 := $i170;
  goto $bb129;
$bb119:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 781, 89} true;
  assume {:verifier.code 0} true;
  assume ($i161 == 1);
  goto $bb120;
$bb120:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 781, 112} true;
  assume {:verifier.code 0} true;
  $i164 := $load.i8($M.0, y$r_buff0_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 781, 112} true;
  assume {:verifier.code 0} true;
  $i165 := $trunc.i8.i1($i164);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 781, 127} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i165} true;
  goto $bb124, $bb126;
$bb121:
  assume !(($i161 == 1));
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 781, 93} true;
  assume {:verifier.code 0} true;
  $i162 := $load.i8($M.0, y$w_buff1_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 781, 93} true;
  assume {:verifier.code 0} true;
  $i163 := $trunc.i8.i1($i162);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 781, 108} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i163} true;
  goto $bb122, $bb123;
$bb122:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 781, 108} true;
  assume {:verifier.code 0} true;
  assume ($i163 == 1);
  goto $bb120;
$bb123:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 781, 108} true;
  assume {:verifier.code 0} true;
  assume !(($i163 == 1));
  goto $bb118;
$bb124:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 781, 127} true;
  assume {:verifier.code 0} true;
  assume ($i165 == 1);
  goto $bb125;
$bb125:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 781, 166} true;
  assume {:verifier.code 0} true;
  $i172 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 781, 166} true;
  assume {:verifier.code 0} true;
  $i173 := $trunc.i8.i1($i172);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 781, 181} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i173} true;
  goto $bb130, $bb131;
$bb126:
  assume !(($i165 == 1));
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 781, 131} true;
  assume {:verifier.code 0} true;
  $i166 := $load.i8($M.0, y$r_buff1_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 781, 131} true;
  assume {:verifier.code 0} true;
  $i167 := $trunc.i8.i1($i166);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 781, 54} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i167} true;
  goto $bb127, $bb128;
$bb127:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 781, 54} true;
  assume {:verifier.code 0} true;
  assume ($i167 == 1);
  goto $bb125;
$bb128:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 781, 54} true;
  assume {:verifier.code 0} true;
  assume !(($i167 == 1));
  goto $bb118;
$bb129:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 781, 54} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 781, 20} true;
  assume {:verifier.code 0} true;
  $i157 := $i171;
  goto $bb115;
$bb130:
  assume ($i173 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 781, 184} true;
  assume {:verifier.code 0} true;
  $i174 := $load.i8($M.0, y$r_buff0_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 781, 184} true;
  assume {:verifier.code 0} true;
  $i175 := $trunc.i8.i1($i174);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 781, 166} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i175} true;
  goto $bb133, $bb134;
$bb131:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 781, 181} true;
  assume {:verifier.code 0} true;
  assume !(($i173 == 1));
  goto $bb132;
$bb132:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 781, 212} true;
  assume {:verifier.code 0} true;
  $i177 := $load.i8($M.0, y$r_buff0_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 781, 212} true;
  assume {:verifier.code 0} true;
  $i178 := $trunc.i8.i1($i177);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 781, 212} true;
  assume {:verifier.code 0} true;
  $i179 := $zext.i1.i32($i178);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 781, 166} true;
  assume {:verifier.code 0} true;
  $i176 := $i179;
  goto $bb135;
$bb133:
  assume ($i175 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 781, 166} true;
  assume {:verifier.code 0} true;
  $i176 := 0;
  goto $bb135;
$bb134:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 781, 166} true;
  assume {:verifier.code 0} true;
  assume !(($i175 == 1));
  goto $bb132;
$bb135:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 781, 166} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 781, 54} true;
  assume {:verifier.code 0} true;
  $i171 := $i176;
  goto $bb129;
$bb136:
  assume ($i183 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 782, 36} true;
  assume {:verifier.code 0} true;
  $i184 := $load.i8($M.0, y$r_buff1_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 782, 36} true;
  assume {:verifier.code 0} true;
  $i185 := $trunc.i8.i1($i184);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 782, 36} true;
  assume {:verifier.code 0} true;
  $i186 := $zext.i1.i32($i185);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 782, 20} true;
  assume {:verifier.code 0} true;
  $i187 := $i186;
  goto $bb138;
$bb137:
  assume !(($i183 == 1));
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 782, 55} true;
  assume {:verifier.code 0} true;
  $i188 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 782, 55} true;
  assume {:verifier.code 0} true;
  $i189 := $trunc.i8.i1($i188);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 782, 70} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i189} true;
  goto $bb139, $bb140;
$bb138:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 782, 20} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 782, 20} true;
  assume {:verifier.code 0} true;
  $i208 := $ne.i32($i187, 0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 782, 18} true;
  assume {:verifier.code 0} true;
  $i209 := $zext.i1.i8($i208);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 782, 18} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, y$r_buff1_thd2, $i209);
  call {:cexpr "y$r_buff1_thd2"} boogie_si_record_i8($i209);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 783, 25} true;
  assume {:verifier.code 0} true;
  $i210 := $load.i32($M.0, y);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 783, 23} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, __unbuffered_p1_EAX, $i210);
  call {:cexpr "__unbuffered_p1_EAX"} boogie_si_record_i32($i210);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 784, 7} true;
  assume {:verifier.code 0} true;
  $i211 := $load.i8($M.0, y$flush_delayed);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 784, 7} true;
  assume {:verifier.code 0} true;
  $i212 := $trunc.i8.i1($i211);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 784, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i212} true;
  goto $bb156, $bb157;
$bb139:
  assume ($i189 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 782, 74} true;
  assume {:verifier.code 0} true;
  $i190 := $load.i8($M.0, y$r_buff0_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 782, 74} true;
  assume {:verifier.code 0} true;
  $i191 := $trunc.i8.i1($i190);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 782, 89} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i191} true;
  goto $bb142, $bb144;
$bb140:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 782, 70} true;
  assume {:verifier.code 0} true;
  assume !(($i189 == 1));
  goto $bb141;
$bb141:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 782, 148} true;
  assume {:verifier.code 0} true;
  $i198 := $load.i8($M.0, y$r_buff1_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 782, 148} true;
  assume {:verifier.code 0} true;
  $i199 := $trunc.i8.i1($i198);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 782, 148} true;
  assume {:verifier.code 0} true;
  $i200 := $zext.i1.i32($i199);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 782, 54} true;
  assume {:verifier.code 0} true;
  $i201 := $i200;
  goto $bb152;
$bb142:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 782, 89} true;
  assume {:verifier.code 0} true;
  assume ($i191 == 1);
  goto $bb143;
$bb143:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 782, 112} true;
  assume {:verifier.code 0} true;
  $i194 := $load.i8($M.0, y$r_buff0_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 782, 112} true;
  assume {:verifier.code 0} true;
  $i195 := $trunc.i8.i1($i194);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 782, 127} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i195} true;
  goto $bb147, $bb149;
$bb144:
  assume !(($i191 == 1));
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 782, 93} true;
  assume {:verifier.code 0} true;
  $i192 := $load.i8($M.0, y$w_buff1_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 782, 93} true;
  assume {:verifier.code 0} true;
  $i193 := $trunc.i8.i1($i192);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 782, 108} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i193} true;
  goto $bb145, $bb146;
$bb145:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 782, 108} true;
  assume {:verifier.code 0} true;
  assume ($i193 == 1);
  goto $bb143;
$bb146:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 782, 108} true;
  assume {:verifier.code 0} true;
  assume !(($i193 == 1));
  goto $bb141;
$bb147:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 782, 127} true;
  assume {:verifier.code 0} true;
  assume ($i195 == 1);
  goto $bb148;
$bb148:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 782, 166} true;
  assume {:verifier.code 0} true;
  $i202 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 782, 166} true;
  assume {:verifier.code 0} true;
  $i203 := $trunc.i8.i1($i202);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 782, 181} true;
  assume {:verifier.code 0} true;
  $i204 := 0;
  assume {:branchcond $i203} true;
  goto $bb153, $bb154;
$bb149:
  assume !(($i195 == 1));
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 782, 131} true;
  assume {:verifier.code 0} true;
  $i196 := $load.i8($M.0, y$r_buff1_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 782, 131} true;
  assume {:verifier.code 0} true;
  $i197 := $trunc.i8.i1($i196);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 782, 54} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i197} true;
  goto $bb150, $bb151;
$bb150:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 782, 54} true;
  assume {:verifier.code 0} true;
  assume ($i197 == 1);
  goto $bb148;
$bb151:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 782, 54} true;
  assume {:verifier.code 0} true;
  assume !(($i197 == 1));
  goto $bb141;
$bb152:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 782, 54} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 782, 20} true;
  assume {:verifier.code 0} true;
  $i187 := $i201;
  goto $bb138;
$bb153:
  assume ($i203 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 782, 184} true;
  assume {:verifier.code 0} true;
  $i205 := $load.i8($M.0, y$r_buff0_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 782, 184} true;
  assume {:verifier.code 0} true;
  $i206 := $trunc.i8.i1($i205);
  assume {:verifier.code 0} true;
  $i204 := $i206;
  goto $bb155;
$bb154:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 782, 181} true;
  assume {:verifier.code 0} true;
  assume !(($i203 == 1));
  goto $bb155;
$bb155:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 782, 166} true;
  assume {:verifier.code 0} true;
  $i207 := (if ($i204 == 1) then 0 else 0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 782, 54} true;
  assume {:verifier.code 0} true;
  $i201 := $i207;
  goto $bb152;
$bb156:
  assume ($i212 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 784, 25} true;
  assume {:verifier.code 0} true;
  $i213 := $load.i32($M.0, y$mem_tmp);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 784, 7} true;
  assume {:verifier.code 0} true;
  $i214 := $i213;
  goto $bb158;
$bb157:
  assume !(($i212 == 1));
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 784, 37} true;
  assume {:verifier.code 0} true;
  $i215 := $load.i32($M.0, y);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 784, 7} true;
  assume {:verifier.code 0} true;
  $i214 := $i215;
  goto $bb158;
$bb158:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 784, 7} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 784, 5} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, y, $i214);
  call {:cexpr "y"} boogie_si_record_i32($i214);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 785, 19} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, y$flush_delayed, 0);
  call {:cexpr "y$flush_delayed"} boogie_si_record_i8(0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 786, 3} true;
  assume {:verifier.code 0} true;
  call __VERIFIER_atomic_end();
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 787, 3} true;
  assume {:verifier.code 0} true;
  call __VERIFIER_atomic_begin();
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 788, 19} true;
  assume {:verifier.code 1} true;
  call $i216 := __VERIFIER_nondet_bool();
  call {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i216);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 788, 17} true;
  assume {:verifier.code 0} true;
  $i217 := $zext.i1.i8($i216);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 788, 17} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, weak$$choice0, $i217);
  call {:cexpr "weak$$choice0"} boogie_si_record_i8($i217);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 789, 19} true;
  assume {:verifier.code 1} true;
  call $i218 := __VERIFIER_nondet_bool();
  call {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i218);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 789, 17} true;
  assume {:verifier.code 0} true;
  $i219 := $zext.i1.i8($i218);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 789, 17} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, weak$$choice2, $i219);
  call {:cexpr "weak$$choice2"} boogie_si_record_i8($i219);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 790, 21} true;
  assume {:verifier.code 0} true;
  $i220 := $load.i8($M.0, weak$$choice2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 790, 21} true;
  assume {:verifier.code 0} true;
  $i221 := $trunc.i8.i1($i220);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 790, 19} true;
  assume {:verifier.code 0} true;
  $i222 := $zext.i1.i8($i221);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 790, 19} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, y$flush_delayed, $i222);
  call {:cexpr "y$flush_delayed"} boogie_si_record_i8($i222);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 791, 15} true;
  assume {:verifier.code 0} true;
  $i223 := $load.i32($M.0, y);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 791, 13} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, y$mem_tmp, $i223);
  call {:cexpr "y$mem_tmp"} boogie_si_record_i32($i223);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 792, 8} true;
  assume {:verifier.code 0} true;
  $i224 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 792, 8} true;
  assume {:verifier.code 0} true;
  $i225 := $trunc.i8.i1($i224);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 792, 23} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i225} true;
  goto $bb159, $bb160;
$bb159:
  assume ($i225 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 792, 27} true;
  assume {:verifier.code 0} true;
  $i226 := $load.i8($M.0, y$r_buff0_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 792, 27} true;
  assume {:verifier.code 0} true;
  $i227 := $trunc.i8.i1($i226);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 792, 42} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i227} true;
  goto $bb162, $bb164;
$bb160:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 792, 23} true;
  assume {:verifier.code 0} true;
  assume !(($i225 == 1));
  goto $bb161;
$bb161:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 792, 101} true;
  assume {:verifier.code 0} true;
  $i234 := $load.i32($M.0, y);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 792, 7} true;
  assume {:verifier.code 0} true;
  $i235 := $i234;
  goto $bb172;
$bb162:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 792, 42} true;
  assume {:verifier.code 0} true;
  assume ($i227 == 1);
  goto $bb163;
$bb163:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 792, 65} true;
  assume {:verifier.code 0} true;
  $i230 := $load.i8($M.0, y$r_buff0_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 792, 65} true;
  assume {:verifier.code 0} true;
  $i231 := $trunc.i8.i1($i230);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 792, 80} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i231} true;
  goto $bb167, $bb169;
$bb164:
  assume !(($i227 == 1));
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 792, 46} true;
  assume {:verifier.code 0} true;
  $i228 := $load.i8($M.0, y$w_buff1_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 792, 46} true;
  assume {:verifier.code 0} true;
  $i229 := $trunc.i8.i1($i228);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 792, 61} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i229} true;
  goto $bb165, $bb166;
$bb165:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 792, 61} true;
  assume {:verifier.code 0} true;
  assume ($i229 == 1);
  goto $bb163;
$bb166:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 792, 61} true;
  assume {:verifier.code 0} true;
  assume !(($i229 == 1));
  goto $bb161;
$bb167:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 792, 80} true;
  assume {:verifier.code 0} true;
  assume ($i231 == 1);
  goto $bb168;
$bb168:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 792, 106} true;
  assume {:verifier.code 0} true;
  $i236 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 792, 106} true;
  assume {:verifier.code 0} true;
  $i237 := $trunc.i8.i1($i236);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 792, 121} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i237} true;
  goto $bb173, $bb174;
$bb169:
  assume !(($i231 == 1));
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 792, 84} true;
  assume {:verifier.code 0} true;
  $i232 := $load.i8($M.0, y$r_buff1_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 792, 84} true;
  assume {:verifier.code 0} true;
  $i233 := $trunc.i8.i1($i232);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 792, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i233} true;
  goto $bb170, $bb171;
$bb170:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 792, 7} true;
  assume {:verifier.code 0} true;
  assume ($i233 == 1);
  goto $bb168;
$bb171:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 792, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i233 == 1));
  goto $bb161;
$bb172:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 792, 7} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 792, 5} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, y, $i235);
  call {:cexpr "y"} boogie_si_record_i32($i235);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 793, 15} true;
  assume {:verifier.code 0} true;
  $i243 := $load.i8($M.0, weak$$choice2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 793, 15} true;
  assume {:verifier.code 0} true;
  $i244 := $trunc.i8.i1($i243);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 793, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i244} true;
  goto $bb179, $bb180;
$bb173:
  assume ($i237 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 792, 124} true;
  assume {:verifier.code 0} true;
  $i238 := $load.i8($M.0, y$r_buff0_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 792, 124} true;
  assume {:verifier.code 0} true;
  $i239 := $trunc.i8.i1($i238);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 792, 106} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i239} true;
  goto $bb176, $bb177;
$bb174:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 792, 121} true;
  assume {:verifier.code 0} true;
  assume !(($i237 == 1));
  goto $bb175;
$bb175:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 792, 153} true;
  assume {:verifier.code 0} true;
  $i242 := $load.i32($M.0, y$w_buff1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 792, 106} true;
  assume {:verifier.code 0} true;
  $i241 := $i242;
  goto $bb178;
$bb176:
  assume ($i239 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 792, 141} true;
  assume {:verifier.code 0} true;
  $i240 := $load.i32($M.0, y$w_buff0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 792, 106} true;
  assume {:verifier.code 0} true;
  $i241 := $i240;
  goto $bb178;
$bb177:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 792, 106} true;
  assume {:verifier.code 0} true;
  assume !(($i239 == 1));
  goto $bb175;
$bb178:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 792, 106} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 792, 7} true;
  assume {:verifier.code 0} true;
  $i235 := $i241;
  goto $bb172;
$bb179:
  assume ($i244 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 793, 31} true;
  assume {:verifier.code 0} true;
  $i245 := $load.i32($M.0, y$w_buff0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 793, 15} true;
  assume {:verifier.code 0} true;
  $i246 := $i245;
  goto $bb181;
$bb180:
  assume !(($i244 == 1));
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 793, 45} true;
  assume {:verifier.code 0} true;
  $i247 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 793, 45} true;
  assume {:verifier.code 0} true;
  $i248 := $trunc.i8.i1($i247);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 793, 60} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i248} true;
  goto $bb182, $bb183;
$bb181:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 793, 15} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 793, 13} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, y$w_buff0, $i246);
  call {:cexpr "y$w_buff0"} boogie_si_record_i32($i246);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 794, 15} true;
  assume {:verifier.code 0} true;
  $i266 := $load.i8($M.0, weak$$choice2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 794, 15} true;
  assume {:verifier.code 0} true;
  $i267 := $trunc.i8.i1($i266);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 794, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i267} true;
  goto $bb202, $bb203;
$bb182:
  assume ($i248 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 793, 64} true;
  assume {:verifier.code 0} true;
  $i249 := $load.i8($M.0, y$r_buff0_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 793, 64} true;
  assume {:verifier.code 0} true;
  $i250 := $trunc.i8.i1($i249);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 793, 79} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i250} true;
  goto $bb185, $bb187;
$bb183:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 793, 60} true;
  assume {:verifier.code 0} true;
  assume !(($i248 == 1));
  goto $bb184;
$bb184:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 793, 138} true;
  assume {:verifier.code 0} true;
  $i257 := $load.i32($M.0, y$w_buff0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 793, 44} true;
  assume {:verifier.code 0} true;
  $i258 := $i257;
  goto $bb195;
$bb185:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 793, 79} true;
  assume {:verifier.code 0} true;
  assume ($i250 == 1);
  goto $bb186;
$bb186:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 793, 102} true;
  assume {:verifier.code 0} true;
  $i253 := $load.i8($M.0, y$r_buff0_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 793, 102} true;
  assume {:verifier.code 0} true;
  $i254 := $trunc.i8.i1($i253);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 793, 117} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i254} true;
  goto $bb190, $bb192;
$bb187:
  assume !(($i250 == 1));
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 793, 83} true;
  assume {:verifier.code 0} true;
  $i251 := $load.i8($M.0, y$w_buff1_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 793, 83} true;
  assume {:verifier.code 0} true;
  $i252 := $trunc.i8.i1($i251);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 793, 98} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i252} true;
  goto $bb188, $bb189;
$bb188:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 793, 98} true;
  assume {:verifier.code 0} true;
  assume ($i252 == 1);
  goto $bb186;
$bb189:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 793, 98} true;
  assume {:verifier.code 0} true;
  assume !(($i252 == 1));
  goto $bb184;
$bb190:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 793, 117} true;
  assume {:verifier.code 0} true;
  assume ($i254 == 1);
  goto $bb191;
$bb191:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 793, 151} true;
  assume {:verifier.code 0} true;
  $i259 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 793, 151} true;
  assume {:verifier.code 0} true;
  $i260 := $trunc.i8.i1($i259);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 793, 166} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i260} true;
  goto $bb196, $bb197;
$bb192:
  assume !(($i254 == 1));
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 793, 121} true;
  assume {:verifier.code 0} true;
  $i255 := $load.i8($M.0, y$r_buff1_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 793, 121} true;
  assume {:verifier.code 0} true;
  $i256 := $trunc.i8.i1($i255);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 793, 44} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i256} true;
  goto $bb193, $bb194;
$bb193:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 793, 44} true;
  assume {:verifier.code 0} true;
  assume ($i256 == 1);
  goto $bb191;
$bb194:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 793, 44} true;
  assume {:verifier.code 0} true;
  assume !(($i256 == 1));
  goto $bb184;
$bb195:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 793, 44} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 793, 15} true;
  assume {:verifier.code 0} true;
  $i246 := $i258;
  goto $bb181;
$bb196:
  assume ($i260 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 793, 169} true;
  assume {:verifier.code 0} true;
  $i261 := $load.i8($M.0, y$r_buff0_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 793, 169} true;
  assume {:verifier.code 0} true;
  $i262 := $trunc.i8.i1($i261);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 793, 151} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i262} true;
  goto $bb199, $bb200;
$bb197:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 793, 166} true;
  assume {:verifier.code 0} true;
  assume !(($i260 == 1));
  goto $bb198;
$bb198:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 793, 198} true;
  assume {:verifier.code 0} true;
  $i265 := $load.i32($M.0, y$w_buff0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 793, 151} true;
  assume {:verifier.code 0} true;
  $i264 := $i265;
  goto $bb201;
$bb199:
  assume ($i262 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 793, 186} true;
  assume {:verifier.code 0} true;
  $i263 := $load.i32($M.0, y$w_buff0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 793, 151} true;
  assume {:verifier.code 0} true;
  $i264 := $i263;
  goto $bb201;
$bb200:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 793, 151} true;
  assume {:verifier.code 0} true;
  assume !(($i262 == 1));
  goto $bb198;
$bb201:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 793, 151} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 793, 44} true;
  assume {:verifier.code 0} true;
  $i258 := $i264;
  goto $bb195;
$bb202:
  assume ($i267 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 794, 31} true;
  assume {:verifier.code 0} true;
  $i268 := $load.i32($M.0, y$w_buff1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 794, 15} true;
  assume {:verifier.code 0} true;
  $i269 := $i268;
  goto $bb204;
$bb203:
  assume !(($i267 == 1));
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 794, 45} true;
  assume {:verifier.code 0} true;
  $i270 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 794, 45} true;
  assume {:verifier.code 0} true;
  $i271 := $trunc.i8.i1($i270);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 794, 60} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i271} true;
  goto $bb205, $bb206;
$bb204:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 794, 15} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 794, 13} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, y$w_buff1, $i269);
  call {:cexpr "y$w_buff1"} boogie_si_record_i32($i269);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 795, 20} true;
  assume {:verifier.code 0} true;
  $i289 := $load.i8($M.0, weak$$choice2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 795, 20} true;
  assume {:verifier.code 0} true;
  $i290 := $trunc.i8.i1($i289);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 795, 20} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i290} true;
  goto $bb225, $bb226;
$bb205:
  assume ($i271 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 794, 64} true;
  assume {:verifier.code 0} true;
  $i272 := $load.i8($M.0, y$r_buff0_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 794, 64} true;
  assume {:verifier.code 0} true;
  $i273 := $trunc.i8.i1($i272);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 794, 79} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i273} true;
  goto $bb208, $bb210;
$bb206:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 794, 60} true;
  assume {:verifier.code 0} true;
  assume !(($i271 == 1));
  goto $bb207;
$bb207:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 794, 138} true;
  assume {:verifier.code 0} true;
  $i280 := $load.i32($M.0, y$w_buff1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 794, 44} true;
  assume {:verifier.code 0} true;
  $i281 := $i280;
  goto $bb218;
$bb208:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 794, 79} true;
  assume {:verifier.code 0} true;
  assume ($i273 == 1);
  goto $bb209;
$bb209:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 794, 102} true;
  assume {:verifier.code 0} true;
  $i276 := $load.i8($M.0, y$r_buff0_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 794, 102} true;
  assume {:verifier.code 0} true;
  $i277 := $trunc.i8.i1($i276);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 794, 117} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i277} true;
  goto $bb213, $bb215;
$bb210:
  assume !(($i273 == 1));
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 794, 83} true;
  assume {:verifier.code 0} true;
  $i274 := $load.i8($M.0, y$w_buff1_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 794, 83} true;
  assume {:verifier.code 0} true;
  $i275 := $trunc.i8.i1($i274);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 794, 98} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i275} true;
  goto $bb211, $bb212;
$bb211:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 794, 98} true;
  assume {:verifier.code 0} true;
  assume ($i275 == 1);
  goto $bb209;
$bb212:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 794, 98} true;
  assume {:verifier.code 0} true;
  assume !(($i275 == 1));
  goto $bb207;
$bb213:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 794, 117} true;
  assume {:verifier.code 0} true;
  assume ($i277 == 1);
  goto $bb214;
$bb214:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 794, 151} true;
  assume {:verifier.code 0} true;
  $i282 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 794, 151} true;
  assume {:verifier.code 0} true;
  $i283 := $trunc.i8.i1($i282);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 794, 166} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i283} true;
  goto $bb219, $bb220;
$bb215:
  assume !(($i277 == 1));
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 794, 121} true;
  assume {:verifier.code 0} true;
  $i278 := $load.i8($M.0, y$r_buff1_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 794, 121} true;
  assume {:verifier.code 0} true;
  $i279 := $trunc.i8.i1($i278);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 794, 44} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i279} true;
  goto $bb216, $bb217;
$bb216:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 794, 44} true;
  assume {:verifier.code 0} true;
  assume ($i279 == 1);
  goto $bb214;
$bb217:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 794, 44} true;
  assume {:verifier.code 0} true;
  assume !(($i279 == 1));
  goto $bb207;
$bb218:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 794, 44} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 794, 15} true;
  assume {:verifier.code 0} true;
  $i269 := $i281;
  goto $bb204;
$bb219:
  assume ($i283 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 794, 169} true;
  assume {:verifier.code 0} true;
  $i284 := $load.i8($M.0, y$r_buff0_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 794, 169} true;
  assume {:verifier.code 0} true;
  $i285 := $trunc.i8.i1($i284);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 794, 151} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i285} true;
  goto $bb222, $bb223;
$bb220:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 794, 166} true;
  assume {:verifier.code 0} true;
  assume !(($i283 == 1));
  goto $bb221;
$bb221:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 794, 198} true;
  assume {:verifier.code 0} true;
  $i288 := $load.i32($M.0, y$w_buff1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 794, 151} true;
  assume {:verifier.code 0} true;
  $i287 := $i288;
  goto $bb224;
$bb222:
  assume ($i285 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 794, 186} true;
  assume {:verifier.code 0} true;
  $i286 := $load.i32($M.0, y$w_buff1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 794, 151} true;
  assume {:verifier.code 0} true;
  $i287 := $i286;
  goto $bb224;
$bb223:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 794, 151} true;
  assume {:verifier.code 0} true;
  assume !(($i285 == 1));
  goto $bb221;
$bb224:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 794, 151} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 794, 44} true;
  assume {:verifier.code 0} true;
  $i281 := $i287;
  goto $bb218;
$bb225:
  assume ($i290 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 795, 36} true;
  assume {:verifier.code 0} true;
  $i291 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 795, 36} true;
  assume {:verifier.code 0} true;
  $i292 := $trunc.i8.i1($i291);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 795, 36} true;
  assume {:verifier.code 0} true;
  $i293 := $zext.i1.i32($i292);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 795, 20} true;
  assume {:verifier.code 0} true;
  $i294 := $i293;
  goto $bb227;
$bb226:
  assume !(($i290 == 1));
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 795, 55} true;
  assume {:verifier.code 0} true;
  $i295 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 795, 55} true;
  assume {:verifier.code 0} true;
  $i296 := $trunc.i8.i1($i295);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 795, 70} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i296} true;
  goto $bb228, $bb229;
$bb227:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 795, 20} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 795, 20} true;
  assume {:verifier.code 0} true;
  $i317 := $ne.i32($i294, 0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 795, 18} true;
  assume {:verifier.code 0} true;
  $i318 := $zext.i1.i8($i317);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 795, 18} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, y$w_buff0_used, $i318);
  call {:cexpr "y$w_buff0_used"} boogie_si_record_i8($i318);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 796, 20} true;
  assume {:verifier.code 0} true;
  $i319 := $load.i8($M.0, weak$$choice2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 796, 20} true;
  assume {:verifier.code 0} true;
  $i320 := $trunc.i8.i1($i319);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 796, 20} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i320} true;
  goto $bb248, $bb249;
$bb228:
  assume ($i296 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 795, 74} true;
  assume {:verifier.code 0} true;
  $i297 := $load.i8($M.0, y$r_buff0_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 795, 74} true;
  assume {:verifier.code 0} true;
  $i298 := $trunc.i8.i1($i297);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 795, 89} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i298} true;
  goto $bb231, $bb233;
$bb229:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 795, 70} true;
  assume {:verifier.code 0} true;
  assume !(($i296 == 1));
  goto $bb230;
$bb230:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 795, 148} true;
  assume {:verifier.code 0} true;
  $i305 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 795, 148} true;
  assume {:verifier.code 0} true;
  $i306 := $trunc.i8.i1($i305);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 795, 148} true;
  assume {:verifier.code 0} true;
  $i307 := $zext.i1.i32($i306);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 795, 54} true;
  assume {:verifier.code 0} true;
  $i308 := $i307;
  goto $bb241;
$bb231:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 795, 89} true;
  assume {:verifier.code 0} true;
  assume ($i298 == 1);
  goto $bb232;
$bb232:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 795, 112} true;
  assume {:verifier.code 0} true;
  $i301 := $load.i8($M.0, y$r_buff0_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 795, 112} true;
  assume {:verifier.code 0} true;
  $i302 := $trunc.i8.i1($i301);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 795, 127} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i302} true;
  goto $bb236, $bb238;
$bb233:
  assume !(($i298 == 1));
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 795, 93} true;
  assume {:verifier.code 0} true;
  $i299 := $load.i8($M.0, y$w_buff1_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 795, 93} true;
  assume {:verifier.code 0} true;
  $i300 := $trunc.i8.i1($i299);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 795, 108} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i300} true;
  goto $bb234, $bb235;
$bb234:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 795, 108} true;
  assume {:verifier.code 0} true;
  assume ($i300 == 1);
  goto $bb232;
$bb235:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 795, 108} true;
  assume {:verifier.code 0} true;
  assume !(($i300 == 1));
  goto $bb230;
$bb236:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 795, 127} true;
  assume {:verifier.code 0} true;
  assume ($i302 == 1);
  goto $bb237;
$bb237:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 795, 166} true;
  assume {:verifier.code 0} true;
  $i309 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 795, 166} true;
  assume {:verifier.code 0} true;
  $i310 := $trunc.i8.i1($i309);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 795, 181} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i310} true;
  goto $bb242, $bb243;
$bb238:
  assume !(($i302 == 1));
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 795, 131} true;
  assume {:verifier.code 0} true;
  $i303 := $load.i8($M.0, y$r_buff1_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 795, 131} true;
  assume {:verifier.code 0} true;
  $i304 := $trunc.i8.i1($i303);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 795, 54} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i304} true;
  goto $bb239, $bb240;
$bb239:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 795, 54} true;
  assume {:verifier.code 0} true;
  assume ($i304 == 1);
  goto $bb237;
$bb240:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 795, 54} true;
  assume {:verifier.code 0} true;
  assume !(($i304 == 1));
  goto $bb230;
$bb241:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 795, 54} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 795, 20} true;
  assume {:verifier.code 0} true;
  $i294 := $i308;
  goto $bb227;
$bb242:
  assume ($i310 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 795, 184} true;
  assume {:verifier.code 0} true;
  $i311 := $load.i8($M.0, y$r_buff0_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 795, 184} true;
  assume {:verifier.code 0} true;
  $i312 := $trunc.i8.i1($i311);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 795, 166} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i312} true;
  goto $bb245, $bb246;
$bb243:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 795, 181} true;
  assume {:verifier.code 0} true;
  assume !(($i310 == 1));
  goto $bb244;
$bb244:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 795, 212} true;
  assume {:verifier.code 0} true;
  $i314 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 795, 212} true;
  assume {:verifier.code 0} true;
  $i315 := $trunc.i8.i1($i314);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 795, 212} true;
  assume {:verifier.code 0} true;
  $i316 := $zext.i1.i32($i315);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 795, 166} true;
  assume {:verifier.code 0} true;
  $i313 := $i316;
  goto $bb247;
$bb245:
  assume ($i312 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 795, 166} true;
  assume {:verifier.code 0} true;
  $i313 := 0;
  goto $bb247;
$bb246:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 795, 166} true;
  assume {:verifier.code 0} true;
  assume !(($i312 == 1));
  goto $bb244;
$bb247:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 795, 166} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 795, 54} true;
  assume {:verifier.code 0} true;
  $i308 := $i313;
  goto $bb241;
$bb248:
  assume ($i320 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 796, 36} true;
  assume {:verifier.code 0} true;
  $i321 := $load.i8($M.0, y$w_buff1_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 796, 36} true;
  assume {:verifier.code 0} true;
  $i322 := $trunc.i8.i1($i321);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 796, 36} true;
  assume {:verifier.code 0} true;
  $i323 := $zext.i1.i32($i322);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 796, 20} true;
  assume {:verifier.code 0} true;
  $i324 := $i323;
  goto $bb250;
$bb249:
  assume !(($i320 == 1));
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 796, 55} true;
  assume {:verifier.code 0} true;
  $i325 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 796, 55} true;
  assume {:verifier.code 0} true;
  $i326 := $trunc.i8.i1($i325);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 796, 70} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i326} true;
  goto $bb251, $bb252;
$bb250:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 796, 20} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 796, 20} true;
  assume {:verifier.code 0} true;
  $i345 := $ne.i32($i324, 0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 796, 18} true;
  assume {:verifier.code 0} true;
  $i346 := $zext.i1.i8($i345);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 796, 18} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, y$w_buff1_used, $i346);
  call {:cexpr "y$w_buff1_used"} boogie_si_record_i8($i346);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 797, 20} true;
  assume {:verifier.code 0} true;
  $i347 := $load.i8($M.0, weak$$choice2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 797, 20} true;
  assume {:verifier.code 0} true;
  $i348 := $trunc.i8.i1($i347);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 797, 20} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i348} true;
  goto $bb268, $bb269;
$bb251:
  assume ($i326 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 796, 74} true;
  assume {:verifier.code 0} true;
  $i327 := $load.i8($M.0, y$r_buff0_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 796, 74} true;
  assume {:verifier.code 0} true;
  $i328 := $trunc.i8.i1($i327);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 796, 89} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i328} true;
  goto $bb254, $bb256;
$bb252:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 796, 70} true;
  assume {:verifier.code 0} true;
  assume !(($i326 == 1));
  goto $bb253;
$bb253:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 796, 148} true;
  assume {:verifier.code 0} true;
  $i335 := $load.i8($M.0, y$w_buff1_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 796, 148} true;
  assume {:verifier.code 0} true;
  $i336 := $trunc.i8.i1($i335);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 796, 148} true;
  assume {:verifier.code 0} true;
  $i337 := $zext.i1.i32($i336);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 796, 54} true;
  assume {:verifier.code 0} true;
  $i338 := $i337;
  goto $bb264;
$bb254:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 796, 89} true;
  assume {:verifier.code 0} true;
  assume ($i328 == 1);
  goto $bb255;
$bb255:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 796, 112} true;
  assume {:verifier.code 0} true;
  $i331 := $load.i8($M.0, y$r_buff0_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 796, 112} true;
  assume {:verifier.code 0} true;
  $i332 := $trunc.i8.i1($i331);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 796, 127} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i332} true;
  goto $bb259, $bb261;
$bb256:
  assume !(($i328 == 1));
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 796, 93} true;
  assume {:verifier.code 0} true;
  $i329 := $load.i8($M.0, y$w_buff1_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 796, 93} true;
  assume {:verifier.code 0} true;
  $i330 := $trunc.i8.i1($i329);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 796, 108} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i330} true;
  goto $bb257, $bb258;
$bb257:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 796, 108} true;
  assume {:verifier.code 0} true;
  assume ($i330 == 1);
  goto $bb255;
$bb258:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 796, 108} true;
  assume {:verifier.code 0} true;
  assume !(($i330 == 1));
  goto $bb253;
$bb259:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 796, 127} true;
  assume {:verifier.code 0} true;
  assume ($i332 == 1);
  goto $bb260;
$bb260:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 796, 166} true;
  assume {:verifier.code 0} true;
  $i339 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 796, 166} true;
  assume {:verifier.code 0} true;
  $i340 := $trunc.i8.i1($i339);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 796, 181} true;
  assume {:verifier.code 0} true;
  $i341 := 0;
  assume {:branchcond $i340} true;
  goto $bb265, $bb266;
$bb261:
  assume !(($i332 == 1));
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 796, 131} true;
  assume {:verifier.code 0} true;
  $i333 := $load.i8($M.0, y$r_buff1_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 796, 131} true;
  assume {:verifier.code 0} true;
  $i334 := $trunc.i8.i1($i333);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 796, 54} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i334} true;
  goto $bb262, $bb263;
$bb262:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 796, 54} true;
  assume {:verifier.code 0} true;
  assume ($i334 == 1);
  goto $bb260;
$bb263:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 796, 54} true;
  assume {:verifier.code 0} true;
  assume !(($i334 == 1));
  goto $bb253;
$bb264:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 796, 54} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 796, 20} true;
  assume {:verifier.code 0} true;
  $i324 := $i338;
  goto $bb250;
$bb265:
  assume ($i340 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 796, 184} true;
  assume {:verifier.code 0} true;
  $i342 := $load.i8($M.0, y$r_buff0_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 796, 184} true;
  assume {:verifier.code 0} true;
  $i343 := $trunc.i8.i1($i342);
  assume {:verifier.code 0} true;
  $i341 := $i343;
  goto $bb267;
$bb266:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 796, 181} true;
  assume {:verifier.code 0} true;
  assume !(($i340 == 1));
  goto $bb267;
$bb267:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 796, 166} true;
  assume {:verifier.code 0} true;
  $i344 := (if ($i341 == 1) then 0 else 0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 796, 54} true;
  assume {:verifier.code 0} true;
  $i338 := $i344;
  goto $bb264;
$bb268:
  assume ($i348 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 797, 36} true;
  assume {:verifier.code 0} true;
  $i349 := $load.i8($M.0, y$r_buff0_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 797, 36} true;
  assume {:verifier.code 0} true;
  $i350 := $trunc.i8.i1($i349);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 797, 36} true;
  assume {:verifier.code 0} true;
  $i351 := $zext.i1.i32($i350);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 797, 20} true;
  assume {:verifier.code 0} true;
  $i352 := $i351;
  goto $bb270;
$bb269:
  assume !(($i348 == 1));
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 797, 55} true;
  assume {:verifier.code 0} true;
  $i353 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 797, 55} true;
  assume {:verifier.code 0} true;
  $i354 := $trunc.i8.i1($i353);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 797, 70} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i354} true;
  goto $bb271, $bb272;
$bb270:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 797, 20} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 797, 20} true;
  assume {:verifier.code 0} true;
  $i375 := $ne.i32($i352, 0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 797, 18} true;
  assume {:verifier.code 0} true;
  $i376 := $zext.i1.i8($i375);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 797, 18} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, y$r_buff0_thd2, $i376);
  call {:cexpr "y$r_buff0_thd2"} boogie_si_record_i8($i376);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 798, 20} true;
  assume {:verifier.code 0} true;
  $i377 := $load.i8($M.0, weak$$choice2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 798, 20} true;
  assume {:verifier.code 0} true;
  $i378 := $trunc.i8.i1($i377);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 798, 20} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i378} true;
  goto $bb291, $bb292;
$bb271:
  assume ($i354 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 797, 74} true;
  assume {:verifier.code 0} true;
  $i355 := $load.i8($M.0, y$r_buff0_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 797, 74} true;
  assume {:verifier.code 0} true;
  $i356 := $trunc.i8.i1($i355);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 797, 89} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i356} true;
  goto $bb274, $bb276;
$bb272:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 797, 70} true;
  assume {:verifier.code 0} true;
  assume !(($i354 == 1));
  goto $bb273;
$bb273:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 797, 148} true;
  assume {:verifier.code 0} true;
  $i363 := $load.i8($M.0, y$r_buff0_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 797, 148} true;
  assume {:verifier.code 0} true;
  $i364 := $trunc.i8.i1($i363);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 797, 148} true;
  assume {:verifier.code 0} true;
  $i365 := $zext.i1.i32($i364);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 797, 54} true;
  assume {:verifier.code 0} true;
  $i366 := $i365;
  goto $bb284;
$bb274:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 797, 89} true;
  assume {:verifier.code 0} true;
  assume ($i356 == 1);
  goto $bb275;
$bb275:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 797, 112} true;
  assume {:verifier.code 0} true;
  $i359 := $load.i8($M.0, y$r_buff0_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 797, 112} true;
  assume {:verifier.code 0} true;
  $i360 := $trunc.i8.i1($i359);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 797, 127} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i360} true;
  goto $bb279, $bb281;
$bb276:
  assume !(($i356 == 1));
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 797, 93} true;
  assume {:verifier.code 0} true;
  $i357 := $load.i8($M.0, y$w_buff1_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 797, 93} true;
  assume {:verifier.code 0} true;
  $i358 := $trunc.i8.i1($i357);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 797, 108} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i358} true;
  goto $bb277, $bb278;
$bb277:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 797, 108} true;
  assume {:verifier.code 0} true;
  assume ($i358 == 1);
  goto $bb275;
$bb278:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 797, 108} true;
  assume {:verifier.code 0} true;
  assume !(($i358 == 1));
  goto $bb273;
$bb279:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 797, 127} true;
  assume {:verifier.code 0} true;
  assume ($i360 == 1);
  goto $bb280;
$bb280:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 797, 166} true;
  assume {:verifier.code 0} true;
  $i367 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 797, 166} true;
  assume {:verifier.code 0} true;
  $i368 := $trunc.i8.i1($i367);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 797, 181} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i368} true;
  goto $bb285, $bb286;
$bb281:
  assume !(($i360 == 1));
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 797, 131} true;
  assume {:verifier.code 0} true;
  $i361 := $load.i8($M.0, y$r_buff1_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 797, 131} true;
  assume {:verifier.code 0} true;
  $i362 := $trunc.i8.i1($i361);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 797, 54} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i362} true;
  goto $bb282, $bb283;
$bb282:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 797, 54} true;
  assume {:verifier.code 0} true;
  assume ($i362 == 1);
  goto $bb280;
$bb283:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 797, 54} true;
  assume {:verifier.code 0} true;
  assume !(($i362 == 1));
  goto $bb273;
$bb284:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 797, 54} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 797, 20} true;
  assume {:verifier.code 0} true;
  $i352 := $i366;
  goto $bb270;
$bb285:
  assume ($i368 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 797, 184} true;
  assume {:verifier.code 0} true;
  $i369 := $load.i8($M.0, y$r_buff0_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 797, 184} true;
  assume {:verifier.code 0} true;
  $i370 := $trunc.i8.i1($i369);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 797, 166} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i370} true;
  goto $bb288, $bb289;
$bb286:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 797, 181} true;
  assume {:verifier.code 0} true;
  assume !(($i368 == 1));
  goto $bb287;
$bb287:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 797, 212} true;
  assume {:verifier.code 0} true;
  $i372 := $load.i8($M.0, y$r_buff0_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 797, 212} true;
  assume {:verifier.code 0} true;
  $i373 := $trunc.i8.i1($i372);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 797, 212} true;
  assume {:verifier.code 0} true;
  $i374 := $zext.i1.i32($i373);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 797, 166} true;
  assume {:verifier.code 0} true;
  $i371 := $i374;
  goto $bb290;
$bb288:
  assume ($i370 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 797, 166} true;
  assume {:verifier.code 0} true;
  $i371 := 0;
  goto $bb290;
$bb289:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 797, 166} true;
  assume {:verifier.code 0} true;
  assume !(($i370 == 1));
  goto $bb287;
$bb290:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 797, 166} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 797, 54} true;
  assume {:verifier.code 0} true;
  $i366 := $i371;
  goto $bb284;
$bb291:
  assume ($i378 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 798, 36} true;
  assume {:verifier.code 0} true;
  $i379 := $load.i8($M.0, y$r_buff1_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 798, 36} true;
  assume {:verifier.code 0} true;
  $i380 := $trunc.i8.i1($i379);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 798, 36} true;
  assume {:verifier.code 0} true;
  $i381 := $zext.i1.i32($i380);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 798, 20} true;
  assume {:verifier.code 0} true;
  $i382 := $i381;
  goto $bb293;
$bb292:
  assume !(($i378 == 1));
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 798, 55} true;
  assume {:verifier.code 0} true;
  $i383 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 798, 55} true;
  assume {:verifier.code 0} true;
  $i384 := $trunc.i8.i1($i383);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 798, 70} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i384} true;
  goto $bb294, $bb295;
$bb293:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 798, 20} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 798, 20} true;
  assume {:verifier.code 0} true;
  $i403 := $ne.i32($i382, 0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 798, 18} true;
  assume {:verifier.code 0} true;
  $i404 := $zext.i1.i8($i403);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 798, 18} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, y$r_buff1_thd2, $i404);
  call {:cexpr "y$r_buff1_thd2"} boogie_si_record_i8($i404);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 799, 25} true;
  assume {:verifier.code 0} true;
  $i405 := $load.i32($M.0, y);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 799, 23} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, __unbuffered_p1_EBX, $i405);
  call {:cexpr "__unbuffered_p1_EBX"} boogie_si_record_i32($i405);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 800, 7} true;
  assume {:verifier.code 0} true;
  $i406 := $load.i8($M.0, y$flush_delayed);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 800, 7} true;
  assume {:verifier.code 0} true;
  $i407 := $trunc.i8.i1($i406);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 800, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i407} true;
  goto $bb311, $bb312;
$bb294:
  assume ($i384 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 798, 74} true;
  assume {:verifier.code 0} true;
  $i385 := $load.i8($M.0, y$r_buff0_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 798, 74} true;
  assume {:verifier.code 0} true;
  $i386 := $trunc.i8.i1($i385);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 798, 89} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i386} true;
  goto $bb297, $bb299;
$bb295:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 798, 70} true;
  assume {:verifier.code 0} true;
  assume !(($i384 == 1));
  goto $bb296;
$bb296:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 798, 148} true;
  assume {:verifier.code 0} true;
  $i393 := $load.i8($M.0, y$r_buff1_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 798, 148} true;
  assume {:verifier.code 0} true;
  $i394 := $trunc.i8.i1($i393);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 798, 148} true;
  assume {:verifier.code 0} true;
  $i395 := $zext.i1.i32($i394);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 798, 54} true;
  assume {:verifier.code 0} true;
  $i396 := $i395;
  goto $bb307;
$bb297:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 798, 89} true;
  assume {:verifier.code 0} true;
  assume ($i386 == 1);
  goto $bb298;
$bb298:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 798, 112} true;
  assume {:verifier.code 0} true;
  $i389 := $load.i8($M.0, y$r_buff0_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 798, 112} true;
  assume {:verifier.code 0} true;
  $i390 := $trunc.i8.i1($i389);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 798, 127} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i390} true;
  goto $bb302, $bb304;
$bb299:
  assume !(($i386 == 1));
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 798, 93} true;
  assume {:verifier.code 0} true;
  $i387 := $load.i8($M.0, y$w_buff1_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 798, 93} true;
  assume {:verifier.code 0} true;
  $i388 := $trunc.i8.i1($i387);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 798, 108} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i388} true;
  goto $bb300, $bb301;
$bb300:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 798, 108} true;
  assume {:verifier.code 0} true;
  assume ($i388 == 1);
  goto $bb298;
$bb301:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 798, 108} true;
  assume {:verifier.code 0} true;
  assume !(($i388 == 1));
  goto $bb296;
$bb302:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 798, 127} true;
  assume {:verifier.code 0} true;
  assume ($i390 == 1);
  goto $bb303;
$bb303:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 798, 166} true;
  assume {:verifier.code 0} true;
  $i397 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 798, 166} true;
  assume {:verifier.code 0} true;
  $i398 := $trunc.i8.i1($i397);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 798, 181} true;
  assume {:verifier.code 0} true;
  $i399 := 0;
  assume {:branchcond $i398} true;
  goto $bb308, $bb309;
$bb304:
  assume !(($i390 == 1));
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 798, 131} true;
  assume {:verifier.code 0} true;
  $i391 := $load.i8($M.0, y$r_buff1_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 798, 131} true;
  assume {:verifier.code 0} true;
  $i392 := $trunc.i8.i1($i391);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 798, 54} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i392} true;
  goto $bb305, $bb306;
$bb305:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 798, 54} true;
  assume {:verifier.code 0} true;
  assume ($i392 == 1);
  goto $bb303;
$bb306:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 798, 54} true;
  assume {:verifier.code 0} true;
  assume !(($i392 == 1));
  goto $bb296;
$bb307:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 798, 54} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 798, 20} true;
  assume {:verifier.code 0} true;
  $i382 := $i396;
  goto $bb293;
$bb308:
  assume ($i398 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 798, 184} true;
  assume {:verifier.code 0} true;
  $i400 := $load.i8($M.0, y$r_buff0_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 798, 184} true;
  assume {:verifier.code 0} true;
  $i401 := $trunc.i8.i1($i400);
  assume {:verifier.code 0} true;
  $i399 := $i401;
  goto $bb310;
$bb309:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 798, 181} true;
  assume {:verifier.code 0} true;
  assume !(($i398 == 1));
  goto $bb310;
$bb310:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 798, 166} true;
  assume {:verifier.code 0} true;
  $i402 := (if ($i399 == 1) then 0 else 0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 798, 54} true;
  assume {:verifier.code 0} true;
  $i396 := $i402;
  goto $bb307;
$bb311:
  assume ($i407 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 800, 25} true;
  assume {:verifier.code 0} true;
  $i408 := $load.i32($M.0, y$mem_tmp);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 800, 7} true;
  assume {:verifier.code 0} true;
  $i409 := $i408;
  goto $bb313;
$bb312:
  assume !(($i407 == 1));
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 800, 37} true;
  assume {:verifier.code 0} true;
  $i410 := $load.i32($M.0, y);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 800, 7} true;
  assume {:verifier.code 0} true;
  $i409 := $i410;
  goto $bb313;
$bb313:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 800, 7} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 800, 5} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, y, $i409);
  call {:cexpr "y"} boogie_si_record_i32($i409);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 801, 19} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, y$flush_delayed, 0);
  call {:cexpr "y$flush_delayed"} boogie_si_record_i8(0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 802, 3} true;
  assume {:verifier.code 0} true;
  call __VERIFIER_atomic_end();
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 803, 3} true;
  assume {:verifier.code 0} true;
  call __VERIFIER_atomic_begin();
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 804, 7} true;
  assume {:verifier.code 0} true;
  $i411 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 804, 7} true;
  assume {:verifier.code 0} true;
  $i412 := $trunc.i8.i1($i411);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 804, 22} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i412} true;
  goto $bb314, $bb315;
$bb314:
  assume ($i412 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 804, 25} true;
  assume {:verifier.code 0} true;
  $i413 := $load.i8($M.0, y$r_buff0_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 804, 25} true;
  assume {:verifier.code 0} true;
  $i414 := $trunc.i8.i1($i413);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 804, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i414} true;
  goto $bb317, $bb318;
$bb315:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 804, 22} true;
  assume {:verifier.code 0} true;
  assume !(($i412 == 1));
  goto $bb316;
$bb316:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 804, 55} true;
  assume {:verifier.code 0} true;
  $i417 := $load.i8($M.0, y$w_buff1_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 804, 55} true;
  assume {:verifier.code 0} true;
  $i418 := $trunc.i8.i1($i417);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 804, 70} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i418} true;
  goto $bb320, $bb321;
$bb317:
  assume ($i414 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 804, 42} true;
  assume {:verifier.code 0} true;
  $i415 := $load.i32($M.0, y$w_buff0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 804, 7} true;
  assume {:verifier.code 0} true;
  $i416 := $i415;
  goto $bb319;
$bb318:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 804, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i414 == 1));
  goto $bb316;
$bb319:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 804, 7} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 804, 5} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, y, $i416);
  call {:cexpr "y"} boogie_si_record_i32($i416);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 805, 20} true;
  assume {:verifier.code 0} true;
  $i424 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 805, 20} true;
  assume {:verifier.code 0} true;
  $i425 := $trunc.i8.i1($i424);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 805, 35} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i425} true;
  goto $bb326, $bb327;
$bb320:
  assume ($i418 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 804, 73} true;
  assume {:verifier.code 0} true;
  $i419 := $load.i8($M.0, y$r_buff1_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 804, 73} true;
  assume {:verifier.code 0} true;
  $i420 := $trunc.i8.i1($i419);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 804, 55} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i420} true;
  goto $bb323, $bb324;
$bb321:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 804, 70} true;
  assume {:verifier.code 0} true;
  assume !(($i418 == 1));
  goto $bb322;
$bb322:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 804, 102} true;
  assume {:verifier.code 0} true;
  $i423 := $load.i32($M.0, y);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 804, 55} true;
  assume {:verifier.code 0} true;
  $i422 := $i423;
  goto $bb325;
$bb323:
  assume ($i420 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 804, 90} true;
  assume {:verifier.code 0} true;
  $i421 := $load.i32($M.0, y$w_buff1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 804, 55} true;
  assume {:verifier.code 0} true;
  $i422 := $i421;
  goto $bb325;
$bb324:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 804, 55} true;
  assume {:verifier.code 0} true;
  assume !(($i420 == 1));
  goto $bb322;
$bb325:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 804, 55} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 804, 7} true;
  assume {:verifier.code 0} true;
  $i416 := $i422;
  goto $bb319;
$bb326:
  assume ($i425 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 805, 38} true;
  assume {:verifier.code 0} true;
  $i426 := $load.i8($M.0, y$r_buff0_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 805, 38} true;
  assume {:verifier.code 0} true;
  $i427 := $trunc.i8.i1($i426);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 805, 20} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i427} true;
  goto $bb329, $bb330;
$bb327:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 805, 35} true;
  assume {:verifier.code 0} true;
  assume !(($i425 == 1));
  goto $bb328;
$bb328:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 805, 66} true;
  assume {:verifier.code 0} true;
  $i429 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 805, 66} true;
  assume {:verifier.code 0} true;
  $i430 := $trunc.i8.i1($i429);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 805, 66} true;
  assume {:verifier.code 0} true;
  $i431 := $zext.i1.i32($i430);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 805, 20} true;
  assume {:verifier.code 0} true;
  $i428 := $i431;
  goto $bb331;
$bb329:
  assume ($i427 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 805, 20} true;
  assume {:verifier.code 0} true;
  $i428 := 0;
  goto $bb331;
$bb330:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 805, 20} true;
  assume {:verifier.code 0} true;
  assume !(($i427 == 1));
  goto $bb328;
$bb331:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 805, 20} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 805, 20} true;
  assume {:verifier.code 0} true;
  $i432 := $ne.i32($i428, 0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 805, 18} true;
  assume {:verifier.code 0} true;
  $i433 := $zext.i1.i8($i432);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 805, 18} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, y$w_buff0_used, $i433);
  call {:cexpr "y$w_buff0_used"} boogie_si_record_i8($i433);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 806, 20} true;
  assume {:verifier.code 0} true;
  $i434 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 806, 20} true;
  assume {:verifier.code 0} true;
  $i435 := $trunc.i8.i1($i434);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 806, 35} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i435} true;
  goto $bb332, $bb333;
$bb332:
  assume ($i435 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 806, 38} true;
  assume {:verifier.code 0} true;
  $i436 := $load.i8($M.0, y$r_buff0_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 806, 38} true;
  assume {:verifier.code 0} true;
  $i437 := $trunc.i8.i1($i436);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 806, 53} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i437} true;
  goto $bb335, $bb337;
$bb333:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 806, 35} true;
  assume {:verifier.code 0} true;
  assume !(($i435 == 1));
  goto $bb334;
$bb334:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 806, 56} true;
  assume {:verifier.code 0} true;
  $i438 := $load.i8($M.0, y$w_buff1_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 806, 56} true;
  assume {:verifier.code 0} true;
  $i439 := $trunc.i8.i1($i438);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 806, 71} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i439} true;
  goto $bb338, $bb339;
$bb335:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 806, 53} true;
  assume {:verifier.code 0} true;
  assume ($i437 == 1);
  goto $bb336;
$bb336:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 806, 20} true;
  assume {:verifier.code 0} true;
  $i442 := 0;
  goto $bb343;
$bb337:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 806, 53} true;
  assume {:verifier.code 0} true;
  assume !(($i437 == 1));
  goto $bb334;
$bb338:
  assume ($i439 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 806, 74} true;
  assume {:verifier.code 0} true;
  $i440 := $load.i8($M.0, y$r_buff1_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 806, 74} true;
  assume {:verifier.code 0} true;
  $i441 := $trunc.i8.i1($i440);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 806, 20} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i441} true;
  goto $bb341, $bb342;
$bb339:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 806, 71} true;
  assume {:verifier.code 0} true;
  assume !(($i439 == 1));
  goto $bb340;
$bb340:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 806, 102} true;
  assume {:verifier.code 0} true;
  $i443 := $load.i8($M.0, y$w_buff1_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 806, 102} true;
  assume {:verifier.code 0} true;
  $i444 := $trunc.i8.i1($i443);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 806, 102} true;
  assume {:verifier.code 0} true;
  $i445 := $zext.i1.i32($i444);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 806, 20} true;
  assume {:verifier.code 0} true;
  $i442 := $i445;
  goto $bb343;
$bb341:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 806, 20} true;
  assume {:verifier.code 0} true;
  assume ($i441 == 1);
  goto $bb336;
$bb342:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 806, 20} true;
  assume {:verifier.code 0} true;
  assume !(($i441 == 1));
  goto $bb340;
$bb343:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 806, 20} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 806, 20} true;
  assume {:verifier.code 0} true;
  $i446 := $ne.i32($i442, 0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 806, 18} true;
  assume {:verifier.code 0} true;
  $i447 := $zext.i1.i8($i446);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 806, 18} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, y$w_buff1_used, $i447);
  call {:cexpr "y$w_buff1_used"} boogie_si_record_i8($i447);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 807, 20} true;
  assume {:verifier.code 0} true;
  $i448 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 807, 20} true;
  assume {:verifier.code 0} true;
  $i449 := $trunc.i8.i1($i448);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 807, 35} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i449} true;
  goto $bb344, $bb345;
$bb344:
  assume ($i449 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 807, 38} true;
  assume {:verifier.code 0} true;
  $i450 := $load.i8($M.0, y$r_buff0_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 807, 38} true;
  assume {:verifier.code 0} true;
  $i451 := $trunc.i8.i1($i450);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 807, 20} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i451} true;
  goto $bb347, $bb348;
$bb345:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 807, 35} true;
  assume {:verifier.code 0} true;
  assume !(($i449 == 1));
  goto $bb346;
$bb346:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 807, 66} true;
  assume {:verifier.code 0} true;
  $i453 := $load.i8($M.0, y$r_buff0_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 807, 66} true;
  assume {:verifier.code 0} true;
  $i454 := $trunc.i8.i1($i453);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 807, 66} true;
  assume {:verifier.code 0} true;
  $i455 := $zext.i1.i32($i454);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 807, 20} true;
  assume {:verifier.code 0} true;
  $i452 := $i455;
  goto $bb349;
$bb347:
  assume ($i451 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 807, 20} true;
  assume {:verifier.code 0} true;
  $i452 := 0;
  goto $bb349;
$bb348:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 807, 20} true;
  assume {:verifier.code 0} true;
  assume !(($i451 == 1));
  goto $bb346;
$bb349:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 807, 20} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 807, 20} true;
  assume {:verifier.code 0} true;
  $i456 := $ne.i32($i452, 0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 807, 18} true;
  assume {:verifier.code 0} true;
  $i457 := $zext.i1.i8($i456);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 807, 18} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, y$r_buff0_thd2, $i457);
  call {:cexpr "y$r_buff0_thd2"} boogie_si_record_i8($i457);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 808, 20} true;
  assume {:verifier.code 0} true;
  $i458 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 808, 20} true;
  assume {:verifier.code 0} true;
  $i459 := $trunc.i8.i1($i458);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 808, 35} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i459} true;
  goto $bb350, $bb351;
$bb350:
  assume ($i459 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 808, 38} true;
  assume {:verifier.code 0} true;
  $i460 := $load.i8($M.0, y$r_buff0_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 808, 38} true;
  assume {:verifier.code 0} true;
  $i461 := $trunc.i8.i1($i460);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 808, 53} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i461} true;
  goto $bb353, $bb355;
$bb351:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 808, 35} true;
  assume {:verifier.code 0} true;
  assume !(($i459 == 1));
  goto $bb352;
$bb352:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 808, 56} true;
  assume {:verifier.code 0} true;
  $i462 := $load.i8($M.0, y$w_buff1_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 808, 56} true;
  assume {:verifier.code 0} true;
  $i463 := $trunc.i8.i1($i462);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 808, 71} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i463} true;
  goto $bb356, $bb357;
$bb353:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 808, 53} true;
  assume {:verifier.code 0} true;
  assume ($i461 == 1);
  goto $bb354;
$bb354:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 808, 20} true;
  assume {:verifier.code 0} true;
  $i466 := 0;
  goto $bb361;
$bb355:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 808, 53} true;
  assume {:verifier.code 0} true;
  assume !(($i461 == 1));
  goto $bb352;
$bb356:
  assume ($i463 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 808, 74} true;
  assume {:verifier.code 0} true;
  $i464 := $load.i8($M.0, y$r_buff1_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 808, 74} true;
  assume {:verifier.code 0} true;
  $i465 := $trunc.i8.i1($i464);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 808, 20} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i465} true;
  goto $bb359, $bb360;
$bb357:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 808, 71} true;
  assume {:verifier.code 0} true;
  assume !(($i463 == 1));
  goto $bb358;
$bb358:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 808, 102} true;
  assume {:verifier.code 0} true;
  $i467 := $load.i8($M.0, y$r_buff1_thd2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 808, 102} true;
  assume {:verifier.code 0} true;
  $i468 := $trunc.i8.i1($i467);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 808, 102} true;
  assume {:verifier.code 0} true;
  $i469 := $zext.i1.i32($i468);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 808, 20} true;
  assume {:verifier.code 0} true;
  $i466 := $i469;
  goto $bb361;
$bb359:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 808, 20} true;
  assume {:verifier.code 0} true;
  assume ($i465 == 1);
  goto $bb354;
$bb360:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 808, 20} true;
  assume {:verifier.code 0} true;
  assume !(($i465 == 1));
  goto $bb358;
$bb361:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 808, 20} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 808, 20} true;
  assume {:verifier.code 0} true;
  $i470 := $ne.i32($i466, 0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 808, 18} true;
  assume {:verifier.code 0} true;
  $i471 := $zext.i1.i8($i470);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 808, 18} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, y$r_buff1_thd2, $i471);
  call {:cexpr "y$r_buff1_thd2"} boogie_si_record_i8($i471);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 809, 3} true;
  assume {:verifier.code 0} true;
  call __VERIFIER_atomic_end();
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 810, 3} true;
  assume {:verifier.code 0} true;
  call __VERIFIER_atomic_begin();
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 811, 22} true;
  assume {:verifier.code 0} true;
  $i472 := $load.i32($M.0, __unbuffered_cnt);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 811, 39} true;
  assume {:verifier.code 0} true;
  $i473 := $add.i32($i472, 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 811, 20} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, __unbuffered_cnt, $i473);
  call {:cexpr "__unbuffered_cnt"} boogie_si_record_i32($i473);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 812, 3} true;
  assume {:verifier.code 0} true;
  call __VERIFIER_atomic_end();
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 813, 3} true;
  assume {:verifier.code 0} true;
  $r := $0.ref;
  $exn := false;
  return;
}
const main: ref;
axiom (main == $sub.ref(0, 39091));
procedure {:entrypoint} main()
  returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i8;
  var $i7: i8;
  var $i8: i1;
  var $i9: i32;
  var $i10: i8;
  var $i11: i1;
  var $i12: i8;
  var $i13: i1;
  var $i14: i32;
  var $i16: i8;
  var $i17: i1;
  var $i18: i8;
  var $i19: i1;
  var $i20: i32;
  var $i22: i32;
  var $i21: i32;
  var $i15: i32;
  var $i23: i8;
  var $i24: i1;
  var $i25: i8;
  var $i26: i1;
  var $i28: i8;
  var $i29: i1;
  var $i30: i32;
  var $i27: i32;
  var $i31: i1;
  var $i32: i8;
  var $i33: i8;
  var $i34: i1;
  var $i35: i8;
  var $i36: i1;
  var $i37: i8;
  var $i38: i1;
  var $i39: i8;
  var $i40: i1;
  var $i42: i8;
  var $i43: i1;
  var $i44: i32;
  var $i41: i32;
  var $i45: i1;
  var $i46: i8;
  var $i47: i8;
  var $i48: i1;
  var $i49: i8;
  var $i50: i1;
  var $i52: i8;
  var $i53: i1;
  var $i54: i32;
  var $i51: i32;
  var $i55: i1;
  var $i56: i8;
  var $i57: i8;
  var $i58: i1;
  var $i59: i8;
  var $i60: i1;
  var $i61: i8;
  var $i62: i1;
  var $i63: i8;
  var $i64: i1;
  var $i66: i8;
  var $i67: i1;
  var $i68: i32;
  var $i65: i32;
  var $i69: i1;
  var $i70: i8;
  var $i71: i1;
  var $i72: i8;
  var $i73: i1;
  var $i74: i8;
  var $i75: i8;
  var $i76: i1;
  var $i77: i8;
  var $i78: i32;
  var $i79: i8;
  var $i80: i1;
  var $i81: i8;
  var $i82: i1;
  var $i83: i8;
  var $i84: i1;
  var $i85: i8;
  var $i86: i1;
  var $i87: i8;
  var $i88: i1;
  var $i89: i32;
  var $i91: i8;
  var $i92: i1;
  var $i93: i8;
  var $i94: i1;
  var $i95: i32;
  var $i97: i32;
  var $i96: i32;
  var $i90: i32;
  var $i98: i8;
  var $i99: i1;
  var $i100: i32;
  var $i102: i8;
  var $i103: i1;
  var $i104: i8;
  var $i105: i1;
  var $i106: i8;
  var $i107: i1;
  var $i108: i8;
  var $i109: i1;
  var $i110: i8;
  var $i111: i1;
  var $i112: i32;
  var $i114: i8;
  var $i115: i1;
  var $i116: i8;
  var $i117: i1;
  var $i118: i32;
  var $i120: i32;
  var $i119: i32;
  var $i113: i32;
  var $i101: i32;
  var $i121: i8;
  var $i122: i1;
  var $i123: i32;
  var $i125: i8;
  var $i126: i1;
  var $i127: i8;
  var $i128: i1;
  var $i129: i8;
  var $i130: i1;
  var $i131: i8;
  var $i132: i1;
  var $i133: i8;
  var $i134: i1;
  var $i135: i32;
  var $i137: i8;
  var $i138: i1;
  var $i139: i8;
  var $i140: i1;
  var $i141: i32;
  var $i143: i32;
  var $i142: i32;
  var $i136: i32;
  var $i124: i32;
  var $i144: i8;
  var $i145: i1;
  var $i146: i8;
  var $i147: i1;
  var $i148: i32;
  var $i150: i8;
  var $i151: i1;
  var $i152: i8;
  var $i153: i1;
  var $i154: i8;
  var $i155: i1;
  var $i156: i8;
  var $i157: i1;
  var $i158: i8;
  var $i159: i1;
  var $i160: i8;
  var $i161: i1;
  var $i162: i32;
  var $i164: i8;
  var $i165: i1;
  var $i166: i8;
  var $i167: i1;
  var $i169: i8;
  var $i170: i1;
  var $i171: i32;
  var $i168: i32;
  var $i163: i32;
  var $i149: i32;
  var $i172: i1;
  var $i173: i8;
  var $i174: i8;
  var $i175: i1;
  var $i176: i8;
  var $i177: i1;
  var $i178: i32;
  var $i180: i8;
  var $i181: i1;
  var $i182: i8;
  var $i183: i1;
  var $i184: i8;
  var $i185: i1;
  var $i186: i8;
  var $i187: i1;
  var $i188: i8;
  var $i189: i1;
  var $i190: i8;
  var $i191: i1;
  var $i192: i32;
  var $i194: i8;
  var $i195: i1;
  var $i197: i8;
  var $i198: i1;
  var $i196: i1;
  var $i199: i32;
  var $i193: i32;
  var $i179: i32;
  var $i200: i1;
  var $i201: i8;
  var $i202: i8;
  var $i203: i1;
  var $i204: i8;
  var $i205: i1;
  var $i206: i32;
  var $i208: i8;
  var $i209: i1;
  var $i210: i8;
  var $i211: i1;
  var $i212: i8;
  var $i213: i1;
  var $i214: i8;
  var $i215: i1;
  var $i216: i8;
  var $i217: i1;
  var $i218: i8;
  var $i219: i1;
  var $i220: i32;
  var $i222: i8;
  var $i223: i1;
  var $i224: i8;
  var $i225: i1;
  var $i227: i8;
  var $i228: i1;
  var $i229: i32;
  var $i226: i32;
  var $i221: i32;
  var $i207: i32;
  var $i230: i1;
  var $i231: i8;
  var $i232: i8;
  var $i233: i1;
  var $i234: i8;
  var $i235: i1;
  var $i236: i32;
  var $i238: i8;
  var $i239: i1;
  var $i240: i8;
  var $i241: i1;
  var $i242: i8;
  var $i243: i1;
  var $i244: i8;
  var $i245: i1;
  var $i246: i8;
  var $i247: i1;
  var $i248: i8;
  var $i249: i1;
  var $i250: i32;
  var $i252: i8;
  var $i253: i1;
  var $i255: i8;
  var $i256: i1;
  var $i254: i1;
  var $i257: i32;
  var $i251: i32;
  var $i237: i32;
  var $i258: i1;
  var $i259: i8;
  var $i260: i32;
  var $i261: i1;
  var $i263: i32;
  var $i264: i1;
  var $i265: i32;
  var $i266: i1;
  var $i267: i32;
  var $i268: i1;
  var $i262: i1;
  var $i269: i1;
  var $i270: i8;
  var $i271: i8;
  var $i272: i1;
  var $i273: i32;
  var $i275: i32;
  var $i274: i32;
  var $i276: i8;
  var $i277: i1;
  var $i278: i32;
$bb0:
  call $initialize();
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 827, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  assume {:verifier.code 0} true;
  call $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 827, 3} true;
  assume {:verifier.code 0} true;
  call $i2 := pthread_create($p0, $0.ref, P0, $0.ref);
  assume true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 829, 3} true;
  assume {:verifier.code 0} true;
  call $i3 := pthread_create($p1, $0.ref, P1, $0.ref);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 830, 3} true;
  assume {:verifier.code 0} true;
  call __VERIFIER_atomic_begin();
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 831, 21} true;
  assume {:verifier.code 0} true;
  $i4 := $load.i32($M.0, __unbuffered_cnt);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 831, 38} true;
  assume {:verifier.code 0} true;
  $i5 := $eq.i32($i4, 2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 831, 19} true;
  assume {:verifier.code 0} true;
  $i6 := $zext.i1.i8($i5);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 831, 19} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, main$tmp_guard0, $i6);
  call {:cexpr "main$tmp_guard0"} boogie_si_record_i8($i6);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 832, 3} true;
  assume {:verifier.code 0} true;
  call __VERIFIER_atomic_end();
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 833, 23} true;
  assume {:verifier.code 0} true;
  $i7 := $load.i8($M.0, main$tmp_guard0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 833, 23} true;
  assume {:verifier.code 0} true;
  $i8 := $trunc.i8.i1($i7);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 833, 23} true;
  assume {:verifier.code 0} true;
  $i9 := $zext.i1.i32($i8);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 833, 3} true;
  assume {:verifier.code 0} true;
  call assume_abort_if_not($i9);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 834, 3} true;
  assume {:verifier.code 0} true;
  call __VERIFIER_atomic_begin();
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 835, 7} true;
  assume {:verifier.code 0} true;
  $i10 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 835, 7} true;
  assume {:verifier.code 0} true;
  $i11 := $trunc.i8.i1($i10);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 835, 22} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i11} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i11 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 835, 25} true;
  assume {:verifier.code 0} true;
  $i12 := $load.i8($M.0, y$r_buff0_thd0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 835, 25} true;
  assume {:verifier.code 0} true;
  $i13 := $trunc.i8.i1($i12);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 835, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i13} true;
  goto $bb4, $bb5;
$bb2:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 835, 22} true;
  assume {:verifier.code 0} true;
  assume !(($i11 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 835, 55} true;
  assume {:verifier.code 0} true;
  $i16 := $load.i8($M.0, y$w_buff1_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 835, 55} true;
  assume {:verifier.code 0} true;
  $i17 := $trunc.i8.i1($i16);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 835, 70} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i17} true;
  goto $bb7, $bb8;
$bb4:
  assume ($i13 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 835, 42} true;
  assume {:verifier.code 0} true;
  $i14 := $load.i32($M.0, y$w_buff0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 835, 7} true;
  assume {:verifier.code 0} true;
  $i15 := $i14;
  goto $bb6;
$bb5:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 835, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i13 == 1));
  goto $bb3;
$bb6:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 835, 7} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 835, 5} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, y, $i15);
  call {:cexpr "y"} boogie_si_record_i32($i15);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 836, 20} true;
  assume {:verifier.code 0} true;
  $i23 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 836, 20} true;
  assume {:verifier.code 0} true;
  $i24 := $trunc.i8.i1($i23);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 836, 35} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i24} true;
  goto $bb13, $bb14;
$bb7:
  assume ($i17 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 835, 73} true;
  assume {:verifier.code 0} true;
  $i18 := $load.i8($M.0, y$r_buff1_thd0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 835, 73} true;
  assume {:verifier.code 0} true;
  $i19 := $trunc.i8.i1($i18);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 835, 55} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i19} true;
  goto $bb10, $bb11;
$bb8:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 835, 70} true;
  assume {:verifier.code 0} true;
  assume !(($i17 == 1));
  goto $bb9;
$bb9:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 835, 102} true;
  assume {:verifier.code 0} true;
  $i22 := $load.i32($M.0, y);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 835, 55} true;
  assume {:verifier.code 0} true;
  $i21 := $i22;
  goto $bb12;
$bb10:
  assume ($i19 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 835, 90} true;
  assume {:verifier.code 0} true;
  $i20 := $load.i32($M.0, y$w_buff1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 835, 55} true;
  assume {:verifier.code 0} true;
  $i21 := $i20;
  goto $bb12;
$bb11:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 835, 55} true;
  assume {:verifier.code 0} true;
  assume !(($i19 == 1));
  goto $bb9;
$bb12:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 835, 55} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 835, 7} true;
  assume {:verifier.code 0} true;
  $i15 := $i21;
  goto $bb6;
$bb13:
  assume ($i24 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 836, 38} true;
  assume {:verifier.code 0} true;
  $i25 := $load.i8($M.0, y$r_buff0_thd0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 836, 38} true;
  assume {:verifier.code 0} true;
  $i26 := $trunc.i8.i1($i25);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 836, 20} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i26} true;
  goto $bb16, $bb17;
$bb14:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 836, 35} true;
  assume {:verifier.code 0} true;
  assume !(($i24 == 1));
  goto $bb15;
$bb15:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 836, 66} true;
  assume {:verifier.code 0} true;
  $i28 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 836, 66} true;
  assume {:verifier.code 0} true;
  $i29 := $trunc.i8.i1($i28);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 836, 66} true;
  assume {:verifier.code 0} true;
  $i30 := $zext.i1.i32($i29);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 836, 20} true;
  assume {:verifier.code 0} true;
  $i27 := $i30;
  goto $bb18;
$bb16:
  assume ($i26 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 836, 20} true;
  assume {:verifier.code 0} true;
  $i27 := 0;
  goto $bb18;
$bb17:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 836, 20} true;
  assume {:verifier.code 0} true;
  assume !(($i26 == 1));
  goto $bb15;
$bb18:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 836, 20} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 836, 20} true;
  assume {:verifier.code 0} true;
  $i31 := $ne.i32($i27, 0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 836, 18} true;
  assume {:verifier.code 0} true;
  $i32 := $zext.i1.i8($i31);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 836, 18} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, y$w_buff0_used, $i32);
  call {:cexpr "y$w_buff0_used"} boogie_si_record_i8($i32);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 837, 20} true;
  assume {:verifier.code 0} true;
  $i33 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 837, 20} true;
  assume {:verifier.code 0} true;
  $i34 := $trunc.i8.i1($i33);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 837, 35} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i34} true;
  goto $bb19, $bb20;
$bb19:
  assume ($i34 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 837, 38} true;
  assume {:verifier.code 0} true;
  $i35 := $load.i8($M.0, y$r_buff0_thd0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 837, 38} true;
  assume {:verifier.code 0} true;
  $i36 := $trunc.i8.i1($i35);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 837, 53} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i36} true;
  goto $bb22, $bb24;
$bb20:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 837, 35} true;
  assume {:verifier.code 0} true;
  assume !(($i34 == 1));
  goto $bb21;
$bb21:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 837, 56} true;
  assume {:verifier.code 0} true;
  $i37 := $load.i8($M.0, y$w_buff1_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 837, 56} true;
  assume {:verifier.code 0} true;
  $i38 := $trunc.i8.i1($i37);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 837, 71} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i38} true;
  goto $bb25, $bb26;
$bb22:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 837, 53} true;
  assume {:verifier.code 0} true;
  assume ($i36 == 1);
  goto $bb23;
$bb23:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 837, 20} true;
  assume {:verifier.code 0} true;
  $i41 := 0;
  goto $bb30;
$bb24:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 837, 53} true;
  assume {:verifier.code 0} true;
  assume !(($i36 == 1));
  goto $bb21;
$bb25:
  assume ($i38 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 837, 74} true;
  assume {:verifier.code 0} true;
  $i39 := $load.i8($M.0, y$r_buff1_thd0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 837, 74} true;
  assume {:verifier.code 0} true;
  $i40 := $trunc.i8.i1($i39);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 837, 20} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i40} true;
  goto $bb28, $bb29;
$bb26:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 837, 71} true;
  assume {:verifier.code 0} true;
  assume !(($i38 == 1));
  goto $bb27;
$bb27:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 837, 102} true;
  assume {:verifier.code 0} true;
  $i42 := $load.i8($M.0, y$w_buff1_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 837, 102} true;
  assume {:verifier.code 0} true;
  $i43 := $trunc.i8.i1($i42);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 837, 102} true;
  assume {:verifier.code 0} true;
  $i44 := $zext.i1.i32($i43);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 837, 20} true;
  assume {:verifier.code 0} true;
  $i41 := $i44;
  goto $bb30;
$bb28:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 837, 20} true;
  assume {:verifier.code 0} true;
  assume ($i40 == 1);
  goto $bb23;
$bb29:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 837, 20} true;
  assume {:verifier.code 0} true;
  assume !(($i40 == 1));
  goto $bb27;
$bb30:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 837, 20} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 837, 20} true;
  assume {:verifier.code 0} true;
  $i45 := $ne.i32($i41, 0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 837, 18} true;
  assume {:verifier.code 0} true;
  $i46 := $zext.i1.i8($i45);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 837, 18} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, y$w_buff1_used, $i46);
  call {:cexpr "y$w_buff1_used"} boogie_si_record_i8($i46);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 838, 20} true;
  assume {:verifier.code 0} true;
  $i47 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 838, 20} true;
  assume {:verifier.code 0} true;
  $i48 := $trunc.i8.i1($i47);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 838, 35} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i48} true;
  goto $bb31, $bb32;
$bb31:
  assume ($i48 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 838, 38} true;
  assume {:verifier.code 0} true;
  $i49 := $load.i8($M.0, y$r_buff0_thd0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 838, 38} true;
  assume {:verifier.code 0} true;
  $i50 := $trunc.i8.i1($i49);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 838, 20} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i50} true;
  goto $bb34, $bb35;
$bb32:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 838, 35} true;
  assume {:verifier.code 0} true;
  assume !(($i48 == 1));
  goto $bb33;
$bb33:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 838, 66} true;
  assume {:verifier.code 0} true;
  $i52 := $load.i8($M.0, y$r_buff0_thd0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 838, 66} true;
  assume {:verifier.code 0} true;
  $i53 := $trunc.i8.i1($i52);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 838, 66} true;
  assume {:verifier.code 0} true;
  $i54 := $zext.i1.i32($i53);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 838, 20} true;
  assume {:verifier.code 0} true;
  $i51 := $i54;
  goto $bb36;
$bb34:
  assume ($i50 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 838, 20} true;
  assume {:verifier.code 0} true;
  $i51 := 0;
  goto $bb36;
$bb35:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 838, 20} true;
  assume {:verifier.code 0} true;
  assume !(($i50 == 1));
  goto $bb33;
$bb36:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 838, 20} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 838, 20} true;
  assume {:verifier.code 0} true;
  $i55 := $ne.i32($i51, 0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 838, 18} true;
  assume {:verifier.code 0} true;
  $i56 := $zext.i1.i8($i55);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 838, 18} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, y$r_buff0_thd0, $i56);
  call {:cexpr "y$r_buff0_thd0"} boogie_si_record_i8($i56);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 839, 20} true;
  assume {:verifier.code 0} true;
  $i57 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 839, 20} true;
  assume {:verifier.code 0} true;
  $i58 := $trunc.i8.i1($i57);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 839, 35} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i58} true;
  goto $bb37, $bb38;
$bb37:
  assume ($i58 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 839, 38} true;
  assume {:verifier.code 0} true;
  $i59 := $load.i8($M.0, y$r_buff0_thd0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 839, 38} true;
  assume {:verifier.code 0} true;
  $i60 := $trunc.i8.i1($i59);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 839, 53} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i60} true;
  goto $bb40, $bb42;
$bb38:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 839, 35} true;
  assume {:verifier.code 0} true;
  assume !(($i58 == 1));
  goto $bb39;
$bb39:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 839, 56} true;
  assume {:verifier.code 0} true;
  $i61 := $load.i8($M.0, y$w_buff1_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 839, 56} true;
  assume {:verifier.code 0} true;
  $i62 := $trunc.i8.i1($i61);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 839, 71} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i62} true;
  goto $bb43, $bb44;
$bb40:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 839, 53} true;
  assume {:verifier.code 0} true;
  assume ($i60 == 1);
  goto $bb41;
$bb41:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 839, 20} true;
  assume {:verifier.code 0} true;
  $i65 := 0;
  goto $bb48;
$bb42:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 839, 53} true;
  assume {:verifier.code 0} true;
  assume !(($i60 == 1));
  goto $bb39;
$bb43:
  assume ($i62 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 839, 74} true;
  assume {:verifier.code 0} true;
  $i63 := $load.i8($M.0, y$r_buff1_thd0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 839, 74} true;
  assume {:verifier.code 0} true;
  $i64 := $trunc.i8.i1($i63);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 839, 20} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i64} true;
  goto $bb46, $bb47;
$bb44:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 839, 71} true;
  assume {:verifier.code 0} true;
  assume !(($i62 == 1));
  goto $bb45;
$bb45:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 839, 102} true;
  assume {:verifier.code 0} true;
  $i66 := $load.i8($M.0, y$r_buff1_thd0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 839, 102} true;
  assume {:verifier.code 0} true;
  $i67 := $trunc.i8.i1($i66);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 839, 102} true;
  assume {:verifier.code 0} true;
  $i68 := $zext.i1.i32($i67);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 839, 20} true;
  assume {:verifier.code 0} true;
  $i65 := $i68;
  goto $bb48;
$bb46:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 839, 20} true;
  assume {:verifier.code 0} true;
  assume ($i64 == 1);
  goto $bb41;
$bb47:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 839, 20} true;
  assume {:verifier.code 0} true;
  assume !(($i64 == 1));
  goto $bb45;
$bb48:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 839, 20} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 839, 20} true;
  assume {:verifier.code 0} true;
  $i69 := $ne.i32($i65, 0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 839, 18} true;
  assume {:verifier.code 0} true;
  $i70 := $zext.i1.i8($i69);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 839, 18} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, y$r_buff1_thd0, $i70);
  call {:cexpr "y$r_buff1_thd0"} boogie_si_record_i8($i70);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 840, 3} true;
  assume {:verifier.code 0} true;
  call __VERIFIER_atomic_end();
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 841, 3} true;
  assume {:verifier.code 0} true;
  call __VERIFIER_atomic_begin();
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 842, 19} true;
  assume {:verifier.code 1} true;
  call $i71 := __VERIFIER_nondet_bool();
  call {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i71);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 842, 17} true;
  assume {:verifier.code 0} true;
  $i72 := $zext.i1.i8($i71);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 842, 17} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, weak$$choice0, $i72);
  call {:cexpr "weak$$choice0"} boogie_si_record_i8($i72);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 843, 19} true;
  assume {:verifier.code 1} true;
  call $i73 := __VERIFIER_nondet_bool();
  call {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i73);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 843, 17} true;
  assume {:verifier.code 0} true;
  $i74 := $zext.i1.i8($i73);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 843, 17} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, weak$$choice2, $i74);
  call {:cexpr "weak$$choice2"} boogie_si_record_i8($i74);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 844, 21} true;
  assume {:verifier.code 0} true;
  $i75 := $load.i8($M.0, weak$$choice2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 844, 21} true;
  assume {:verifier.code 0} true;
  $i76 := $trunc.i8.i1($i75);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 844, 19} true;
  assume {:verifier.code 0} true;
  $i77 := $zext.i1.i8($i76);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 844, 19} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, y$flush_delayed, $i77);
  call {:cexpr "y$flush_delayed"} boogie_si_record_i8($i77);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 845, 15} true;
  assume {:verifier.code 0} true;
  $i78 := $load.i32($M.0, y);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 845, 13} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, y$mem_tmp, $i78);
  call {:cexpr "y$mem_tmp"} boogie_si_record_i32($i78);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 846, 8} true;
  assume {:verifier.code 0} true;
  $i79 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 846, 8} true;
  assume {:verifier.code 0} true;
  $i80 := $trunc.i8.i1($i79);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 846, 23} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i80} true;
  goto $bb49, $bb50;
$bb49:
  assume ($i80 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 846, 27} true;
  assume {:verifier.code 0} true;
  $i81 := $load.i8($M.0, y$r_buff0_thd0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 846, 27} true;
  assume {:verifier.code 0} true;
  $i82 := $trunc.i8.i1($i81);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 846, 42} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i82} true;
  goto $bb52, $bb54;
$bb50:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 846, 23} true;
  assume {:verifier.code 0} true;
  assume !(($i80 == 1));
  goto $bb51;
$bb51:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 846, 101} true;
  assume {:verifier.code 0} true;
  $i89 := $load.i32($M.0, y);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 846, 7} true;
  assume {:verifier.code 0} true;
  $i90 := $i89;
  goto $bb62;
$bb52:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 846, 42} true;
  assume {:verifier.code 0} true;
  assume ($i82 == 1);
  goto $bb53;
$bb53:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 846, 65} true;
  assume {:verifier.code 0} true;
  $i85 := $load.i8($M.0, y$r_buff0_thd0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 846, 65} true;
  assume {:verifier.code 0} true;
  $i86 := $trunc.i8.i1($i85);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 846, 80} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i86} true;
  goto $bb57, $bb59;
$bb54:
  assume !(($i82 == 1));
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 846, 46} true;
  assume {:verifier.code 0} true;
  $i83 := $load.i8($M.0, y$w_buff1_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 846, 46} true;
  assume {:verifier.code 0} true;
  $i84 := $trunc.i8.i1($i83);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 846, 61} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i84} true;
  goto $bb55, $bb56;
$bb55:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 846, 61} true;
  assume {:verifier.code 0} true;
  assume ($i84 == 1);
  goto $bb53;
$bb56:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 846, 61} true;
  assume {:verifier.code 0} true;
  assume !(($i84 == 1));
  goto $bb51;
$bb57:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 846, 80} true;
  assume {:verifier.code 0} true;
  assume ($i86 == 1);
  goto $bb58;
$bb58:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 846, 106} true;
  assume {:verifier.code 0} true;
  $i91 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 846, 106} true;
  assume {:verifier.code 0} true;
  $i92 := $trunc.i8.i1($i91);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 846, 121} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i92} true;
  goto $bb63, $bb64;
$bb59:
  assume !(($i86 == 1));
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 846, 84} true;
  assume {:verifier.code 0} true;
  $i87 := $load.i8($M.0, y$r_buff1_thd0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 846, 84} true;
  assume {:verifier.code 0} true;
  $i88 := $trunc.i8.i1($i87);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 846, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i88} true;
  goto $bb60, $bb61;
$bb60:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 846, 7} true;
  assume {:verifier.code 0} true;
  assume ($i88 == 1);
  goto $bb58;
$bb61:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 846, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i88 == 1));
  goto $bb51;
$bb62:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 846, 7} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 846, 5} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, y, $i90);
  call {:cexpr "y"} boogie_si_record_i32($i90);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 847, 15} true;
  assume {:verifier.code 0} true;
  $i98 := $load.i8($M.0, weak$$choice2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 847, 15} true;
  assume {:verifier.code 0} true;
  $i99 := $trunc.i8.i1($i98);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 847, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i99} true;
  goto $bb69, $bb70;
$bb63:
  assume ($i92 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 846, 124} true;
  assume {:verifier.code 0} true;
  $i93 := $load.i8($M.0, y$r_buff0_thd0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 846, 124} true;
  assume {:verifier.code 0} true;
  $i94 := $trunc.i8.i1($i93);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 846, 106} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i94} true;
  goto $bb66, $bb67;
$bb64:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 846, 121} true;
  assume {:verifier.code 0} true;
  assume !(($i92 == 1));
  goto $bb65;
$bb65:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 846, 153} true;
  assume {:verifier.code 0} true;
  $i97 := $load.i32($M.0, y$w_buff1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 846, 106} true;
  assume {:verifier.code 0} true;
  $i96 := $i97;
  goto $bb68;
$bb66:
  assume ($i94 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 846, 141} true;
  assume {:verifier.code 0} true;
  $i95 := $load.i32($M.0, y$w_buff0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 846, 106} true;
  assume {:verifier.code 0} true;
  $i96 := $i95;
  goto $bb68;
$bb67:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 846, 106} true;
  assume {:verifier.code 0} true;
  assume !(($i94 == 1));
  goto $bb65;
$bb68:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 846, 106} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 846, 7} true;
  assume {:verifier.code 0} true;
  $i90 := $i96;
  goto $bb62;
$bb69:
  assume ($i99 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 847, 31} true;
  assume {:verifier.code 0} true;
  $i100 := $load.i32($M.0, y$w_buff0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 847, 15} true;
  assume {:verifier.code 0} true;
  $i101 := $i100;
  goto $bb71;
$bb70:
  assume !(($i99 == 1));
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 847, 45} true;
  assume {:verifier.code 0} true;
  $i102 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 847, 45} true;
  assume {:verifier.code 0} true;
  $i103 := $trunc.i8.i1($i102);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 847, 60} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i103} true;
  goto $bb72, $bb73;
$bb71:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 847, 15} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 847, 13} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, y$w_buff0, $i101);
  call {:cexpr "y$w_buff0"} boogie_si_record_i32($i101);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 848, 15} true;
  assume {:verifier.code 0} true;
  $i121 := $load.i8($M.0, weak$$choice2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 848, 15} true;
  assume {:verifier.code 0} true;
  $i122 := $trunc.i8.i1($i121);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 848, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i122} true;
  goto $bb92, $bb93;
$bb72:
  assume ($i103 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 847, 64} true;
  assume {:verifier.code 0} true;
  $i104 := $load.i8($M.0, y$r_buff0_thd0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 847, 64} true;
  assume {:verifier.code 0} true;
  $i105 := $trunc.i8.i1($i104);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 847, 79} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i105} true;
  goto $bb75, $bb77;
$bb73:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 847, 60} true;
  assume {:verifier.code 0} true;
  assume !(($i103 == 1));
  goto $bb74;
$bb74:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 847, 138} true;
  assume {:verifier.code 0} true;
  $i112 := $load.i32($M.0, y$w_buff0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 847, 44} true;
  assume {:verifier.code 0} true;
  $i113 := $i112;
  goto $bb85;
$bb75:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 847, 79} true;
  assume {:verifier.code 0} true;
  assume ($i105 == 1);
  goto $bb76;
$bb76:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 847, 102} true;
  assume {:verifier.code 0} true;
  $i108 := $load.i8($M.0, y$r_buff0_thd0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 847, 102} true;
  assume {:verifier.code 0} true;
  $i109 := $trunc.i8.i1($i108);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 847, 117} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i109} true;
  goto $bb80, $bb82;
$bb77:
  assume !(($i105 == 1));
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 847, 83} true;
  assume {:verifier.code 0} true;
  $i106 := $load.i8($M.0, y$w_buff1_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 847, 83} true;
  assume {:verifier.code 0} true;
  $i107 := $trunc.i8.i1($i106);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 847, 98} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i107} true;
  goto $bb78, $bb79;
$bb78:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 847, 98} true;
  assume {:verifier.code 0} true;
  assume ($i107 == 1);
  goto $bb76;
$bb79:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 847, 98} true;
  assume {:verifier.code 0} true;
  assume !(($i107 == 1));
  goto $bb74;
$bb80:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 847, 117} true;
  assume {:verifier.code 0} true;
  assume ($i109 == 1);
  goto $bb81;
$bb81:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 847, 151} true;
  assume {:verifier.code 0} true;
  $i114 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 847, 151} true;
  assume {:verifier.code 0} true;
  $i115 := $trunc.i8.i1($i114);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 847, 166} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i115} true;
  goto $bb86, $bb87;
$bb82:
  assume !(($i109 == 1));
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 847, 121} true;
  assume {:verifier.code 0} true;
  $i110 := $load.i8($M.0, y$r_buff1_thd0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 847, 121} true;
  assume {:verifier.code 0} true;
  $i111 := $trunc.i8.i1($i110);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 847, 44} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i111} true;
  goto $bb83, $bb84;
$bb83:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 847, 44} true;
  assume {:verifier.code 0} true;
  assume ($i111 == 1);
  goto $bb81;
$bb84:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 847, 44} true;
  assume {:verifier.code 0} true;
  assume !(($i111 == 1));
  goto $bb74;
$bb85:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 847, 44} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 847, 15} true;
  assume {:verifier.code 0} true;
  $i101 := $i113;
  goto $bb71;
$bb86:
  assume ($i115 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 847, 169} true;
  assume {:verifier.code 0} true;
  $i116 := $load.i8($M.0, y$r_buff0_thd0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 847, 169} true;
  assume {:verifier.code 0} true;
  $i117 := $trunc.i8.i1($i116);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 847, 151} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i117} true;
  goto $bb89, $bb90;
$bb87:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 847, 166} true;
  assume {:verifier.code 0} true;
  assume !(($i115 == 1));
  goto $bb88;
$bb88:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 847, 198} true;
  assume {:verifier.code 0} true;
  $i120 := $load.i32($M.0, y$w_buff0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 847, 151} true;
  assume {:verifier.code 0} true;
  $i119 := $i120;
  goto $bb91;
$bb89:
  assume ($i117 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 847, 186} true;
  assume {:verifier.code 0} true;
  $i118 := $load.i32($M.0, y$w_buff0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 847, 151} true;
  assume {:verifier.code 0} true;
  $i119 := $i118;
  goto $bb91;
$bb90:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 847, 151} true;
  assume {:verifier.code 0} true;
  assume !(($i117 == 1));
  goto $bb88;
$bb91:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 847, 151} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 847, 44} true;
  assume {:verifier.code 0} true;
  $i113 := $i119;
  goto $bb85;
$bb92:
  assume ($i122 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 848, 31} true;
  assume {:verifier.code 0} true;
  $i123 := $load.i32($M.0, y$w_buff1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 848, 15} true;
  assume {:verifier.code 0} true;
  $i124 := $i123;
  goto $bb94;
$bb93:
  assume !(($i122 == 1));
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 848, 45} true;
  assume {:verifier.code 0} true;
  $i125 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 848, 45} true;
  assume {:verifier.code 0} true;
  $i126 := $trunc.i8.i1($i125);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 848, 60} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i126} true;
  goto $bb95, $bb96;
$bb94:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 848, 15} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 848, 13} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, y$w_buff1, $i124);
  call {:cexpr "y$w_buff1"} boogie_si_record_i32($i124);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 849, 20} true;
  assume {:verifier.code 0} true;
  $i144 := $load.i8($M.0, weak$$choice2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 849, 20} true;
  assume {:verifier.code 0} true;
  $i145 := $trunc.i8.i1($i144);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 849, 20} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i145} true;
  goto $bb115, $bb116;
$bb95:
  assume ($i126 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 848, 64} true;
  assume {:verifier.code 0} true;
  $i127 := $load.i8($M.0, y$r_buff0_thd0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 848, 64} true;
  assume {:verifier.code 0} true;
  $i128 := $trunc.i8.i1($i127);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 848, 79} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i128} true;
  goto $bb98, $bb100;
$bb96:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 848, 60} true;
  assume {:verifier.code 0} true;
  assume !(($i126 == 1));
  goto $bb97;
$bb97:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 848, 138} true;
  assume {:verifier.code 0} true;
  $i135 := $load.i32($M.0, y$w_buff1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 848, 44} true;
  assume {:verifier.code 0} true;
  $i136 := $i135;
  goto $bb108;
$bb98:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 848, 79} true;
  assume {:verifier.code 0} true;
  assume ($i128 == 1);
  goto $bb99;
$bb99:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 848, 102} true;
  assume {:verifier.code 0} true;
  $i131 := $load.i8($M.0, y$r_buff0_thd0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 848, 102} true;
  assume {:verifier.code 0} true;
  $i132 := $trunc.i8.i1($i131);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 848, 117} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i132} true;
  goto $bb103, $bb105;
$bb100:
  assume !(($i128 == 1));
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 848, 83} true;
  assume {:verifier.code 0} true;
  $i129 := $load.i8($M.0, y$w_buff1_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 848, 83} true;
  assume {:verifier.code 0} true;
  $i130 := $trunc.i8.i1($i129);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 848, 98} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i130} true;
  goto $bb101, $bb102;
$bb101:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 848, 98} true;
  assume {:verifier.code 0} true;
  assume ($i130 == 1);
  goto $bb99;
$bb102:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 848, 98} true;
  assume {:verifier.code 0} true;
  assume !(($i130 == 1));
  goto $bb97;
$bb103:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 848, 117} true;
  assume {:verifier.code 0} true;
  assume ($i132 == 1);
  goto $bb104;
$bb104:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 848, 151} true;
  assume {:verifier.code 0} true;
  $i137 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 848, 151} true;
  assume {:verifier.code 0} true;
  $i138 := $trunc.i8.i1($i137);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 848, 166} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i138} true;
  goto $bb109, $bb110;
$bb105:
  assume !(($i132 == 1));
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 848, 121} true;
  assume {:verifier.code 0} true;
  $i133 := $load.i8($M.0, y$r_buff1_thd0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 848, 121} true;
  assume {:verifier.code 0} true;
  $i134 := $trunc.i8.i1($i133);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 848, 44} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i134} true;
  goto $bb106, $bb107;
$bb106:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 848, 44} true;
  assume {:verifier.code 0} true;
  assume ($i134 == 1);
  goto $bb104;
$bb107:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 848, 44} true;
  assume {:verifier.code 0} true;
  assume !(($i134 == 1));
  goto $bb97;
$bb108:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 848, 44} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 848, 15} true;
  assume {:verifier.code 0} true;
  $i124 := $i136;
  goto $bb94;
$bb109:
  assume ($i138 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 848, 169} true;
  assume {:verifier.code 0} true;
  $i139 := $load.i8($M.0, y$r_buff0_thd0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 848, 169} true;
  assume {:verifier.code 0} true;
  $i140 := $trunc.i8.i1($i139);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 848, 151} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i140} true;
  goto $bb112, $bb113;
$bb110:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 848, 166} true;
  assume {:verifier.code 0} true;
  assume !(($i138 == 1));
  goto $bb111;
$bb111:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 848, 198} true;
  assume {:verifier.code 0} true;
  $i143 := $load.i32($M.0, y$w_buff1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 848, 151} true;
  assume {:verifier.code 0} true;
  $i142 := $i143;
  goto $bb114;
$bb112:
  assume ($i140 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 848, 186} true;
  assume {:verifier.code 0} true;
  $i141 := $load.i32($M.0, y$w_buff1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 848, 151} true;
  assume {:verifier.code 0} true;
  $i142 := $i141;
  goto $bb114;
$bb113:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 848, 151} true;
  assume {:verifier.code 0} true;
  assume !(($i140 == 1));
  goto $bb111;
$bb114:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 848, 151} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 848, 44} true;
  assume {:verifier.code 0} true;
  $i136 := $i142;
  goto $bb108;
$bb115:
  assume ($i145 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 849, 36} true;
  assume {:verifier.code 0} true;
  $i146 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 849, 36} true;
  assume {:verifier.code 0} true;
  $i147 := $trunc.i8.i1($i146);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 849, 36} true;
  assume {:verifier.code 0} true;
  $i148 := $zext.i1.i32($i147);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 849, 20} true;
  assume {:verifier.code 0} true;
  $i149 := $i148;
  goto $bb117;
$bb116:
  assume !(($i145 == 1));
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 849, 55} true;
  assume {:verifier.code 0} true;
  $i150 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 849, 55} true;
  assume {:verifier.code 0} true;
  $i151 := $trunc.i8.i1($i150);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 849, 70} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i151} true;
  goto $bb118, $bb119;
$bb117:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 849, 20} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 849, 20} true;
  assume {:verifier.code 0} true;
  $i172 := $ne.i32($i149, 0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 849, 18} true;
  assume {:verifier.code 0} true;
  $i173 := $zext.i1.i8($i172);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 849, 18} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, y$w_buff0_used, $i173);
  call {:cexpr "y$w_buff0_used"} boogie_si_record_i8($i173);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 850, 20} true;
  assume {:verifier.code 0} true;
  $i174 := $load.i8($M.0, weak$$choice2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 850, 20} true;
  assume {:verifier.code 0} true;
  $i175 := $trunc.i8.i1($i174);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 850, 20} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i175} true;
  goto $bb138, $bb139;
$bb118:
  assume ($i151 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 849, 74} true;
  assume {:verifier.code 0} true;
  $i152 := $load.i8($M.0, y$r_buff0_thd0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 849, 74} true;
  assume {:verifier.code 0} true;
  $i153 := $trunc.i8.i1($i152);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 849, 89} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i153} true;
  goto $bb121, $bb123;
$bb119:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 849, 70} true;
  assume {:verifier.code 0} true;
  assume !(($i151 == 1));
  goto $bb120;
$bb120:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 849, 148} true;
  assume {:verifier.code 0} true;
  $i160 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 849, 148} true;
  assume {:verifier.code 0} true;
  $i161 := $trunc.i8.i1($i160);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 849, 148} true;
  assume {:verifier.code 0} true;
  $i162 := $zext.i1.i32($i161);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 849, 54} true;
  assume {:verifier.code 0} true;
  $i163 := $i162;
  goto $bb131;
$bb121:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 849, 89} true;
  assume {:verifier.code 0} true;
  assume ($i153 == 1);
  goto $bb122;
$bb122:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 849, 112} true;
  assume {:verifier.code 0} true;
  $i156 := $load.i8($M.0, y$r_buff0_thd0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 849, 112} true;
  assume {:verifier.code 0} true;
  $i157 := $trunc.i8.i1($i156);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 849, 127} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i157} true;
  goto $bb126, $bb128;
$bb123:
  assume !(($i153 == 1));
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 849, 93} true;
  assume {:verifier.code 0} true;
  $i154 := $load.i8($M.0, y$w_buff1_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 849, 93} true;
  assume {:verifier.code 0} true;
  $i155 := $trunc.i8.i1($i154);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 849, 108} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i155} true;
  goto $bb124, $bb125;
$bb124:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 849, 108} true;
  assume {:verifier.code 0} true;
  assume ($i155 == 1);
  goto $bb122;
$bb125:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 849, 108} true;
  assume {:verifier.code 0} true;
  assume !(($i155 == 1));
  goto $bb120;
$bb126:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 849, 127} true;
  assume {:verifier.code 0} true;
  assume ($i157 == 1);
  goto $bb127;
$bb127:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 849, 166} true;
  assume {:verifier.code 0} true;
  $i164 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 849, 166} true;
  assume {:verifier.code 0} true;
  $i165 := $trunc.i8.i1($i164);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 849, 181} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i165} true;
  goto $bb132, $bb133;
$bb128:
  assume !(($i157 == 1));
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 849, 131} true;
  assume {:verifier.code 0} true;
  $i158 := $load.i8($M.0, y$r_buff1_thd0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 849, 131} true;
  assume {:verifier.code 0} true;
  $i159 := $trunc.i8.i1($i158);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 849, 54} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i159} true;
  goto $bb129, $bb130;
$bb129:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 849, 54} true;
  assume {:verifier.code 0} true;
  assume ($i159 == 1);
  goto $bb127;
$bb130:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 849, 54} true;
  assume {:verifier.code 0} true;
  assume !(($i159 == 1));
  goto $bb120;
$bb131:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 849, 54} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 849, 20} true;
  assume {:verifier.code 0} true;
  $i149 := $i163;
  goto $bb117;
$bb132:
  assume ($i165 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 849, 184} true;
  assume {:verifier.code 0} true;
  $i166 := $load.i8($M.0, y$r_buff0_thd0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 849, 184} true;
  assume {:verifier.code 0} true;
  $i167 := $trunc.i8.i1($i166);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 849, 166} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i167} true;
  goto $bb135, $bb136;
$bb133:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 849, 181} true;
  assume {:verifier.code 0} true;
  assume !(($i165 == 1));
  goto $bb134;
$bb134:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 849, 212} true;
  assume {:verifier.code 0} true;
  $i169 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 849, 212} true;
  assume {:verifier.code 0} true;
  $i170 := $trunc.i8.i1($i169);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 849, 212} true;
  assume {:verifier.code 0} true;
  $i171 := $zext.i1.i32($i170);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 849, 166} true;
  assume {:verifier.code 0} true;
  $i168 := $i171;
  goto $bb137;
$bb135:
  assume ($i167 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 849, 166} true;
  assume {:verifier.code 0} true;
  $i168 := 0;
  goto $bb137;
$bb136:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 849, 166} true;
  assume {:verifier.code 0} true;
  assume !(($i167 == 1));
  goto $bb134;
$bb137:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 849, 166} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 849, 54} true;
  assume {:verifier.code 0} true;
  $i163 := $i168;
  goto $bb131;
$bb138:
  assume ($i175 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 850, 36} true;
  assume {:verifier.code 0} true;
  $i176 := $load.i8($M.0, y$w_buff1_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 850, 36} true;
  assume {:verifier.code 0} true;
  $i177 := $trunc.i8.i1($i176);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 850, 36} true;
  assume {:verifier.code 0} true;
  $i178 := $zext.i1.i32($i177);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 850, 20} true;
  assume {:verifier.code 0} true;
  $i179 := $i178;
  goto $bb140;
$bb139:
  assume !(($i175 == 1));
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 850, 55} true;
  assume {:verifier.code 0} true;
  $i180 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 850, 55} true;
  assume {:verifier.code 0} true;
  $i181 := $trunc.i8.i1($i180);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 850, 70} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i181} true;
  goto $bb141, $bb142;
$bb140:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 850, 20} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 850, 20} true;
  assume {:verifier.code 0} true;
  $i200 := $ne.i32($i179, 0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 850, 18} true;
  assume {:verifier.code 0} true;
  $i201 := $zext.i1.i8($i200);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 850, 18} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, y$w_buff1_used, $i201);
  call {:cexpr "y$w_buff1_used"} boogie_si_record_i8($i201);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 851, 20} true;
  assume {:verifier.code 0} true;
  $i202 := $load.i8($M.0, weak$$choice2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 851, 20} true;
  assume {:verifier.code 0} true;
  $i203 := $trunc.i8.i1($i202);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 851, 20} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i203} true;
  goto $bb158, $bb159;
$bb141:
  assume ($i181 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 850, 74} true;
  assume {:verifier.code 0} true;
  $i182 := $load.i8($M.0, y$r_buff0_thd0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 850, 74} true;
  assume {:verifier.code 0} true;
  $i183 := $trunc.i8.i1($i182);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 850, 89} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i183} true;
  goto $bb144, $bb146;
$bb142:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 850, 70} true;
  assume {:verifier.code 0} true;
  assume !(($i181 == 1));
  goto $bb143;
$bb143:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 850, 148} true;
  assume {:verifier.code 0} true;
  $i190 := $load.i8($M.0, y$w_buff1_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 850, 148} true;
  assume {:verifier.code 0} true;
  $i191 := $trunc.i8.i1($i190);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 850, 148} true;
  assume {:verifier.code 0} true;
  $i192 := $zext.i1.i32($i191);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 850, 54} true;
  assume {:verifier.code 0} true;
  $i193 := $i192;
  goto $bb154;
$bb144:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 850, 89} true;
  assume {:verifier.code 0} true;
  assume ($i183 == 1);
  goto $bb145;
$bb145:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 850, 112} true;
  assume {:verifier.code 0} true;
  $i186 := $load.i8($M.0, y$r_buff0_thd0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 850, 112} true;
  assume {:verifier.code 0} true;
  $i187 := $trunc.i8.i1($i186);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 850, 127} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i187} true;
  goto $bb149, $bb151;
$bb146:
  assume !(($i183 == 1));
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 850, 93} true;
  assume {:verifier.code 0} true;
  $i184 := $load.i8($M.0, y$w_buff1_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 850, 93} true;
  assume {:verifier.code 0} true;
  $i185 := $trunc.i8.i1($i184);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 850, 108} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i185} true;
  goto $bb147, $bb148;
$bb147:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 850, 108} true;
  assume {:verifier.code 0} true;
  assume ($i185 == 1);
  goto $bb145;
$bb148:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 850, 108} true;
  assume {:verifier.code 0} true;
  assume !(($i185 == 1));
  goto $bb143;
$bb149:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 850, 127} true;
  assume {:verifier.code 0} true;
  assume ($i187 == 1);
  goto $bb150;
$bb150:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 850, 166} true;
  assume {:verifier.code 0} true;
  $i194 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 850, 166} true;
  assume {:verifier.code 0} true;
  $i195 := $trunc.i8.i1($i194);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 850, 181} true;
  assume {:verifier.code 0} true;
  $i196 := 0;
  assume {:branchcond $i195} true;
  goto $bb155, $bb156;
$bb151:
  assume !(($i187 == 1));
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 850, 131} true;
  assume {:verifier.code 0} true;
  $i188 := $load.i8($M.0, y$r_buff1_thd0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 850, 131} true;
  assume {:verifier.code 0} true;
  $i189 := $trunc.i8.i1($i188);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 850, 54} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i189} true;
  goto $bb152, $bb153;
$bb152:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 850, 54} true;
  assume {:verifier.code 0} true;
  assume ($i189 == 1);
  goto $bb150;
$bb153:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 850, 54} true;
  assume {:verifier.code 0} true;
  assume !(($i189 == 1));
  goto $bb143;
$bb154:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 850, 54} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 850, 20} true;
  assume {:verifier.code 0} true;
  $i179 := $i193;
  goto $bb140;
$bb155:
  assume ($i195 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 850, 184} true;
  assume {:verifier.code 0} true;
  $i197 := $load.i8($M.0, y$r_buff0_thd0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 850, 184} true;
  assume {:verifier.code 0} true;
  $i198 := $trunc.i8.i1($i197);
  assume {:verifier.code 0} true;
  $i196 := $i198;
  goto $bb157;
$bb156:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 850, 181} true;
  assume {:verifier.code 0} true;
  assume !(($i195 == 1));
  goto $bb157;
$bb157:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 850, 166} true;
  assume {:verifier.code 0} true;
  $i199 := (if ($i196 == 1) then 0 else 0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 850, 54} true;
  assume {:verifier.code 0} true;
  $i193 := $i199;
  goto $bb154;
$bb158:
  assume ($i203 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 851, 36} true;
  assume {:verifier.code 0} true;
  $i204 := $load.i8($M.0, y$r_buff0_thd0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 851, 36} true;
  assume {:verifier.code 0} true;
  $i205 := $trunc.i8.i1($i204);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 851, 36} true;
  assume {:verifier.code 0} true;
  $i206 := $zext.i1.i32($i205);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 851, 20} true;
  assume {:verifier.code 0} true;
  $i207 := $i206;
  goto $bb160;
$bb159:
  assume !(($i203 == 1));
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 851, 55} true;
  assume {:verifier.code 0} true;
  $i208 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 851, 55} true;
  assume {:verifier.code 0} true;
  $i209 := $trunc.i8.i1($i208);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 851, 70} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i209} true;
  goto $bb161, $bb162;
$bb160:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 851, 20} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 851, 20} true;
  assume {:verifier.code 0} true;
  $i230 := $ne.i32($i207, 0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 851, 18} true;
  assume {:verifier.code 0} true;
  $i231 := $zext.i1.i8($i230);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 851, 18} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, y$r_buff0_thd0, $i231);
  call {:cexpr "y$r_buff0_thd0"} boogie_si_record_i8($i231);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 852, 20} true;
  assume {:verifier.code 0} true;
  $i232 := $load.i8($M.0, weak$$choice2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 852, 20} true;
  assume {:verifier.code 0} true;
  $i233 := $trunc.i8.i1($i232);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 852, 20} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i233} true;
  goto $bb181, $bb182;
$bb161:
  assume ($i209 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 851, 74} true;
  assume {:verifier.code 0} true;
  $i210 := $load.i8($M.0, y$r_buff0_thd0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 851, 74} true;
  assume {:verifier.code 0} true;
  $i211 := $trunc.i8.i1($i210);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 851, 89} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i211} true;
  goto $bb164, $bb166;
$bb162:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 851, 70} true;
  assume {:verifier.code 0} true;
  assume !(($i209 == 1));
  goto $bb163;
$bb163:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 851, 148} true;
  assume {:verifier.code 0} true;
  $i218 := $load.i8($M.0, y$r_buff0_thd0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 851, 148} true;
  assume {:verifier.code 0} true;
  $i219 := $trunc.i8.i1($i218);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 851, 148} true;
  assume {:verifier.code 0} true;
  $i220 := $zext.i1.i32($i219);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 851, 54} true;
  assume {:verifier.code 0} true;
  $i221 := $i220;
  goto $bb174;
$bb164:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 851, 89} true;
  assume {:verifier.code 0} true;
  assume ($i211 == 1);
  goto $bb165;
$bb165:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 851, 112} true;
  assume {:verifier.code 0} true;
  $i214 := $load.i8($M.0, y$r_buff0_thd0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 851, 112} true;
  assume {:verifier.code 0} true;
  $i215 := $trunc.i8.i1($i214);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 851, 127} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i215} true;
  goto $bb169, $bb171;
$bb166:
  assume !(($i211 == 1));
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 851, 93} true;
  assume {:verifier.code 0} true;
  $i212 := $load.i8($M.0, y$w_buff1_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 851, 93} true;
  assume {:verifier.code 0} true;
  $i213 := $trunc.i8.i1($i212);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 851, 108} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i213} true;
  goto $bb167, $bb168;
$bb167:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 851, 108} true;
  assume {:verifier.code 0} true;
  assume ($i213 == 1);
  goto $bb165;
$bb168:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 851, 108} true;
  assume {:verifier.code 0} true;
  assume !(($i213 == 1));
  goto $bb163;
$bb169:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 851, 127} true;
  assume {:verifier.code 0} true;
  assume ($i215 == 1);
  goto $bb170;
$bb170:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 851, 166} true;
  assume {:verifier.code 0} true;
  $i222 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 851, 166} true;
  assume {:verifier.code 0} true;
  $i223 := $trunc.i8.i1($i222);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 851, 181} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i223} true;
  goto $bb175, $bb176;
$bb171:
  assume !(($i215 == 1));
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 851, 131} true;
  assume {:verifier.code 0} true;
  $i216 := $load.i8($M.0, y$r_buff1_thd0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 851, 131} true;
  assume {:verifier.code 0} true;
  $i217 := $trunc.i8.i1($i216);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 851, 54} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i217} true;
  goto $bb172, $bb173;
$bb172:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 851, 54} true;
  assume {:verifier.code 0} true;
  assume ($i217 == 1);
  goto $bb170;
$bb173:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 851, 54} true;
  assume {:verifier.code 0} true;
  assume !(($i217 == 1));
  goto $bb163;
$bb174:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 851, 54} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 851, 20} true;
  assume {:verifier.code 0} true;
  $i207 := $i221;
  goto $bb160;
$bb175:
  assume ($i223 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 851, 184} true;
  assume {:verifier.code 0} true;
  $i224 := $load.i8($M.0, y$r_buff0_thd0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 851, 184} true;
  assume {:verifier.code 0} true;
  $i225 := $trunc.i8.i1($i224);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 851, 166} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i225} true;
  goto $bb178, $bb179;
$bb176:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 851, 181} true;
  assume {:verifier.code 0} true;
  assume !(($i223 == 1));
  goto $bb177;
$bb177:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 851, 212} true;
  assume {:verifier.code 0} true;
  $i227 := $load.i8($M.0, y$r_buff0_thd0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 851, 212} true;
  assume {:verifier.code 0} true;
  $i228 := $trunc.i8.i1($i227);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 851, 212} true;
  assume {:verifier.code 0} true;
  $i229 := $zext.i1.i32($i228);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 851, 166} true;
  assume {:verifier.code 0} true;
  $i226 := $i229;
  goto $bb180;
$bb178:
  assume ($i225 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 851, 166} true;
  assume {:verifier.code 0} true;
  $i226 := 0;
  goto $bb180;
$bb179:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 851, 166} true;
  assume {:verifier.code 0} true;
  assume !(($i225 == 1));
  goto $bb177;
$bb180:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 851, 166} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 851, 54} true;
  assume {:verifier.code 0} true;
  $i221 := $i226;
  goto $bb174;
$bb181:
  assume ($i233 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 852, 36} true;
  assume {:verifier.code 0} true;
  $i234 := $load.i8($M.0, y$r_buff1_thd0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 852, 36} true;
  assume {:verifier.code 0} true;
  $i235 := $trunc.i8.i1($i234);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 852, 36} true;
  assume {:verifier.code 0} true;
  $i236 := $zext.i1.i32($i235);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 852, 20} true;
  assume {:verifier.code 0} true;
  $i237 := $i236;
  goto $bb183;
$bb182:
  assume !(($i233 == 1));
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 852, 55} true;
  assume {:verifier.code 0} true;
  $i238 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 852, 55} true;
  assume {:verifier.code 0} true;
  $i239 := $trunc.i8.i1($i238);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 852, 70} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i239} true;
  goto $bb184, $bb185;
$bb183:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 852, 20} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 852, 20} true;
  assume {:verifier.code 0} true;
  $i258 := $ne.i32($i237, 0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 852, 18} true;
  assume {:verifier.code 0} true;
  $i259 := $zext.i1.i8($i258);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 852, 18} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, y$r_buff1_thd0, $i259);
  call {:cexpr "y$r_buff1_thd0"} boogie_si_record_i8($i259);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 853, 23} true;
  assume {:verifier.code 0} true;
  $i260 := $load.i32($M.0, x);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 853, 25} true;
  assume {:verifier.code 0} true;
  $i261 := $eq.i32($i260, 2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 853, 30} true;
  assume {:verifier.code 0} true;
  $i262 := 0;
  assume {:branchcond $i261} true;
  goto $bb201, $bb202;
$bb184:
  assume ($i239 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 852, 74} true;
  assume {:verifier.code 0} true;
  $i240 := $load.i8($M.0, y$r_buff0_thd0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 852, 74} true;
  assume {:verifier.code 0} true;
  $i241 := $trunc.i8.i1($i240);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 852, 89} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i241} true;
  goto $bb187, $bb189;
$bb185:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 852, 70} true;
  assume {:verifier.code 0} true;
  assume !(($i239 == 1));
  goto $bb186;
$bb186:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 852, 148} true;
  assume {:verifier.code 0} true;
  $i248 := $load.i8($M.0, y$r_buff1_thd0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 852, 148} true;
  assume {:verifier.code 0} true;
  $i249 := $trunc.i8.i1($i248);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 852, 148} true;
  assume {:verifier.code 0} true;
  $i250 := $zext.i1.i32($i249);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 852, 54} true;
  assume {:verifier.code 0} true;
  $i251 := $i250;
  goto $bb197;
$bb187:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 852, 89} true;
  assume {:verifier.code 0} true;
  assume ($i241 == 1);
  goto $bb188;
$bb188:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 852, 112} true;
  assume {:verifier.code 0} true;
  $i244 := $load.i8($M.0, y$r_buff0_thd0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 852, 112} true;
  assume {:verifier.code 0} true;
  $i245 := $trunc.i8.i1($i244);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 852, 127} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i245} true;
  goto $bb192, $bb194;
$bb189:
  assume !(($i241 == 1));
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 852, 93} true;
  assume {:verifier.code 0} true;
  $i242 := $load.i8($M.0, y$w_buff1_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 852, 93} true;
  assume {:verifier.code 0} true;
  $i243 := $trunc.i8.i1($i242);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 852, 108} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i243} true;
  goto $bb190, $bb191;
$bb190:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 852, 108} true;
  assume {:verifier.code 0} true;
  assume ($i243 == 1);
  goto $bb188;
$bb191:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 852, 108} true;
  assume {:verifier.code 0} true;
  assume !(($i243 == 1));
  goto $bb186;
$bb192:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 852, 127} true;
  assume {:verifier.code 0} true;
  assume ($i245 == 1);
  goto $bb193;
$bb193:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 852, 166} true;
  assume {:verifier.code 0} true;
  $i252 := $load.i8($M.0, y$w_buff0_used);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 852, 166} true;
  assume {:verifier.code 0} true;
  $i253 := $trunc.i8.i1($i252);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 852, 181} true;
  assume {:verifier.code 0} true;
  $i254 := 0;
  assume {:branchcond $i253} true;
  goto $bb198, $bb199;
$bb194:
  assume !(($i245 == 1));
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 852, 131} true;
  assume {:verifier.code 0} true;
  $i246 := $load.i8($M.0, y$r_buff1_thd0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 852, 131} true;
  assume {:verifier.code 0} true;
  $i247 := $trunc.i8.i1($i246);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 852, 54} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i247} true;
  goto $bb195, $bb196;
$bb195:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 852, 54} true;
  assume {:verifier.code 0} true;
  assume ($i247 == 1);
  goto $bb193;
$bb196:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 852, 54} true;
  assume {:verifier.code 0} true;
  assume !(($i247 == 1));
  goto $bb186;
$bb197:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 852, 54} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 852, 20} true;
  assume {:verifier.code 0} true;
  $i237 := $i251;
  goto $bb183;
$bb198:
  assume ($i253 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 852, 184} true;
  assume {:verifier.code 0} true;
  $i255 := $load.i8($M.0, y$r_buff0_thd0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 852, 184} true;
  assume {:verifier.code 0} true;
  $i256 := $trunc.i8.i1($i255);
  assume {:verifier.code 0} true;
  $i254 := $i256;
  goto $bb200;
$bb199:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 852, 181} true;
  assume {:verifier.code 0} true;
  assume !(($i253 == 1));
  goto $bb200;
$bb200:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 852, 166} true;
  assume {:verifier.code 0} true;
  $i257 := (if ($i254 == 1) then 0 else 0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 852, 54} true;
  assume {:verifier.code 0} true;
  $i251 := $i257;
  goto $bb197;
$bb201:
  assume ($i261 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 853, 33} true;
  assume {:verifier.code 0} true;
  $i263 := $load.i32($M.0, y);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 853, 35} true;
  assume {:verifier.code 0} true;
  $i264 := $eq.i32($i263, 2);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 853, 40} true;
  assume {:verifier.code 0} true;
  $i262 := 0;
  assume {:branchcond $i264} true;
  goto $bb204, $bb205;
$bb202:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 853, 30} true;
  assume {:verifier.code 0} true;
  assume !(($i261 == 1));
  goto $bb203;
$bb203:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 853, 21} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: output/rfi000_tso.opt_tmp.c:853:21: warning: over-approximating bitwise operation xor;
  $i269 := $xor.i1($i262, 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 853, 19} true;
  assume {:verifier.code 0} true;
  $i270 := $zext.i1.i8($i269);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 853, 19} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, main$tmp_guard1, $i270);
  call {:cexpr "main$tmp_guard1"} boogie_si_record_i8($i270);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 854, 7} true;
  assume {:verifier.code 0} true;
  $i271 := $load.i8($M.0, y$flush_delayed);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 854, 7} true;
  assume {:verifier.code 0} true;
  $i272 := $trunc.i8.i1($i271);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 854, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i272} true;
  goto $bb208, $bb209;
$bb204:
  assume ($i264 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 853, 43} true;
  assume {:verifier.code 0} true;
  $i265 := $load.i32($M.0, __unbuffered_p1_EAX);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 853, 63} true;
  assume {:verifier.code 0} true;
  $i266 := $eq.i32($i265, 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 853, 68} true;
  assume {:verifier.code 0} true;
  $i262 := 0;
  assume {:branchcond $i266} true;
  goto $bb206, $bb207;
$bb205:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 853, 40} true;
  assume {:verifier.code 0} true;
  assume !(($i264 == 1));
  goto $bb203;
$bb206:
  assume ($i266 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 853, 71} true;
  assume {:verifier.code 0} true;
  $i267 := $load.i32($M.0, __unbuffered_p1_EBX);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 853, 91} true;
  assume {:verifier.code 0} true;
  $i268 := $eq.i32($i267, 1);
  assume {:verifier.code 0} true;
  $i262 := $i268;
  goto $bb203;
$bb207:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 853, 68} true;
  assume {:verifier.code 0} true;
  assume !(($i266 == 1));
  goto $bb203;
$bb208:
  assume ($i272 == 1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 854, 25} true;
  assume {:verifier.code 0} true;
  $i273 := $load.i32($M.0, y$mem_tmp);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 854, 7} true;
  assume {:verifier.code 0} true;
  $i274 := $i273;
  goto $bb210;
$bb209:
  assume !(($i272 == 1));
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 854, 37} true;
  assume {:verifier.code 0} true;
  $i275 := $load.i32($M.0, y);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 854, 7} true;
  assume {:verifier.code 0} true;
  $i274 := $i275;
  goto $bb210;
$bb210:
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 854, 7} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 854, 5} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i32($M.0, y, $i274);
  call {:cexpr "y"} boogie_si_record_i32($i274);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 855, 19} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.i8($M.0, y$flush_delayed, 0);
  call {:cexpr "y$flush_delayed"} boogie_si_record_i8(0);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 856, 3} true;
  assume {:verifier.code 0} true;
  call __VERIFIER_atomic_end();
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 857, 21} true;
  assume {:verifier.code 1} true;
  $i276 := $load.i8($M.0, main$tmp_guard1);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 857, 21} true;
  assume {:verifier.code 1} true;
  $i277 := $trunc.i8.i1($i276);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 857, 21} true;
  assume {:verifier.code 1} true;
  $i278 := $zext.i1.i32($i277);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 857, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assert($i278);
  assume {:sourceloc "output/rfi000_tso.opt_tmp.c", 858, 3} true;
  assume {:verifier.code 0} true;
  $r := 0;
  $exn := false;
  return;
}
const pthread_create: ref;
axiom (pthread_create == $sub.ref(0, 40123));
procedure  pthread_create($p0: ref, $p1: ref, $p2: ref, $p3: ref)
  returns ($r: i32);
const __VERIFIER_assume: ref;
axiom (__VERIFIER_assume == $sub.ref(0, 41155));
procedure  __VERIFIER_assume($i0: i32)
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 247, 29} true;
  assume {:verifier.code 1} true;
  call {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 247, 29} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 38, 3} true;
  assume {:verifier.code 1} true;
  assume $i0 != $0;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 39, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_code: ref;
axiom (__SMACK_code == $sub.ref(0, 42187));
procedure  __SMACK_code.ref($p0: ref);
procedure  __SMACK_code.ref.i32($p0: ref, p.1: i32);
const __SMACK_dummy: ref;
axiom (__SMACK_dummy == $sub.ref(0, 43219));
procedure  __SMACK_dummy($i0: i32)
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 247, 29} true;
  assume {:verifier.code 1} true;
  call {:cexpr "__SMACK_dummy:arg:v"} boogie_si_record_i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 247, 29} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 247, 59} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_check_overflow: ref;
axiom (__SMACK_check_overflow == $sub.ref(0, 44251));
procedure  __SMACK_check_overflow($i0: i32)
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 247, 29} true;
  assume {:verifier.code 1} true;
  call {:cexpr "__SMACK_check_overflow:arg:flag"} boogie_si_record_i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 247, 29} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 52, 3} true;
  assume {:verifier.code 1} true;
  assert {:overflow} $i0 == $0;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 53, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_nondet_char: ref;
axiom (__SMACK_nondet_char == $sub.ref(0, 45283));
procedure  __SMACK_nondet_char()
  returns ($r: i8);
const __SMACK_nondet_signed_char: ref;
axiom (__SMACK_nondet_signed_char == $sub.ref(0, 46315));
procedure  __SMACK_nondet_signed_char()
  returns ($r: i8);
const __SMACK_nondet_unsigned_char: ref;
axiom (__SMACK_nondet_unsigned_char == $sub.ref(0, 47347));
procedure  __SMACK_nondet_unsigned_char()
  returns ($r: i8);
const __SMACK_nondet_short: ref;
axiom (__SMACK_nondet_short == $sub.ref(0, 48379));
procedure  __SMACK_nondet_short()
  returns ($r: i16);
const __SMACK_nondet_signed_short: ref;
axiom (__SMACK_nondet_signed_short == $sub.ref(0, 49411));
procedure  __SMACK_nondet_signed_short()
  returns ($r: i16);
const __SMACK_nondet_signed_short_int: ref;
axiom (__SMACK_nondet_signed_short_int == $sub.ref(0, 50443));
procedure  __SMACK_nondet_signed_short_int()
  returns ($r: i16);
const __SMACK_nondet_unsigned_short: ref;
axiom (__SMACK_nondet_unsigned_short == $sub.ref(0, 51475));
procedure  __SMACK_nondet_unsigned_short()
  returns ($r: i16);
const __SMACK_nondet_unsigned_short_int: ref;
axiom (__SMACK_nondet_unsigned_short_int == $sub.ref(0, 52507));
procedure  __SMACK_nondet_unsigned_short_int()
  returns ($r: i16);
const __VERIFIER_nondet_int: ref;
axiom (__VERIFIER_nondet_int == $sub.ref(0, 53539));
procedure  __VERIFIER_nondet_int()
  returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 104, 11} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 104, 11} true;
  assume {:verifier.code 1} true;
  call $i0 := __SMACK_nondet_int();
  call {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
  call {:cexpr "x"} boogie_si_record_i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 105, 23} true;
  assume {:verifier.code 0} true;
  $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 105, 34} true;
  assume {:verifier.code 0} true;
  $i2 := 0;
  assume {:branchcond $i1} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i1 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 105, 39} true;
  assume {:verifier.code 1} true;
  $i3 := $sle.i32($i0, 2147483647);
  assume {:verifier.code 0} true;
  $i2 := $i3;
  goto $bb3;
$bb2:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 105, 34} true;
  assume {:verifier.code 0} true;
  assume !(($i1 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 105, 34} true;
  assume {:verifier.code 1} true;
  $i4 := $zext.i1.i32($i2);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 105, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assume($i4);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 106, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const __SMACK_nondet_int: ref;
axiom (__SMACK_nondet_int == $sub.ref(0, 54571));
procedure  __SMACK_nondet_int()
  returns ($r: i32);
const __SMACK_nondet_signed_int: ref;
axiom (__SMACK_nondet_signed_int == $sub.ref(0, 55603));
procedure  __SMACK_nondet_signed_int()
  returns ($r: i32);
const __SMACK_nondet_unsigned: ref;
axiom (__SMACK_nondet_unsigned == $sub.ref(0, 56635));
procedure  __SMACK_nondet_unsigned()
  returns ($r: i32);
const __SMACK_nondet_unsigned_int: ref;
axiom (__SMACK_nondet_unsigned_int == $sub.ref(0, 57667));
procedure  __SMACK_nondet_unsigned_int()
  returns ($r: i32);
const __SMACK_nondet_long: ref;
axiom (__SMACK_nondet_long == $sub.ref(0, 58699));
procedure  __SMACK_nondet_long()
  returns ($r: i64);
const __SMACK_nondet_long_int: ref;
axiom (__SMACK_nondet_long_int == $sub.ref(0, 59731));
procedure  __SMACK_nondet_long_int()
  returns ($r: i64);
const __SMACK_nondet_signed_long: ref;
axiom (__SMACK_nondet_signed_long == $sub.ref(0, 60763));
procedure  __SMACK_nondet_signed_long()
  returns ($r: i64);
const __SMACK_nondet_signed_long_int: ref;
axiom (__SMACK_nondet_signed_long_int == $sub.ref(0, 61795));
procedure  __SMACK_nondet_signed_long_int()
  returns ($r: i64);
const __SMACK_nondet_unsigned_long: ref;
axiom (__SMACK_nondet_unsigned_long == $sub.ref(0, 62827));
procedure  __SMACK_nondet_unsigned_long()
  returns ($r: i64);
const __SMACK_nondet_unsigned_long_int: ref;
axiom (__SMACK_nondet_unsigned_long_int == $sub.ref(0, 63859));
procedure  __SMACK_nondet_unsigned_long_int()
  returns ($r: i64);
const __SMACK_nondet_long_long: ref;
axiom (__SMACK_nondet_long_long == $sub.ref(0, 64891));
procedure  __SMACK_nondet_long_long()
  returns ($r: i64);
const __SMACK_nondet_long_long_int: ref;
axiom (__SMACK_nondet_long_long_int == $sub.ref(0, 65923));
procedure  __SMACK_nondet_long_long_int()
  returns ($r: i64);
const __SMACK_nondet_signed_long_long: ref;
axiom (__SMACK_nondet_signed_long_long == $sub.ref(0, 66955));
procedure  __SMACK_nondet_signed_long_long()
  returns ($r: i64);
const __SMACK_nondet_signed_long_long_int: ref;
axiom (__SMACK_nondet_signed_long_long_int == $sub.ref(0, 67987));
procedure  __SMACK_nondet_signed_long_long_int()
  returns ($r: i64);
const __SMACK_nondet_unsigned_long_long: ref;
axiom (__SMACK_nondet_unsigned_long_long == $sub.ref(0, 69019));
procedure  __SMACK_nondet_unsigned_long_long()
  returns ($r: i64);
const __SMACK_nondet_unsigned_long_long_int: ref;
axiom (__SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 70051));
procedure  __SMACK_nondet_unsigned_long_long_int()
  returns ($r: i64);
const __VERIFIER_nondet_bool: ref;
axiom (__VERIFIER_nondet_bool == $sub.ref(0, 71083));
procedure  __VERIFIER_nondet_bool()
  returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 220, 20} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 220, 20} true;
  assume {:verifier.code 1} true;
  call $i0 := __VERIFIER_nondet_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 220, 13} true;
  assume {:verifier.code 0} true;
  $i1 := $ne.i32($i0, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 220, 9} true;
  assume {:verifier.code 0} true;
  $i2 := $zext.i1.i8($i1);
  call {:cexpr "x"} boogie_si_record_i8($i2);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 221, 21} true;
  assume {:verifier.code 0} true;
  $i3 := $trunc.i8.i1($i2);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 221, 21} true;
  assume {:verifier.code 0} true;
  $i4 := $zext.i1.i32($i3);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 221, 23} true;
  assume {:verifier.code 0} true;
  $i5 := $eq.i32($i4, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 221, 28} true;
  assume {:verifier.code 0} true;
  $i6 := 1;
  assume {:branchcond $i5} true;
  goto $bb1, $bb3;
$bb1:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 221, 28} true;
  assume {:verifier.code 0} true;
  assume ($i5 == 1);
  goto $bb2;
$bb2:
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 221, 28} true;
  assume {:verifier.code 1} true;
  $i10 := $zext.i1.i32($i6);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 221, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assume($i10);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 222, 10} true;
  assume {:verifier.code 0} true;
  $i11 := $trunc.i8.i1($i2);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 222, 3} true;
  assume {:verifier.code 0} true;
  $r := $i11;
  $exn := false;
  return;
$bb3:
  assume !(($i5 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 221, 31} true;
  assume {:verifier.code 1} true;
  $i7 := $trunc.i8.i1($i2);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 221, 31} true;
  assume {:verifier.code 1} true;
  $i8 := $zext.i1.i32($i7);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 221, 33} true;
  assume {:verifier.code 1} true;
  $i9 := $eq.i32($i8, 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 221, 28} true;
  assume {:verifier.code 0} true;
  $i6 := $i9;
  goto $bb2;
}
const __SMACK_decls: ref;
axiom (__SMACK_decls == $sub.ref(0, 72115));
type $mop;
procedure  boogie_si_record_mop(m: $mop);
const $MOP: $mop;
var $exn: bool;
var $exnv: int;
procedure  corral_atomic_begin();
procedure  corral_atomic_end();
procedure  $alloc(n: ref) returns (p: ref)
{
  call corral_atomic_begin();
  call p := $$alloc(n);
  call corral_atomic_end();
}

procedure  $malloc(n: ref) returns (p: ref)
{
  call corral_atomic_begin();
  call p := $$alloc(n);
  call corral_atomic_end();
}

var $CurrAddr:ref;

procedure {:inline 1} $$alloc(n: ref) returns (p: ref)
modifies $CurrAddr;
{
  assume $sge.ref.bool(n, $0.ref);
  if ($sgt.ref.bool(n, $0.ref)) {
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
  } else {
    p := $0.ref;
  }
}

procedure  $free(p: ref);

const __SMACK_top_decl: ref;
axiom (__SMACK_top_decl == $sub.ref(0, 73147));
procedure  __SMACK_top_decl.ref($p0: ref);
const __SMACK_init_func_memory_model: ref;
axiom (__SMACK_init_func_memory_model == $sub.ref(0, 74179));
procedure  __SMACK_init_func_memory_model()
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 528, 3} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 528, 3} true;
  assume {:verifier.code 1} true;
  $CurrAddr := $1024.ref;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 533, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __VERIFIER_atomic_begin: ref;
axiom (__VERIFIER_atomic_begin == $sub.ref(0, 75211));
procedure  __VERIFIER_atomic_begin()
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 535, 34} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 535, 34} true;
  assume {:verifier.code 1} true;
  call corral_atomic_begin();
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 535, 79} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __VERIFIER_atomic_end: ref;
axiom (__VERIFIER_atomic_end == $sub.ref(0, 76243));
procedure  __VERIFIER_atomic_end()
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 537, 32} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 537, 32} true;
  assume {:verifier.code 1} true;
  call corral_atomic_end();
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 537, 75} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const abort: ref;
axiom (abort == $sub.ref(0, 77275));
procedure  abort()
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 21, 3} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 21, 3} true;
  assume {:verifier.code 1} true;
  assume false;
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 22, 3} true;
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "/usr/local/share/smack/lib/stdlib.c", 22, 3} true;
  assume {:verifier.code 0} true;
  goto $bb1;
}
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 78307));
procedure  llvm.dbg.value($p0: ref, $p1: ref, $p2: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 79339));
procedure  __SMACK_static_init()
{
$bb0:
  $M.0 := $store.i32($M.0, __unbuffered_cnt, 0);
  call {:cexpr "__unbuffered_cnt"} boogie_si_record_i32(0);
  $M.0 := $store.i32($M.0, __unbuffered_p1_EAX, 0);
  call {:cexpr "__unbuffered_p1_EAX"} boogie_si_record_i32(0);
  $M.0 := $store.i32($M.0, __unbuffered_p1_EBX, 0);
  call {:cexpr "__unbuffered_p1_EBX"} boogie_si_record_i32(0);
  $M.0 := $store.i32($M.0, x, 0);
  call {:cexpr "x"} boogie_si_record_i32(0);
  $M.0 := $store.i32($M.0, y, 0);
  call {:cexpr "y"} boogie_si_record_i32(0);
  $M.0 := $store.i8($M.0, y$w_buff0_used, 0);
  call {:cexpr "y$w_buff0_used"} boogie_si_record_i8(0);
  $M.0 := $store.i8($M.0, y$r_buff0_thd1, 0);
  call {:cexpr "y$r_buff0_thd1"} boogie_si_record_i8(0);
  $M.0 := $store.i32($M.0, y$w_buff0, 0);
  call {:cexpr "y$w_buff0"} boogie_si_record_i32(0);
  $M.0 := $store.i8($M.0, y$w_buff1_used, 0);
  call {:cexpr "y$w_buff1_used"} boogie_si_record_i8(0);
  $M.0 := $store.i8($M.0, y$r_buff1_thd1, 0);
  call {:cexpr "y$r_buff1_thd1"} boogie_si_record_i8(0);
  $M.0 := $store.i32($M.0, y$w_buff1, 0);
  call {:cexpr "y$w_buff1"} boogie_si_record_i32(0);
  $M.0 := $store.i8($M.0, y$r_buff0_thd0, 0);
  call {:cexpr "y$r_buff0_thd0"} boogie_si_record_i8(0);
  $M.0 := $store.i8($M.0, y$r_buff1_thd0, 0);
  call {:cexpr "y$r_buff1_thd0"} boogie_si_record_i8(0);
  $M.0 := $store.i8($M.0, y$r_buff0_thd2, 0);
  call {:cexpr "y$r_buff0_thd2"} boogie_si_record_i8(0);
  $M.0 := $store.i8($M.0, y$r_buff1_thd2, 0);
  call {:cexpr "y$r_buff1_thd2"} boogie_si_record_i8(0);
  $M.0 := $store.i8($M.0, weak$$choice0, 0);
  call {:cexpr "weak$$choice0"} boogie_si_record_i8(0);
  $M.0 := $store.i8($M.0, weak$$choice2, 0);
  call {:cexpr "weak$$choice2"} boogie_si_record_i8(0);
  $M.0 := $store.i8($M.0, y$flush_delayed, 0);
  call {:cexpr "y$flush_delayed"} boogie_si_record_i8(0);
  $M.0 := $store.i32($M.0, y$mem_tmp, 0);
  call {:cexpr "y$mem_tmp"} boogie_si_record_i32(0);
  $M.0 := $store.i8($M.0, main$tmp_guard0, 0);
  call {:cexpr "main$tmp_guard0"} boogie_si_record_i8(0);
  $M.0 := $store.i8($M.0, main$tmp_guard1, 0);
  call {:cexpr "main$tmp_guard1"} boogie_si_record_i8(0);
  $M.0 := $store.i8($M.0, y$read_delayed, 0);
  call {:cexpr "y$read_delayed"} boogie_si_record_i8(0);
  $M.0 := $store.ref($M.0, y$read_delayed_var, $0.ref);
  $M.0 := $store.ref($M.0, env_value_str, .str.1.12);
  $M.0 := $store.i32($M.0, errno_global, 0);
  call {:cexpr "errno_global"} boogie_si_record_i32(0);
  $exn := false;
  return;
}
procedure  boogie_si_record_i1(x: i1);
procedure  boogie_si_record_i32(x: i32);
procedure  boogie_si_record_i8(x: i8);
procedure  boogie_si_record_ref(x: ref);
procedure  $initialize()
{
  call __SMACK_static_init();
  call __SMACK_init_func_memory_model();
  return;
}
